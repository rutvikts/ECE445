
OxygenDeliveryRobotFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009018  08009018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  0000b17c  2**0
                  CONTENTS
  4 .ARM          00000000  08009084  08009084  0000b17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009084  08009084  0000b17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  0000a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800908c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001370  2000017c  08009208  0000b17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ec  08009208  0000b4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012716  00000000  00000000  0000b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032be  00000000  00000000  0001d8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00020b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d96  00000000  00000000  00021d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a46c  00000000  00000000  00022aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e4a  00000000  00000000  0003cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e93c  00000000  00000000  00051da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e06e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  000e0724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e5290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009000 	.word	0x08009000

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	08009000 	.word	0x08009000

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__gesf2>:
 8000568:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800056c:	e006      	b.n	800057c <__cmpsf2+0x4>
 800056e:	bf00      	nop

08000570 <__lesf2>:
 8000570:	f04f 0c01 	mov.w	ip, #1
 8000574:	e002      	b.n	800057c <__cmpsf2+0x4>
 8000576:	bf00      	nop

08000578 <__cmpsf2>:
 8000578:	f04f 0c01 	mov.w	ip, #1
 800057c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000580:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000584:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000588:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800058c:	bf18      	it	ne
 800058e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000592:	d011      	beq.n	80005b8 <__cmpsf2+0x40>
 8000594:	b001      	add	sp, #4
 8000596:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800059a:	bf18      	it	ne
 800059c:	ea90 0f01 	teqne	r0, r1
 80005a0:	bf58      	it	pl
 80005a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80005a6:	bf88      	it	hi
 80005a8:	17c8      	asrhi	r0, r1, #31
 80005aa:	bf38      	it	cc
 80005ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80005b0:	bf18      	it	ne
 80005b2:	f040 0001 	orrne.w	r0, r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005bc:	d102      	bne.n	80005c4 <__cmpsf2+0x4c>
 80005be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80005c2:	d105      	bne.n	80005d0 <__cmpsf2+0x58>
 80005c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80005c8:	d1e4      	bne.n	8000594 <__cmpsf2+0x1c>
 80005ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80005ce:	d0e1      	beq.n	8000594 <__cmpsf2+0x1c>
 80005d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__aeabi_cfrcmple>:
 80005d8:	4684      	mov	ip, r0
 80005da:	4608      	mov	r0, r1
 80005dc:	4661      	mov	r1, ip
 80005de:	e7ff      	b.n	80005e0 <__aeabi_cfcmpeq>

080005e0 <__aeabi_cfcmpeq>:
 80005e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80005e2:	f7ff ffc9 	bl	8000578 <__cmpsf2>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	bf48      	it	mi
 80005ea:	f110 0f00 	cmnmi.w	r0, #0
 80005ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080005f0 <__aeabi_fcmpeq>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff fff4 	bl	80005e0 <__aeabi_cfcmpeq>
 80005f8:	bf0c      	ite	eq
 80005fa:	2001      	moveq	r0, #1
 80005fc:	2000      	movne	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_fcmplt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffea 	bl	80005e0 <__aeabi_cfcmpeq>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_fcmple>:
 8000618:	f84d ed08 	str.w	lr, [sp, #-8]!
 800061c:	f7ff ffe0 	bl	80005e0 <__aeabi_cfcmpeq>
 8000620:	bf94      	ite	ls
 8000622:	2001      	movls	r0, #1
 8000624:	2000      	movhi	r0, #0
 8000626:	f85d fb08 	ldr.w	pc, [sp], #8
 800062a:	bf00      	nop

0800062c <__aeabi_fcmpge>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff ffd2 	bl	80005d8 <__aeabi_cfrcmple>
 8000634:	bf94      	ite	ls
 8000636:	2001      	movls	r0, #1
 8000638:	2000      	movhi	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_fcmpgt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffc8 	bl	80005d8 <__aeabi_cfrcmple>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	0000      	movs	r0, r0
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fcc7 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f845 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 fa8b 	bl	8000bc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006aa:	f000 f89b 	bl	80007e4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006ae:	f000 f8cf 	bl	8000850 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006b2:	f000 f989 	bl	80009c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006b6:	f000 f9db 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006ba:	f000 fa2d 	bl	8000b18 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80006be:	f008 f80d 	bl	80086dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Setting up PWM Timer
 80006c2:	2100      	movs	r1, #0
 80006c4:	4818      	ldr	r0, [pc, #96]	@ (8000728 <main+0x90>)
 80006c6:	f003 fb11 	bl	8003cec <HAL_TIM_PWM_Start>

  float M1_Speed = 0;
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	htim1.Instance->CCR1 = M1_Speed;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <main+0x90>)
 80006d2:	681c      	ldr	r4, [r3, #0]
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffbd 	bl	8000654 <__aeabi_f2uiz>
 80006da:	4603      	mov	r3, r0
 80006dc:	6363      	str	r3, [r4, #52]	@ 0x34

	M1_Speed += 0.1;
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fe9a 	bl	8000418 <__aeabi_f2d>
 80006e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8000720 <main+0x88>)
 80006e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ea:	f7ff fd37 	bl	800015c <__adddf3>
 80006ee:	4602      	mov	r2, r0
 80006f0:	460b      	mov	r3, r1
 80006f2:	4610      	mov	r0, r2
 80006f4:	4619      	mov	r1, r3
 80006f6:	f7ff fee7 	bl	80004c8 <__aeabi_d2f>
 80006fa:	4603      	mov	r3, r0
 80006fc:	607b      	str	r3, [r7, #4]

	if (M1_Speed > 10) {
 80006fe:	490b      	ldr	r1, [pc, #44]	@ (800072c <main+0x94>)
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff9d 	bl	8000640 <__aeabi_fcmpgt>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <main+0x7a>
	  M1_Speed = 0;
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
	}

	HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000716:	f000 fced 	bl	80010f4 <HAL_Delay>
	htim1.Instance->CCR1 = M1_Speed;
 800071a:	e7d9      	b.n	80006d0 <main+0x38>
 800071c:	f3af 8000 	nop.w
 8000720:	9999999a 	.word	0x9999999a
 8000724:	3fb99999 	.word	0x3fb99999
 8000728:	200001f0 	.word	0x200001f0
 800072c:	41200000 	.word	0x41200000

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800073a:	2228      	movs	r2, #40	@ 0x28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f008 fc32 	bl	8008fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800077c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fcf0 	bl	800316c <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000792:	f000 fa6d 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 ff5c 	bl	8003670 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007be:	f000 fa57 	bl	8000c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007c2:	2310      	movs	r3, #16
 80007c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f8ab 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d8:	f000 fa4a 	bl	8000c70 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	@ 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2210      	movs	r2, #16
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f003 f92d 	bl	8003a94 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 fa16 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000198 	.word	0x20000198
 800084c:	40013000 	.word	0x40013000

08000850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b096      	sub	sp, #88	@ 0x58
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2220      	movs	r2, #32
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f008 fb8d 	bl	8008fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800088e:	4b4c      	ldr	r3, [pc, #304]	@ (80009c0 <MX_TIM1_Init+0x170>)
 8000890:	4a4c      	ldr	r2, [pc, #304]	@ (80009c4 <MX_TIM1_Init+0x174>)
 8000892:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000894:	4b4a      	ldr	r3, [pc, #296]	@ (80009c0 <MX_TIM1_Init+0x170>)
 8000896:	2247      	movs	r2, #71	@ 0x47
 8000898:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b49      	ldr	r3, [pc, #292]	@ (80009c0 <MX_TIM1_Init+0x170>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80008a0:	4b47      	ldr	r3, [pc, #284]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008a2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ae:	4b44      	ldr	r3, [pc, #272]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b42      	ldr	r3, [pc, #264]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ba:	4841      	ldr	r0, [pc, #260]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008bc:	f003 f96e 	bl	8003b9c <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008c6:	f000 f9d3 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008d4:	4619      	mov	r1, r3
 80008d6:	483a      	ldr	r0, [pc, #232]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008d8:	f003 fc0e 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008e2:	f000 f9c5 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008e6:	4836      	ldr	r0, [pc, #216]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80008e8:	f003 f9a7 	bl	8003c3a <HAL_TIM_PWM_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008f2:	f000 f9bd 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000902:	4619      	mov	r1, r3
 8000904:	482e      	ldr	r0, [pc, #184]	@ (80009c0 <MX_TIM1_Init+0x170>)
 8000906:	f003 ff63 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000910:	f000 f9ae 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000914:	2360      	movs	r3, #96	@ 0x60
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 6000;
 8000918:	f241 7370 	movw	r3, #6000	@ 0x1770
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	4821      	ldr	r0, [pc, #132]	@ (80009c0 <MX_TIM1_Init+0x170>)
 800093c:	f003 fb1a 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000946:	f000 f993 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 800094a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000954:	2204      	movs	r2, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4819      	ldr	r0, [pc, #100]	@ (80009c0 <MX_TIM1_Init+0x170>)
 800095a:	f003 fb0b 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000964:	f000 f984 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	2208      	movs	r2, #8
 800096e:	4619      	mov	r1, r3
 8000970:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <MX_TIM1_Init+0x170>)
 8000972:	f003 faff 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800097c:	f000 f978 	bl	8000c70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80009a4:	f003 ff72 	bl	800488c <HAL_TIMEx_ConfigBreakDeadTime>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80009ae:	f000 f95f 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b2:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <MX_TIM1_Init+0x170>)
 80009b4:	f000 faa6 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3758      	adds	r7, #88	@ 0x58
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001f0 	.word	0x200001f0
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	@ 0x30
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2224      	movs	r2, #36	@ 0x24
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f008 fae6 	bl	8008fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 80009fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 8000a38:	f003 f9fa 	bl	8003e30 <HAL_TIM_Encoder_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a42:	f000 f915 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_TIM2_Init+0xa4>)
 8000a54:	f003 febc 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a5e:	f000 f907 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000238 	.word	0x20000238

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2224      	movs	r2, #36	@ 0x24
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f008 fa92 	bl	8008fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000a8e:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <MX_TIM3_Init+0xa4>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000ade:	f003 f9a7 	bl	8003e30 <HAL_TIM_Encoder_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 f8c2 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_TIM3_Init+0xa0>)
 8000afa:	f003 fe69 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b04:	f000 f8b4 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	@ 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000280 	.word	0x20000280
 8000b14:	40000400 	.word	0x40000400

08000b18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	@ 0x30
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2224      	movs	r2, #36	@ 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f008 fa3e 	bl	8008fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b34:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b36:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000b86:	f003 f953 	bl	8003e30 <HAL_TIM_Encoder_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 f86e 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM4_Init+0xa0>)
 8000ba2:	f003 fe15 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bac:	f000 f860 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200002c8 	.word	0x200002c8
 8000bbc:	40000800 	.word	0x40000800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a16      	ldr	r2, [pc, #88]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_RasPi_Pin|SPI1_NSS_ESP2_Pin|SPI1_NSS_ESP1_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	211c      	movs	r1, #28
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <MX_GPIO_Init+0xa8>)
 8000c22:	f000 fd1d 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_NSS_RasPi_Pin SPI1_NSS_ESP2_Pin SPI1_NSS_ESP1_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_RasPi_Pin|SPI1_NSS_ESP2_Pin|SPI1_NSS_ESP1_Pin;
 8000c26:	231c      	movs	r3, #28
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <MX_GPIO_Init+0xa8>)
 8000c3e:	f000 fb8b 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : OR3_LimitSwitches_Pin */
  GPIO_InitStruct.Pin = OR3_LimitSwitches_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OR3_LimitSwitches_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_GPIO_Init+0xac>)
 8000c58:	f000 fb7e 	bl	8001358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <HAL_SPI_MspInit+0x88>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d12f      	bne.n	8000d60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a13      	ldr	r2, [pc, #76]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_SPI_MspInit+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d30:	23a0      	movs	r3, #160	@ 0xa0
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <HAL_SPI_MspInit+0x90>)
 8000d44:	f000 fb08 	bl	8001358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d48:	2340      	movs	r3, #64	@ 0x40
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_SPI_MspInit+0x90>)
 8000d5c:	f000 fafc 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013000 	.word	0x40013000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800

08000d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <HAL_TIM_Base_MspInit+0x34>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10b      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40012c00 	.word	0x40012c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	@ 0x38
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dce:	d124      	bne.n	8000e1a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd0:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b43      	ldr	r3, [pc, #268]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a3f      	ldr	r2, [pc, #252]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_ME1_ChA_Pin|TIM2_CH2_ME1_ChB_Pin;
 8000e00:	2303      	movs	r3, #3
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4837      	ldr	r0, [pc, #220]	@ (8000ef0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e14:	f000 faa0 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e18:	e064      	b.n	8000ee4 <HAL_TIM_Encoder_MspInit+0x134>
  else if(htim_encoder->Instance==TIM3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a35      	ldr	r2, [pc, #212]	@ (8000ef4 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d136      	bne.n	8000e92 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e24:	4b31      	ldr	r3, [pc, #196]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	4a30      	ldr	r2, [pc, #192]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	61d3      	str	r3, [r2, #28]
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM3_CH1_ME2_ChA_Pin|TIM3_CH2_ME2_ChB_Pin;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4824      	ldr	r0, [pc, #144]	@ (8000ef8 <HAL_TIM_Encoder_MspInit+0x148>)
 8000e68:	f000 fa76 	bl	8001358 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000e6c:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x14c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e74:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e7c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_TIM_Encoder_MspInit+0x14c>)
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8e:	6053      	str	r3, [r2, #4]
}
 8000e90:	e028      	b.n	8000ee4 <HAL_TIM_Encoder_MspInit+0x134>
  else if(htim_encoder->Instance==TIM4)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1a      	ldr	r2, [pc, #104]	@ (8000f00 <HAL_TIM_Encoder_MspInit+0x150>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ME3_ChA_Pin|TIM4_CH2_ME3_ChB_Pin;
 8000ecc:	23c0      	movs	r3, #192	@ 0xc0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <HAL_TIM_Encoder_MspInit+0x148>)
 8000ee0:	f000 fa3a 	bl	8001358 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40000800 	.word	0x40000800

08000f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_TIM_MspPostInit+0x5c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d118      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_TIM_MspPostInit+0x60>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <HAL_TIM_MspPostInit+0x60>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_TIM_MspPostInit+0x60>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1__PWM_Motor_1_Pin|TIM1_CH2__PWM_Motor_2_Pin|TIM1_CH3__PWM_Motor_3_Pin;
 8000f3c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_TIM_MspPostInit+0x64>)
 8000f52:	f000 fa01 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012c00 	.word	0x40012c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f87e 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fca:	f000 fc86 	bl	80018da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000fdc 	.word	0x20000fdc

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff fff8 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	@ (8001018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fea:	490c      	ldr	r1, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fec:	4a0c      	ldr	r2, [pc, #48]	@ (8001020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a09      	ldr	r2, [pc, #36]	@ (8001024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001000:	4c09      	ldr	r4, [pc, #36]	@ (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f007 ffd3 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff fb41 	bl	8000698 <main>
  bx lr
 8001016:	4770      	bx	lr
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001020:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 8001024:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001028:	200014ec 	.word	0x200014ec

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x28>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f947 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fe16 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f95f 	bl	800133e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001098:	f000 f927 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a03      	ldr	r2, [pc, #12]	@ (80010dc <HAL_IncTick+0x20>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000310 	.word	0x20000310

080010e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	@ (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000310 	.word	0x20000310

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fff0 	bl	80010e0 <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffe0 	bl	80010e0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4906      	ldr	r1, [pc, #24]	@ (80011d4 <__NVIC_EnableIRQ+0x34>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b4:	f7ff ff90 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff2d 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff42 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff35 	bl	80011a0 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b08b      	sub	sp, #44	@ 0x2c
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e169      	b.n	8001640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800136c:	2201      	movs	r2, #1
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8158 	bne.w	800163a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a9a      	ldr	r2, [pc, #616]	@ (80015f8 <HAL_GPIO_Init+0x2a0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d05e      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 8001394:	4a98      	ldr	r2, [pc, #608]	@ (80015f8 <HAL_GPIO_Init+0x2a0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d875      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 800139a:	4a98      	ldr	r2, [pc, #608]	@ (80015fc <HAL_GPIO_Init+0x2a4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d058      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013a0:	4a96      	ldr	r2, [pc, #600]	@ (80015fc <HAL_GPIO_Init+0x2a4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d86f      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013a6:	4a96      	ldr	r2, [pc, #600]	@ (8001600 <HAL_GPIO_Init+0x2a8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d052      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013ac:	4a94      	ldr	r2, [pc, #592]	@ (8001600 <HAL_GPIO_Init+0x2a8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d869      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013b2:	4a94      	ldr	r2, [pc, #592]	@ (8001604 <HAL_GPIO_Init+0x2ac>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04c      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013b8:	4a92      	ldr	r2, [pc, #584]	@ (8001604 <HAL_GPIO_Init+0x2ac>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d863      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013be:	4a92      	ldr	r2, [pc, #584]	@ (8001608 <HAL_GPIO_Init+0x2b0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d046      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
 80013c4:	4a90      	ldr	r2, [pc, #576]	@ (8001608 <HAL_GPIO_Init+0x2b0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d85d      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d82a      	bhi.n	8001424 <HAL_GPIO_Init+0xcc>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d859      	bhi.n	8001486 <HAL_GPIO_Init+0x12e>
 80013d2:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <HAL_GPIO_Init+0x80>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	08001453 	.word	0x08001453
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800143f 	.word	0x0800143f
 80013e4:	08001481 	.word	0x08001481
 80013e8:	08001487 	.word	0x08001487
 80013ec:	08001487 	.word	0x08001487
 80013f0:	08001487 	.word	0x08001487
 80013f4:	08001487 	.word	0x08001487
 80013f8:	08001487 	.word	0x08001487
 80013fc:	08001487 	.word	0x08001487
 8001400:	08001487 	.word	0x08001487
 8001404:	08001487 	.word	0x08001487
 8001408:	08001487 	.word	0x08001487
 800140c:	08001487 	.word	0x08001487
 8001410:	08001487 	.word	0x08001487
 8001414:	08001487 	.word	0x08001487
 8001418:	08001487 	.word	0x08001487
 800141c:	08001435 	.word	0x08001435
 8001420:	08001449 	.word	0x08001449
 8001424:	4a79      	ldr	r2, [pc, #484]	@ (800160c <HAL_GPIO_Init+0x2b4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142a:	e02c      	b.n	8001486 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e029      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	3304      	adds	r3, #4
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e024      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	3308      	adds	r3, #8
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e01f      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	330c      	adds	r3, #12
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e01a      	b.n	8001488 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145a:	2304      	movs	r3, #4
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e013      	b.n	8001488 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	611a      	str	r2, [r3, #16]
          break;
 8001472:	e009      	b.n	8001488 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	615a      	str	r2, [r3, #20]
          break;
 800147e:	e003      	b.n	8001488 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x130>
          break;
 8001486:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	@ 0xff
 800148c:	d801      	bhi.n	8001492 <HAL_GPIO_Init+0x13a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_Init+0x13e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3304      	adds	r3, #4
 8001496:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2bff      	cmp	r3, #255	@ 0xff
 800149c:	d802      	bhi.n	80014a4 <HAL_GPIO_Init+0x14c>
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	e002      	b.n	80014aa <HAL_GPIO_Init+0x152>
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	3b08      	subs	r3, #8
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	210f      	movs	r1, #15
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	6a39      	ldr	r1, [r7, #32]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80b1 	beq.w	800163a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001610 <HAL_GPIO_Init+0x2b8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001610 <HAL_GPIO_Init+0x2b8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <HAL_GPIO_Init+0x2b8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f0:	4a48      	ldr	r2, [pc, #288]	@ (8001614 <HAL_GPIO_Init+0x2bc>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a40      	ldr	r2, [pc, #256]	@ (8001618 <HAL_GPIO_Init+0x2c0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d013      	beq.n	8001544 <HAL_GPIO_Init+0x1ec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_GPIO_Init+0x2c4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d00d      	beq.n	8001540 <HAL_GPIO_Init+0x1e8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <HAL_GPIO_Init+0x2c8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x1e4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3d      	ldr	r2, [pc, #244]	@ (8001624 <HAL_GPIO_Init+0x2cc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d101      	bne.n	8001538 <HAL_GPIO_Init+0x1e0>
 8001534:	2303      	movs	r3, #3
 8001536:	e006      	b.n	8001546 <HAL_GPIO_Init+0x1ee>
 8001538:	2304      	movs	r3, #4
 800153a:	e004      	b.n	8001546 <HAL_GPIO_Init+0x1ee>
 800153c:	2302      	movs	r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x1ee>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_GPIO_Init+0x1ee>
 8001544:	2300      	movs	r3, #0
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001556:	492f      	ldr	r1, [pc, #188]	@ (8001614 <HAL_GPIO_Init+0x2bc>)
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	492c      	ldr	r1, [pc, #176]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800157e:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	4928      	ldr	r1, [pc, #160]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001598:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4922      	ldr	r1, [pc, #136]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	491e      	ldr	r1, [pc, #120]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4918      	ldr	r1, [pc, #96]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4914      	ldr	r1, [pc, #80]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d021      	beq.n	800162c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	490e      	ldr	r1, [pc, #56]	@ (8001628 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e021      	b.n	800163a <HAL_GPIO_Init+0x2e2>
 80015f6:	bf00      	nop
 80015f8:	10320000 	.word	0x10320000
 80015fc:	10310000 	.word	0x10310000
 8001600:	10220000 	.word	0x10220000
 8001604:	10210000 	.word	0x10210000
 8001608:	10120000 	.word	0x10120000
 800160c:	10110000 	.word	0x10110000
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	40010800 	.word	0x40010800
 800161c:	40010c00 	.word	0x40010c00
 8001620:	40011000 	.word	0x40011000
 8001624:	40011400 	.word	0x40011400
 8001628:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_GPIO_Init+0x304>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	43db      	mvns	r3, r3
 8001634:	4909      	ldr	r1, [pc, #36]	@ (800165c <HAL_GPIO_Init+0x304>)
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	3301      	adds	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae8e 	bne.w	800136c <HAL_GPIO_Init+0x14>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	372c      	adds	r7, #44	@ 0x2c
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	b08b      	sub	sp, #44	@ 0x2c
 8001694:	af06      	add	r7, sp, #24
 8001696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0f1      	b.n	8001886 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f007 f9cc 	bl	8008a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 f956 	bl	800497a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	687e      	ldr	r6, [r7, #4]
 80016d6:	466d      	mov	r5, sp
 80016d8:	f106 0410 	add.w	r4, r6, #16
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	602b      	str	r3, [r5, #0]
 80016e4:	1d33      	adds	r3, r6, #4
 80016e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f003 f920 	bl	800492e <USB_CoreInit>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0c2      	b.n	8001886 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f951 	bl	80049ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e040      	b.n	8001794 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3301      	adds	r3, #1
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3303      	adds	r3, #3
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3338      	adds	r3, #56	@ 0x38
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	333c      	adds	r3, #60	@ 0x3c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3340      	adds	r3, #64	@ 0x40
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3301      	adds	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3b9      	bcc.n	8001712 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e044      	b.n	800182e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	3301      	adds	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3b5      	bcc.n	80017a4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	687e      	ldr	r6, [r7, #4]
 8001840:	466d      	mov	r5, sp
 8001842:	f106 0410 	add.w	r4, r6, #16
 8001846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	1d33      	adds	r3, r6, #4
 8001850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f003 f8b7 	bl	80049c6 <USB_DevInit>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00d      	b.n	8001886 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fb39 	bl	8006ef6 <USB_DevDisconnect>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800188e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_PCD_Start+0x16>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e016      	b.n	80018d2 <HAL_PCD_Start+0x44>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 f84c 	bl	800494e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018b6:	2101      	movs	r1, #1
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f007 fb3e 	bl	8008f3a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fb0d 	bl	8006ee2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fb0f 	bl	8006f0a <USB_ReadInterrupts>
 80018ec:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb1b 	bl	8001f34 <PCD_EP_ISR_Handler>

    return;
 80018fe:	e119      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d013      	beq.n	8001932 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800191c:	b292      	uxth	r2, r2
 800191e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f007 f911 	bl	8008b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f905 	bl	8001b3a <HAL_PCD_SetAddress>

    return;
 8001930:	e100      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800194e:	b292      	uxth	r2, r2
 8001950:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001954:	e0ee      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001972:	b292      	uxth	r2, r2
 8001974:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001978:	e0dc      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d027      	beq.n	80019d4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	b292      	uxth	r2, r2
 8001998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f007 f901 	bl	8008bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019d2:	e0af      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8083 	beq.w	8001ae6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
 80019e4:	e010      	b.n	8001a08 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	441a      	add	r2, r3
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	8812      	ldrh	r2, [r2, #0]
 80019f6:	b292      	uxth	r2, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	3320      	adds	r3, #32
 80019fc:	443b      	add	r3, r7
 80019fe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	3301      	adds	r3, #1
 8001a06:	77fb      	strb	r3, [r7, #31]
 8001a08:	7ffb      	ldrb	r3, [r7, #31]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	d9eb      	bls.n	80019e6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	b292      	uxth	r2, r2
 8001a22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a3e:	bf00      	nop
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f6      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a64:	b292      	uxth	r2, r2
 8001a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	77fb      	strb	r3, [r7, #31]
 8001a6e:	e00f      	b.n	8001a90 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4611      	mov	r1, r2
 8001a78:	7ffa      	ldrb	r2, [r7, #31]
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	440a      	add	r2, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	3320      	adds	r3, #32
 8001a82:	443b      	add	r3, r7
 8001a84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001a88:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	2b07      	cmp	r3, #7
 8001a94:	d9ec      	bls.n	8001a70 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0208 	orr.w	r2, r2, #8
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0204 	orr.w	r2, r2, #4
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f007 f852 	bl	8008b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ae4:	e026      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00f      	beq.n	8001b10 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f007 f810 	bl	8008b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b0e:	e011      	b.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b32:	bf00      	nop
  }
}
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_PCD_SetAddress+0x1a>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e013      	b.n	8001b7c <HAL_PCD_SetAddress+0x42>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 f9a5 	bl	8006ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	70fb      	strb	r3, [r7, #3]
 8001b96:	460b      	mov	r3, r1
 8001b98:	803b      	strh	r3, [r7, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da0e      	bge.n	8001bc8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	705a      	strb	r2, [r3, #1]
 8001bc6:	e00e      	b.n	8001be6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	78ba      	ldrb	r2, [r7, #2]
 8001bfc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bfe:	78bb      	ldrb	r3, [r7, #2]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_EP_Open+0x94>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e00e      	b.n	8001c36 <HAL_PCD_EP_Open+0xb2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 feee 	bl	8004a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0e      	bge.n	8001c70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	705a      	strb	r2, [r3, #1]
 8001c6e:	e00e      	b.n	8001c8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 0207 	and.w	r2, r3, #7
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_PCD_EP_Close+0x6a>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e00e      	b.n	8001cc6 <HAL_PCD_EP_Close+0x88>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fa66 	bl	8005188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 0207 	and.w	r2, r3, #7
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fc1d 	bl	8005560 <USB_EPStartXfer>

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 0207 	and.w	r2, r3, #7
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2201      	movs	r2, #1
 8001da8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6979      	ldr	r1, [r7, #20]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fbcf 	bl	8005560 <USB_EPStartXfer>

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 0207 	and.w	r2, r3, #7
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d901      	bls.n	8001dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e04c      	b.n	8001e84 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da0e      	bge.n	8001e10 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	705a      	strb	r2, [r3, #1]
 8001e0e:	e00c      	b.n	8001e2a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_PCD_EP_SetStall+0x7e>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e01c      	b.n	8001e84 <HAL_PCD_EP_SetStall+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 ff32 	bl	8006cc2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d108      	bne.n	8001e7a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f005 f857 	bl	8006f28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d901      	bls.n	8001eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e040      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da0e      	bge.n	8001ed0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00e      	b.n	8001eee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_EP_ClrStall+0x82>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e00e      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa0>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 ff20 	bl	8006d62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b096      	sub	sp, #88	@ 0x58
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f3c:	e3be      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001f58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8178 	bne.w	8002252 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d151      	bne.n	8002012 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f7e:	81fb      	strh	r3, [r7, #14]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3328      	adds	r3, #40	@ 0x28
 8001f96:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	3302      	adds	r3, #2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	441a      	add	r2, r3
 8001fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f006 fd90 	bl	8008afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 836a 	beq.w	80026bc <PCD_EP_ISR_Handler+0x788>
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 8365 	bne.w	80026bc <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002010:	e354      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002018:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002024:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d034      	beq.n	800209a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002068:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800206a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800206e:	b29b      	uxth	r3, r3
 8002070:	f004 ffaa 	bl	8006fc8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29a      	uxth	r2, r3
 800207c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002080:	4013      	ands	r3, r2
 8002082:	823b      	strh	r3, [r7, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	8a3a      	ldrh	r2, [r7, #16]
 800208a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800208e:	b292      	uxth	r2, r2
 8002090:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f006 fd04 	bl	8008aa0 <HAL_PCD_SetupStageCallback>
 8002098:	e310      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800209a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f280 830c 	bge.w	80026bc <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020b0:	4013      	ands	r3, r2
 80020b2:	83fb      	strh	r3, [r7, #30]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	8bfa      	ldrh	r2, [r7, #30]
 80020ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020be:	b292      	uxth	r2, r2
 80020c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3306      	adds	r3, #6
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d019      	beq.n	800212a <PCD_EP_ISR_Handler+0x1f6>
 80020f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002104:	6959      	ldr	r1, [r3, #20]
 8002106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002108:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800210a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800210e:	b29b      	uxth	r3, r3
 8002110:	f004 ff5a 	bl	8006fc8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	441a      	add	r2, r3
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002122:	2100      	movs	r1, #0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f006 fccd 	bl	8008ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213c:	2b00      	cmp	r3, #0
 800213e:	f040 82bd 	bne.w	80026bc <PCD_EP_ISR_Handler+0x788>
 8002142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002146:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800214a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800214e:	f000 82b5 	beq.w	80026bc <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	4413      	add	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217c:	b29a      	uxth	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b3e      	cmp	r3, #62	@ 0x3e
 8002188:	d91d      	bls.n	80021c6 <PCD_EP_ISR_Handler+0x292>
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	647b      	str	r3, [r7, #68]	@ 0x44
 8002192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <PCD_EP_ISR_Handler+0x270>
 800219e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021a0:	3b01      	subs	r3, #1
 80021a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021be:	b29a      	uxth	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	e026      	b.n	8002214 <PCD_EP_ISR_Handler+0x2e0>
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <PCD_EP_ISR_Handler+0x2b0>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021dc:	b29a      	uxth	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e017      	b.n	8002214 <PCD_EP_ISR_Handler+0x2e0>
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <PCD_EP_ISR_Handler+0x2ca>
 80021f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fa:	3301      	adds	r3, #1
 80021fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29a      	uxth	r2, r3
 8002204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002206:	b29b      	uxth	r3, r3
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	b29b      	uxth	r3, r3
 800220c:	4313      	orrs	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	827b      	strh	r3, [r7, #18]
 8002226:	8a7b      	ldrh	r3, [r7, #18]
 8002228:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800222c:	827b      	strh	r3, [r7, #18]
 800222e:	8a7b      	ldrh	r3, [r7, #18]
 8002230:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002234:	827b      	strh	r3, [r7, #18]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	8a7b      	ldrh	r3, [r7, #18]
 800223c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]
 8002250:	e234      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002266:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800226a:	2b00      	cmp	r3, #0
 800226c:	f280 80fc 	bge.w	8002468 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29a      	uxth	r2, r3
 8002282:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002286:	4013      	ands	r3, r2
 8002288:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800229e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022a2:	b292      	uxth	r2, r2
 80022a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022a6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022be:	7b1b      	ldrb	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d125      	bne.n	8002310 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	3306      	adds	r3, #6
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80022f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8092 	beq.w	800241e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002300:	6959      	ldr	r1, [r3, #20]
 8002302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002304:	88da      	ldrh	r2, [r3, #6]
 8002306:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800230a:	f004 fe5d 	bl	8006fc8 <USB_ReadPMA>
 800230e:	e086      	b.n	800241e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002312:	78db      	ldrb	r3, [r3, #3]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d10a      	bne.n	800232e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002318:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800231c:	461a      	mov	r2, r3
 800231e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9d9 	bl	80026d8 <HAL_PCD_EP_DB_Receive>
 8002326:	4603      	mov	r3, r0
 8002328:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800232c:	e077      	b.n	800241e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002348:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800235e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800236e:	b29b      	uxth	r3, r3
 8002370:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d024      	beq.n	80023d6 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	3302      	adds	r3, #2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80023b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02e      	beq.n	800241e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c6:	6959      	ldr	r1, [r3, #20]
 80023c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ca:	891a      	ldrh	r2, [r3, #8]
 80023cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023d0:	f004 fdfa 	bl	8006fc8 <USB_ReadPMA>
 80023d4:	e023      	b.n	800241e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	3306      	adds	r3, #6
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002402:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	6959      	ldr	r1, [r3, #20]
 8002412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002414:	895a      	ldrh	r2, [r3, #10]
 8002416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800241a:	f004 fdd5 	bl	8006fc8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800241e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002426:	441a      	add	r2, r3
 8002428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800242c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002434:	441a      	add	r2, r3
 8002436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002438:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800243a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <PCD_EP_ISR_Handler+0x51a>
 8002442:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d206      	bcs.n	800245c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f006 fb35 	bl	8008ac4 <HAL_PCD_DataOutStageCallback>
 800245a:	e005      	b.n	8002468 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002462:	4618      	mov	r0, r3
 8002464:	f003 f87c 	bl	8005560 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002468:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800246c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8123 	beq.w	80026bc <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002476:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80024c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 80a2 	bne.w	8002614 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80024d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80024d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8093 	beq.w	8002606 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d046      	beq.n	800257a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d126      	bne.n	8002542 <PCD_EP_ISR_Handler+0x60e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	4413      	add	r3, r2
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
 800250c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	011a      	lsls	r2, r3, #4
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	4413      	add	r3, r2
 8002516:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002526:	b29a      	uxth	r2, r3
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253a:	b29a      	uxth	r2, r3
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	e061      	b.n	8002606 <PCD_EP_ISR_Handler+0x6d2>
 8002542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d15d      	bne.n	8002606 <PCD_EP_ISR_Handler+0x6d2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255e:	4413      	add	r3, r2
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	011a      	lsls	r2, r3, #4
 8002568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256a:	4413      	add	r3, r2
 800256c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	2200      	movs	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e045      	b.n	8002606 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d126      	bne.n	80025d6 <PCD_EP_ISR_Handler+0x6a2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259c:	4413      	add	r3, r2
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	011a      	lsls	r2, r3, #4
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	4413      	add	r3, r2
 80025aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	e017      	b.n	8002606 <PCD_EP_ISR_Handler+0x6d2>
 80025d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d113      	bne.n	8002606 <PCD_EP_ISR_Handler+0x6d2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ec:	4413      	add	r3, r2
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	011a      	lsls	r2, r3, #4
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	4413      	add	r3, r2
 80025fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 fa74 	bl	8008afa <HAL_PCD_DataInStageCallback>
 8002612:	e053      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002614:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d146      	bne.n	80026ae <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3302      	adds	r3, #2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800264c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002654:	429a      	cmp	r2, r3
 8002656:	d907      	bls.n	8002668 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002660:	1ad2      	subs	r2, r2, r3
 8002662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002664:	619a      	str	r2, [r3, #24]
 8002666:	e002      	b.n	800266e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800266e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f006 fa3c 	bl	8008afa <HAL_PCD_DataInStageCallback>
 8002682:	e01b      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800268c:	441a      	add	r2, r3
 800268e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002690:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800269a:	441a      	add	r2, r3
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 ff5a 	bl	8005560 <USB_EPStartXfer>
 80026ac:	e006      	b.n	80026bc <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026b2:	461a      	mov	r2, r3
 80026b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f91b 	bl	80028f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f6ff ac38 	blt.w	8001f3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3758      	adds	r7, #88	@ 0x58
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07e      	beq.n	80027ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3302      	adds	r3, #2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	429a      	cmp	r2, r3
 8002722:	d306      	bcc.n	8002732 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	e002      	b.n	8002738 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d123      	bne.n	8002788 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275a:	833b      	strh	r3, [r7, #24]
 800275c:	8b3b      	ldrh	r3, [r7, #24]
 800275e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002762:	833b      	strh	r3, [r7, #24]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	8b3b      	ldrh	r3, [r7, #24]
 8002774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01f      	beq.n	80027d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ac:	82fb      	strh	r3, [r7, #22]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027d2:	8b7b      	ldrh	r3, [r7, #26]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8087 	beq.w	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6959      	ldr	r1, [r3, #20]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	891a      	ldrh	r2, [r3, #8]
 80027e6:	8b7b      	ldrh	r3, [r7, #26]
 80027e8:	f004 fbee 	bl	8006fc8 <USB_ReadPMA>
 80027ec:	e07c      	b.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	3306      	adds	r3, #6
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	429a      	cmp	r2, r3
 8002820:	d306      	bcc.n	8002830 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	8b7b      	ldrh	r3, [r7, #26]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e002      	b.n	8002836 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002860:	83fb      	strh	r3, [r7, #30]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800287e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11f      	bne.n	80028d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	83bb      	strh	r3, [r7, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d0:	8b7b      	ldrh	r3, [r7, #26]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6959      	ldr	r1, [r3, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	895a      	ldrh	r2, [r3, #10]
 80028e2:	8b7b      	ldrh	r3, [r7, #26]
 80028e4:	f004 fb70 	bl	8006fc8 <USB_ReadPMA>
    }
  }

  return count;
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b0a4      	sub	sp, #144	@ 0x90
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81dd 	beq.w	8002cc6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	3302      	adds	r3, #2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002934:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002940:	429a      	cmp	r2, r3
 8002942:	d907      	bls.n	8002954 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e002      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80b9 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d126      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	4413      	add	r3, r2
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298c:	4413      	add	r3, r2
 800298e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e01a      	b.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d116      	bne.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d6:	4413      	add	r3, r2
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	2200      	movs	r2, #0
 80029ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d126      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x15a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	011a      	lsls	r2, r3, #4
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e017      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d113      	bne.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	4413      	add	r3, r2
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	011a      	lsls	r2, r3, #4
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f006 f839 	bl	8008afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 82fc 	beq.w	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aae:	82fb      	strh	r3, [r7, #22]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	8afb      	ldrh	r3, [r7, #22]
 8002ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8013      	strh	r3, [r2, #0]
 8002ad4:	e2da      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 82ae 	bne.w	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b38:	441a      	add	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b46:	441a      	add	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d30b      	bcc.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	621a      	str	r2, [r3, #32]
 8002b6e:	e017      	b.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d108      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002b78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b88:	e00a      	b.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d165      	bne.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x382>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bbc:	4413      	add	r3, r2
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	011a      	lsls	r2, r3, #4
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002be6:	d91d      	bls.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x332>
 8002be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x310>
 8002bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	e044      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x350>
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e035      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c58:	3301      	adds	r3, #1
 8002c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	e01c      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d118      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c90:	4413      	add	r3, r2
 8002c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	011a      	lsls	r2, r3, #4
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6959      	ldr	r1, [r3, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	891a      	ldrh	r2, [r3, #8]
 8002cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f004 f93d 	bl	8006f3e <USB_WritePMA>
 8002cc4:	e1e2      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3306      	adds	r3, #6
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d307      	bcc.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d06:	1ad2      	subs	r2, r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	619a      	str	r2, [r3, #24]
 8002d0c:	e002      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 80c0 	bne.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d126      	bne.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x482>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	011a      	lsls	r2, r3, #4
 8002d44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	e01a      	b.n	8002daa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d116      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d90:	4413      	add	r3, r2
 8002d92:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	011a      	lsls	r2, r3, #4
 8002d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002da6:	2200      	movs	r2, #0
 8002da8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	677b      	str	r3, [r7, #116]	@ 0x74
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12b      	bne.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dcc:	4413      	add	r3, r2
 8002dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	011a      	lsls	r2, r3, #4
 8002dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd8:	4413      	add	r3, r2
 8002dda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	e017      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d113      	bne.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e26:	4413      	add	r3, r2
 8002e28:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	011a      	lsls	r2, r3, #4
 8002e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f005 fe57 	bl	8008afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 811a 	bne.w	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	441a      	add	r2, r3
 8002e84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	8013      	strh	r3, [r2, #0]
 8002e9c:	e0f6      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d121      	bne.n	8002eec <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002edc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	f040 80ca 	bne.w	800308c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f00:	441a      	add	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f0e:	441a      	add	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d30b      	bcc.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	621a      	str	r2, [r3, #32]
 8002f36:	e017      	b.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002f40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f50:	e00a      	b.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d165      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x750>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	011a      	lsls	r2, r3, #4
 8002f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fb4:	d91d      	bls.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x700>
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	029b      	lsls	r3, r3, #10
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e041      	b.n	8003076 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003008:	b29a      	uxth	r2, r3
 800300a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	e032      	b.n	8003076 <HAL_PCD_EP_DB_Transmit+0x784>
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_PCD_EP_DB_Transmit+0x738>
 8003024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003026:	3301      	adds	r3, #1
 8003028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800302a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29a      	uxth	r2, r3
 8003030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003032:	b29b      	uxth	r3, r3
 8003034:	029b      	lsls	r3, r3, #10
 8003036:	b29b      	uxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b29a      	uxth	r2, r3
 800303c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e019      	b.n	8003076 <HAL_PCD_EP_DB_Transmit+0x784>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d115      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x784>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	4413      	add	r3, r2
 800305a:	657b      	str	r3, [r7, #84]	@ 0x54
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	4413      	add	r3, r2
 8003066:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800306a:	653b      	str	r3, [r7, #80]	@ 0x50
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003070:	b29a      	uxth	r2, r3
 8003072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003074:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6959      	ldr	r1, [r3, #20]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	895a      	ldrh	r2, [r3, #10]
 8003082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003086:	b29b      	uxth	r3, r3
 8003088:	f003 ff59 	bl	8006f3e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a6:	82bb      	strh	r3, [r7, #20]
 80030a8:	8abb      	ldrh	r3, [r7, #20]
 80030aa:	f083 0310 	eor.w	r3, r3, #16
 80030ae:	82bb      	strh	r3, [r7, #20]
 80030b0:	8abb      	ldrh	r3, [r7, #20]
 80030b2:	f083 0320 	eor.w	r3, r3, #32
 80030b6:	82bb      	strh	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	8abb      	ldrh	r3, [r7, #20]
 80030c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d8:	b29b      	uxth	r3, r3
 80030da:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3790      	adds	r7, #144	@ 0x90
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	817b      	strh	r3, [r7, #10]
 80030f4:	4613      	mov	r3, r2
 80030f6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e009      	b.n	8003130 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800311c:	897a      	ldrh	r2, [r7, #10]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	b29a      	uxth	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	80da      	strh	r2, [r3, #6]
 8003144:	e00b      	b.n	800315e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2201      	movs	r2, #1
 800314a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b29a      	uxth	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	b29a      	uxth	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e272      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8087 	beq.w	800329a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800318c:	4b92      	ldr	r3, [pc, #584]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b04      	cmp	r3, #4
 8003196:	d00c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003198:	4b8f      	ldr	r3, [pc, #572]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d112      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
 80031a4:	4b8c      	ldr	r3, [pc, #560]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d10b      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b2:	4b89      	ldr	r3, [pc, #548]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d06c      	beq.n	8003298 <HAL_RCC_OscConfig+0x12c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d168      	bne.n	8003298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e24c      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x76>
 80031d4:	4b80      	ldr	r3, [pc, #512]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a7f      	ldr	r2, [pc, #508]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b7b      	ldr	r3, [pc, #492]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7a      	ldr	r2, [pc, #488]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b78      	ldr	r3, [pc, #480]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a77      	ldr	r2, [pc, #476]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0xbc>
 800320e:	4b72      	ldr	r3, [pc, #456]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a71      	ldr	r2, [pc, #452]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6f      	ldr	r3, [pc, #444]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6e      	ldr	r2, [pc, #440]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003228:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6a      	ldr	r2, [pc, #424]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b68      	ldr	r3, [pc, #416]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a67      	ldr	r2, [pc, #412]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800323e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd ff4a 	bl	80010e0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fd ff46 	bl	80010e0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e200      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xe4>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fd ff36 	bl	80010e0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fd ff32 	bl	80010e0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1ec      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x10c>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a6:	4b4c      	ldr	r3, [pc, #304]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032b2:	4b49      	ldr	r3, [pc, #292]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
 80032be:	4b46      	ldr	r3, [pc, #280]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b43      	ldr	r3, [pc, #268]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c0      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4939      	ldr	r1, [pc, #228]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fd feeb 	bl	80010e0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7fd fee7 	bl	80010e0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4927      	ldr	r1, [pc, #156]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b26      	ldr	r3, [pc, #152]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd feca 	bl	80010e0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fd fec6 	bl	80010e0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e180      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03a      	beq.n	80033f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d019      	beq.n	80033b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <HAL_RCC_OscConfig+0x274>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fd feaa 	bl	80010e0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7fd fea6 	bl	80010e0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e160      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f000 fa9c 	bl	80038ec <RCC_Delay>
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fd fe90 	bl	80010e0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fd fe8c 	bl	80010e0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e146      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	42420000 	.word	0x42420000
 80033e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b92      	ldr	r3, [pc, #584]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e9      	bne.n	80033c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a6 	beq.w	800354a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b8b      	ldr	r3, [pc, #556]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4a87      	ldr	r2, [pc, #540]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	61d3      	str	r3, [r2, #28]
 800341a:	4b85      	ldr	r3, [pc, #532]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b7f      	ldr	r3, [pc, #508]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fd fe4d 	bl	80010e0 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fd fe49 	bl	80010e0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	@ 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e103      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b75      	ldr	r3, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x312>
 8003470:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	e02d      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x334>
 8003486:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a69      	ldr	r2, [pc, #420]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b67      	ldr	r3, [pc, #412]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a66      	ldr	r2, [pc, #408]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	e01c      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x356>
 80034a8:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a60      	ldr	r2, [pc, #384]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e00b      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	4b58      	ldr	r3, [pc, #352]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a57      	ldr	r2, [pc, #348]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fd fdfd 	bl	80010e0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd fdf9 	bl	80010e0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0b1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ee      	beq.n	80034ea <HAL_RCC_OscConfig+0x37e>
 800350c:	e014      	b.n	8003538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fd fde7 	bl	80010e0 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fd fde3 	bl	80010e0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e09b      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ee      	bne.n	8003516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4a3b      	ldr	r2, [pc, #236]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d061      	beq.n	8003624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d146      	bne.n	80035f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fd fdb7 	bl	80010e0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd fdb3 	bl	80010e0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e06d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d108      	bne.n	80035b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4921      	ldr	r1, [pc, #132]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a19      	ldr	r1, [r3, #32]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	430b      	orrs	r3, r1
 80035c2:	491b      	ldr	r1, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fd fd87 	bl	80010e0 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fd fd83 	bl	80010e0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x46a>
 80035f4:	e035      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fd70 	bl	80010e0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fd fd6c 	bl	80010e0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e026      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x498>
 8003622:	e01e      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e019      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_OscConfig+0x500>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0d0      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4965      	ldr	r1, [pc, #404]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a58      	ldr	r2, [pc, #352]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d040      	beq.n	8003790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e073      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	4b3d      	ldr	r3, [pc, #244]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06b      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4936      	ldr	r1, [pc, #216]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fd fcbe 	bl	80010e0 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fd fcba 	bl	80010e0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e053      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003790:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d210      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4922      	ldr	r1, [pc, #136]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	@ (8003838 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1cc>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x1d0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fc1c 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40022000 	.word	0x40022000
 8003834:	40021000 	.word	0x40021000
 8003838:	08009060 	.word	0x08009060
 800383c:	20000000 	.word	0x20000000
 8003840:	20000004 	.word	0x20000004

08003844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385e:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x30>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x36>
 8003872:	e027      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003876:	613b      	str	r3, [r7, #16]
      break;
 8003878:	e027      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0c5b      	lsrs	r3, r3, #17
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038a6:	fb03 f202 	mul.w	r2, r3, r2
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e004      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	613b      	str	r3, [r7, #16]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	613b      	str	r3, [r7, #16]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	693b      	ldr	r3, [r7, #16]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	007a1200 	.word	0x007a1200
 80038e0:	08009070 	.word	0x08009070
 80038e4:	08009080 	.word	0x08009080
 80038e8:	003d0900 	.word	0x003d0900

080038ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <RCC_Delay+0x34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <RCC_Delay+0x38>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003908:	bf00      	nop
  }
  while (Delay --);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <RCC_Delay+0x1c>
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000000 	.word	0x20000000
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d07d      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003948:	4b4f      	ldr	r3, [pc, #316]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b4c      	ldr	r3, [pc, #304]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4a4b      	ldr	r2, [pc, #300]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395e:	61d3      	str	r3, [r2, #28]
 8003960:	4b49      	ldr	r3, [pc, #292]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b46      	ldr	r3, [pc, #280]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d118      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397c:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a42      	ldr	r2, [pc, #264]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003988:	f7fd fbaa 	bl	80010e0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fd fba6 	bl	80010e0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	@ 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e06d      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ae:	4b36      	ldr	r3, [pc, #216]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d02e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d027      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039e2:	4a29      	ldr	r2, [pc, #164]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fd fb75 	bl	80010e0 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fd fb71 	bl	80010e0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e036      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ee      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4917      	ldr	r1, [pc, #92]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a13      	ldr	r2, [pc, #76]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	490b      	ldr	r1, [pc, #44]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a6a:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	42420440 	.word	0x42420440

08003a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e076      	b.n	8003b94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab6:	d009      	beq.n	8003acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
 8003abe:	e005      	b.n	8003acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f8fa 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b50:	ea42 0103 	orr.w	r1, r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	0c1a      	lsrs	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f002 0204 	and.w	r2, r2, #4
 8003b72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd f8d6 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fb54 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e041      	b.n	8003cd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f839 	bl	8003cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f000 fb05 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_TIM_PWM_Start+0x24>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e022      	b.n	8003d56 <HAL_TIM_PWM_Start+0x6a>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d109      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x3e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e015      	b.n	8003d56 <HAL_TIM_PWM_Start+0x6a>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d109      	bne.n	8003d44 <HAL_TIM_PWM_Start+0x58>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e008      	b.n	8003d56 <HAL_TIM_PWM_Start+0x6a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e05e      	b.n	8003e1c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x82>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6c:	e013      	b.n	8003d96 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7c:	e00b      	b.n	8003d96 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xa2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8c:	e003      	b.n	8003d96 <HAL_TIM_PWM_Start+0xaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fcf2 	bl	8004788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <HAL_TIM_PWM_Start+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <HAL_TIM_PWM_Start+0x138>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIM_PWM_Start+0xfa>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIM_PWM_Start+0xfa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <HAL_TIM_PWM_Start+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_PWM_Start+0xfa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <HAL_TIM_PWM_Start+0x140>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d111      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d010      	beq.n	8003e1a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	e007      	b.n	8003e1a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800

08003e30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e093      	b.n	8003f6c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc ffa9 	bl	8000db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e74:	f023 0307 	bic.w	r3, r3, #7
 8003e78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f000 f9ff 	bl	8004288 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ed0:	f023 030c 	bic.w	r3, r3, #12
 8003ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	4313      	orrs	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	011a      	lsls	r2, r3, #4
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	031b      	lsls	r3, r3, #12
 8003f00:	4313      	orrs	r3, r2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0ae      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	f200 809f 	bhi.w	80040e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	080040e1 	.word	0x080040e1
 8003fb0:	080040e1 	.word	0x080040e1
 8003fb4:	080040e1 	.word	0x080040e1
 8003fb8:	0800401d 	.word	0x0800401d
 8003fbc:	080040e1 	.word	0x080040e1
 8003fc0:	080040e1 	.word	0x080040e1
 8003fc4:	080040e1 	.word	0x080040e1
 8003fc8:	0800405f 	.word	0x0800405f
 8003fcc:	080040e1 	.word	0x080040e1
 8003fd0:	080040e1 	.word	0x080040e1
 8003fd4:	080040e1 	.word	0x080040e1
 8003fd8:	0800409f 	.word	0x0800409f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f9b2 	bl	800434c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0208 	orr.w	r2, r2, #8
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	619a      	str	r2, [r3, #24]
      break;
 800401a:	e064      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f9f8 	bl	8004418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6999      	ldr	r1, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]
      break;
 800405c:	e043      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fa41 	bl	80044ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0208 	orr.w	r2, r2, #8
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0204 	bic.w	r2, r2, #4
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	61da      	str	r2, [r3, #28]
      break;
 800409c:	e023      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fa8b 	bl	80045c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69d9      	ldr	r1, [r3, #28]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	61da      	str	r2, [r3, #28]
      break;
 80040de:	e002      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIM_ConfigClockSource+0x1c>
 8004110:	2302      	movs	r3, #2
 8004112:	e0b4      	b.n	800427e <HAL_TIM_ConfigClockSource+0x186>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800413a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800414c:	d03e      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0xd4>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004152:	f200 8087 	bhi.w	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415a:	f000 8086 	beq.w	800426a <HAL_TIM_ConfigClockSource+0x172>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004162:	d87f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 8004164:	2b70      	cmp	r3, #112	@ 0x70
 8004166:	d01a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0xa6>
 8004168:	2b70      	cmp	r3, #112	@ 0x70
 800416a:	d87b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b60      	cmp	r3, #96	@ 0x60
 800416e:	d050      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x11a>
 8004170:	2b60      	cmp	r3, #96	@ 0x60
 8004172:	d877      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b50      	cmp	r3, #80	@ 0x50
 8004176:	d03c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004178:	2b50      	cmp	r3, #80	@ 0x50
 800417a:	d873      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d058      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x13a>
 8004180:	2b40      	cmp	r3, #64	@ 0x40
 8004182:	d86f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b30      	cmp	r3, #48	@ 0x30
 8004186:	d064      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x15a>
 8004188:	2b30      	cmp	r3, #48	@ 0x30
 800418a:	d86b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d060      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x15a>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d867      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d05a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x15a>
 800419c:	e062      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	f000 facc 	bl	800474a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	609a      	str	r2, [r3, #8]
      break;
 80041ca:	e04f      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041dc:	f000 fab5 	bl	800474a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ee:	609a      	str	r2, [r3, #8]
      break;
 80041f0:	e03c      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 fa2c 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2150      	movs	r1, #80	@ 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fa83 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004210:	e02c      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fa4a 	bl	80046b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2160      	movs	r1, #96	@ 0x60
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa73 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004230:	e01c      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fa0c 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	@ 0x40
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fa63 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004250:	e00c      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f000 fa5a 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004262:	e003      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      break;
 8004268:	e000      	b.n	800426c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800426a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a29      	ldr	r2, [pc, #164]	@ (8004340 <TIM_Base_SetConfig+0xb8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x30>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x30>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <TIM_Base_SetConfig+0xbc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x30>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a25      	ldr	r2, [pc, #148]	@ (8004348 <TIM_Base_SetConfig+0xc0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004340 <TIM_Base_SetConfig+0xb8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0x62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0x62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <TIM_Base_SetConfig+0xbc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0x62>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <TIM_Base_SetConfig+0xc0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a07      	ldr	r2, [pc, #28]	@ (8004340 <TIM_Base_SetConfig+0xb8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800

0800434c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0201 	bic.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 0302 	bic.w	r3, r3, #2
 8004394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004414 <TIM_OC1_SetConfig+0xc8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10c      	bne.n	80043c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0308 	bic.w	r3, r3, #8
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a13      	ldr	r2, [pc, #76]	@ (8004414 <TIM_OC1_SetConfig+0xc8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d111      	bne.n	80043ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0210 	bic.w	r2, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0320 	bic.w	r3, r3, #32
 8004462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1d      	ldr	r2, [pc, #116]	@ (80044e8 <TIM_OC2_SetConfig+0xd0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10d      	bne.n	8004494 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a14      	ldr	r2, [pc, #80]	@ (80044e8 <TIM_OC2_SetConfig+0xd0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d113      	bne.n	80044c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	40012c00 	.word	0x40012c00

080044ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1d      	ldr	r2, [pc, #116]	@ (80045bc <TIM_OC3_SetConfig+0xd0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10d      	bne.n	8004566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <TIM_OC3_SetConfig+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d113      	bne.n	8004596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800457c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00

080045c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800460a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0f      	ldr	r2, [pc, #60]	@ (8004658 <TIM_OC4_SetConfig+0x98>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00

0800465c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 030a 	bic.w	r3, r3, #10
 8004698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	031b      	lsls	r3, r3, #12
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	f043 0307 	orr.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	021a      	lsls	r2, r3, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	431a      	orrs	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2201      	movs	r2, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1a      	ldr	r2, [r3, #32]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	401a      	ands	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e046      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a16      	ldr	r2, [pc, #88]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004834:	d009      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a10      	ldr	r2, [pc, #64]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800

0800488c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e03d      	b.n	8004924 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800492e:	b084      	sub	sp, #16
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	f107 0014 	add.w	r0, r7, #20
 800493c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	b004      	add	sp, #16
 800494c:	4770      	bx	lr

0800494e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800495e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004962:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004982:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	b29b      	uxth	r3, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	b29b      	uxth	r3, r3
 8004998:	4013      	ands	r3, r2
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049c6:	b084      	sub	sp, #16
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	f107 0014 	add.w	r0, r7, #20
 80049d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	b004      	add	sp, #16
 8004a04:	4770      	bx	lr
	...

08004a08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b09d      	sub	sp, #116	@ 0x74
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	78db      	ldrb	r3, [r3, #3]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d81f      	bhi.n	8004a7a <USB_ActivateEndpoint+0x72>
 8004a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <USB_ActivateEndpoint+0x38>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a83 	.word	0x08004a83
 8004a4c:	08004a5f 	.word	0x08004a5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a5c:	e012      	b.n	8004a84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a62:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004a66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a6a:	e00b      	b.n	8004a84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a78:	e004      	b.n	8004a84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004a80:	e000      	b.n	8004a84 <USB_ActivateEndpoint+0x7c>
      break;
 8004a82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	7b1b      	ldrb	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8178 	bne.w	8004de4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8084 	beq.w	8004c06 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	88db      	ldrh	r3, [r3, #6]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	827b      	strh	r3, [r7, #18]
 8004b40:	8a7b      	ldrh	r3, [r7, #18]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <USB_ActivateEndpoint+0x17a>
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b60:	823b      	strh	r3, [r7, #16]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	8a3b      	ldrh	r3, [r7, #16]
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	78db      	ldrb	r3, [r3, #3]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d020      	beq.n	8004bcc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba0:	81bb      	strh	r3, [r7, #12]
 8004ba2:	89bb      	ldrh	r3, [r7, #12]
 8004ba4:	f083 0320 	eor.w	r3, r3, #32
 8004ba8:	81bb      	strh	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	89bb      	ldrh	r3, [r7, #12]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e2d5      	b.n	8005178 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be2:	81fb      	strh	r3, [r7, #14]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
 8004c04:	e2b8      	b.n	8005178 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	4413      	add	r3, r2
 8004c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	011a      	lsls	r2, r3, #4
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	88db      	ldrh	r3, [r3, #6]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	4413      	add	r3, r2
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	011a      	lsls	r2, r3, #4
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	4413      	add	r3, r2
 8004c58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c74:	d91d      	bls.n	8004cb2 <USB_ActivateEndpoint+0x2aa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <USB_ActivateEndpoint+0x288>
 8004c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	029b      	lsls	r3, r3, #10
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	e026      	b.n	8004d00 <USB_ActivateEndpoint+0x2f8>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <USB_ActivateEndpoint+0x2c8>
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e017      	b.n	8004d00 <USB_ActivateEndpoint+0x2f8>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <USB_ActivateEndpoint+0x2e2>
 8004ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01b      	beq.n	8004d50 <USB_ActivateEndpoint+0x348>
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2e:	843b      	strh	r3, [r7, #32]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	8c3b      	ldrh	r3, [r7, #32]
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d124      	bne.n	8004da2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6e:	83bb      	strh	r3, [r7, #28]
 8004d70:	8bbb      	ldrh	r3, [r7, #28]
 8004d72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d76:	83bb      	strh	r3, [r7, #28]
 8004d78:	8bbb      	ldrh	r3, [r7, #28]
 8004d7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d7e:	83bb      	strh	r3, [r7, #28]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	8bbb      	ldrh	r3, [r7, #28]
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]
 8004da0:	e1ea      	b.n	8005178 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db8:	83fb      	strh	r3, [r7, #30]
 8004dba:	8bfb      	ldrh	r3, [r7, #30]
 8004dbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004dc0:	83fb      	strh	r3, [r7, #30]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
 8004de2:	e1c9      	b.n	8005178 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	78db      	ldrb	r3, [r3, #3]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d11e      	bne.n	8004e2a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]
 8004e28:	e01d      	b.n	8004e66 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e40:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e76:	4413      	add	r3, r2
 8004e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011a      	lsls	r2, r3, #4
 8004e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	891b      	ldrh	r3, [r3, #8]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eaa:	4413      	add	r3, r2
 8004eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004ebc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	895b      	ldrh	r3, [r3, #10]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ecc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 8093 	bne.w	8004ffe <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004ee8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <USB_ActivateEndpoint+0x524>
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004f3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <USB_ActivateEndpoint+0x574>
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f92:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f9a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f9c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fa2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fda:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]
 8004ffc:	e0bc      	b.n	8005178 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800500e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01d      	beq.n	8005056 <USB_ActivateEndpoint+0x64e>
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005030:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800504e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01d      	beq.n	80050ae <USB_ActivateEndpoint+0x6a6>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005088:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d024      	beq.n	8005100 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050d4:	f083 0320 	eor.w	r3, r3, #32
 80050d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005116:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005178:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800517c:	4618      	mov	r0, r3
 800517e:	3774      	adds	r7, #116	@ 0x74
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005188:	b480      	push	{r7}
 800518a:	b08d      	sub	sp, #52	@ 0x34
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	7b1b      	ldrb	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 808e 	bne.w	80052b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d044      	beq.n	800522e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	81bb      	strh	r3, [r7, #12]
 80051b2:	89bb      	ldrh	r3, [r7, #12]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <USB_DeactivateEndpoint+0x6c>
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	817b      	strh	r3, [r7, #10]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520a:	813b      	strh	r3, [r7, #8]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	893b      	ldrh	r3, [r7, #8]
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
 800522c:	e192      	b.n	8005554 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	827b      	strh	r3, [r7, #18]
 800523c:	8a7b      	ldrh	r3, [r7, #18]
 800523e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01b      	beq.n	800527e <USB_DeactivateEndpoint+0xf6>
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525c:	823b      	strh	r3, [r7, #16]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	8a3b      	ldrh	r3, [r7, #16]
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005272:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005294:	81fb      	strh	r3, [r7, #14]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]
 80052b6:	e14d      	b.n	8005554 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 80a5 	bne.w	800540c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	843b      	strh	r3, [r7, #32]
 80052d0:	8c3b      	ldrh	r3, [r7, #32]
 80052d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01b      	beq.n	8005312 <USB_DeactivateEndpoint+0x18a>
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f0:	83fb      	strh	r3, [r7, #30]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	8bfb      	ldrh	r3, [r7, #30]
 80052fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800530a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	83bb      	strh	r3, [r7, #28]
 8005320:	8bbb      	ldrh	r3, [r7, #28]
 8005322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01b      	beq.n	8005362 <USB_DeactivateEndpoint+0x1da>
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005340:	837b      	strh	r3, [r7, #26]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	441a      	add	r2, r3
 800534c:	8b7b      	ldrh	r3, [r7, #26]
 800534e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800535a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005378:	833b      	strh	r3, [r7, #24]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8b3b      	ldrh	r3, [r7, #24]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005392:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b0:	82fb      	strh	r3, [r7, #22]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	8afb      	ldrh	r3, [r7, #22]
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e8:	82bb      	strh	r3, [r7, #20]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	8abb      	ldrh	r3, [r7, #20]
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
 800540a:	e0a3      	b.n	8005554 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800541a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800541c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <USB_DeactivateEndpoint+0x2d4>
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800544c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005458:	b29b      	uxth	r3, r3
 800545a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800546a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <USB_DeactivateEndpoint+0x324>
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3734      	adds	r7, #52	@ 0x34
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b0c2      	sub	sp, #264	@ 0x108
 8005564:	af00      	add	r7, sp, #0
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556e:	6018      	str	r0, [r3, #0]
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005578:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	f040 86b7 	bne.w	80062fa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800558c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d908      	bls.n	80055ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055b8:	e007      	b.n	80055ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80055ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	7b1b      	ldrb	r3, [r3, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d13a      	bne.n	8005650 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	88da      	ldrh	r2, [r3, #6]
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005600:	6800      	ldr	r0, [r0, #0]
 8005602:	f001 fc9c 	bl	8006f3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	011a      	lsls	r2, r3, #4
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	f000 be1f 	b.w	800628e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	78db      	ldrb	r3, [r3, #3]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f040 8462 	bne.w	8005f26 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	f240 83df 	bls.w	8005e3e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80056aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 81c7 	beq.w	8005ab0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	633b      	str	r3, [r7, #48]	@ 0x30
 800572e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d177      	bne.n	800582e <USB_EPStartXfer+0x2ce>
 800573e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800574a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005758:	b29b      	uxth	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	4413      	add	r3, r2
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011a      	lsls	r2, r3, #4
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	4413      	add	r3, r2
 8005774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005784:	b29a      	uxth	r2, r3
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005790:	d921      	bls.n	80057d6 <USB_EPStartXfer+0x276>
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <USB_EPStartXfer+0x252>
 80057a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057ac:	3b01      	subs	r3, #1
 80057ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e050      	b.n	8005878 <USB_EPStartXfer+0x318>
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <USB_EPStartXfer+0x294>
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e041      	b.n	8005878 <USB_EPStartXfer+0x318>
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <USB_EPStartXfer+0x2b4>
 800580a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800580e:	3301      	adds	r3, #1
 8005810:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29a      	uxth	r2, r3
 800581a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29b      	uxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b29a      	uxth	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e024      	b.n	8005878 <USB_EPStartXfer+0x318>
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d11c      	bne.n	8005878 <USB_EPStartXfer+0x318>
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	4413      	add	r3, r2
 8005854:	633b      	str	r3, [r7, #48]	@ 0x30
 8005856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	011a      	lsls	r2, r3, #4
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	4413      	add	r3, r2
 8005868:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	b29a      	uxth	r2, r3
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	895b      	ldrh	r3, [r3, #10]
 8005884:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6959      	ldr	r1, [r3, #20]
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	b29b      	uxth	r3, r3
 800589a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800589e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058a6:	6800      	ldr	r0, [r0, #0]
 80058a8:	f001 fb49 	bl	8006f3e <USB_WritePMA>
            ep->xfer_buff += len;
 80058ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	441a      	add	r2, r3
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d90f      	bls.n	8005906 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	621a      	str	r2, [r3, #32]
 8005904:	e00e      	b.n	8005924 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2200      	movs	r2, #0
 8005922:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d177      	bne.n	8005a24 <USB_EPStartXfer+0x4c4>
 8005934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4413      	add	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	011a      	lsls	r2, r3, #4
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	4413      	add	r3, r2
 800596a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005984:	2b3e      	cmp	r3, #62	@ 0x3e
 8005986:	d921      	bls.n	80059cc <USB_EPStartXfer+0x46c>
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <USB_EPStartXfer+0x448>
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	3b01      	subs	r3, #1
 80059a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4313      	orrs	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e056      	b.n	8005a7a <USB_EPStartXfer+0x51a>
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <USB_EPStartXfer+0x48a>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e047      	b.n	8005a7a <USB_EPStartXfer+0x51a>
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <USB_EPStartXfer+0x4aa>
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a04:	3301      	adds	r3, #1
 8005a06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e02a      	b.n	8005a7a <USB_EPStartXfer+0x51a>
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d122      	bne.n	8005a7a <USB_EPStartXfer+0x51a>
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	4413      	add	r3, r2
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	891b      	ldrh	r3, [r3, #8]
 8005a86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6959      	ldr	r1, [r3, #20]
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005aa0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aa4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	f001 fa48 	bl	8006f3e <USB_WritePMA>
 8005aae:	e3ee      	b.n	800628e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d177      	bne.n	8005bb0 <USB_EPStartXfer+0x650>
 8005ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae0:	4413      	add	r3, r2
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b12:	d921      	bls.n	8005b58 <USB_EPStartXfer+0x5f8>
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <USB_EPStartXfer+0x5d4>
 8005b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e056      	b.n	8005c06 <USB_EPStartXfer+0x6a6>
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <USB_EPStartXfer+0x616>
 8005b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	e047      	b.n	8005c06 <USB_EPStartXfer+0x6a6>
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <USB_EPStartXfer+0x636>
 8005b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b90:	3301      	adds	r3, #1
 8005b92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e02a      	b.n	8005c06 <USB_EPStartXfer+0x6a6>
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d122      	bne.n	8005c06 <USB_EPStartXfer+0x6a6>
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be0:	4413      	add	r3, r2
 8005be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011a      	lsls	r2, r3, #4
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	891b      	ldrh	r3, [r3, #8]
 8005c12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6959      	ldr	r1, [r3, #20]
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c2c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c30:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c34:	6800      	ldr	r0, [r0, #0]
 8005c36:	f001 f982 	bl	8006f3e <USB_WritePMA>
            ep->xfer_buff += len;
 8005c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4a:	441a      	add	r2, r3
 8005c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d90f      	bls.n	8005c94 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	621a      	str	r2, [r3, #32]
 8005c92:	e00e      	b.n	8005cb2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d177      	bne.n	8005dbe <USB_EPStartXfer+0x85e>
 8005cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	4413      	add	r3, r2
 8005cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	011a      	lsls	r2, r3, #4
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d20:	d921      	bls.n	8005d66 <USB_EPStartXfer+0x806>
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <USB_EPStartXfer+0x7e2>
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	029b      	lsls	r3, r3, #10
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e050      	b.n	8005e08 <USB_EPStartXfer+0x8a8>
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <USB_EPStartXfer+0x824>
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	e041      	b.n	8005e08 <USB_EPStartXfer+0x8a8>
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <USB_EPStartXfer+0x844>
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4313      	orrs	r3, r2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e024      	b.n	8005e08 <USB_EPStartXfer+0x8a8>
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d11c      	bne.n	8005e08 <USB_EPStartXfer+0x8a8>
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de2:	4413      	add	r3, r2
 8005de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	895b      	ldrh	r3, [r3, #10]
 8005e14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6959      	ldr	r1, [r3, #20]
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e36:	6800      	ldr	r0, [r0, #0]
 8005e38:	f001 f881 	bl	8006f3e <USB_WritePMA>
 8005e3c:	e227      	b.n	800628e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e74:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eca:	4413      	add	r3, r2
 8005ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	011a      	lsls	r2, r3, #4
 8005edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ede:	4413      	add	r3, r2
 8005ee0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	891b      	ldrh	r3, [r3, #8]
 8005efc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6959      	ldr	r1, [r3, #20]
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	f001 f80d 	bl	8006f3e <USB_WritePMA>
 8005f24:	e1b3      	b.n	800628e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a1a      	ldr	r2, [r3, #32]
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80c6 	beq.w	80060f8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d177      	bne.n	8006078 <USB_EPStartXfer+0xb18>
 8005f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fa8:	4413      	add	r3, r2
 8005faa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fda:	d921      	bls.n	8006020 <USB_EPStartXfer+0xac0>
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <USB_EPStartXfer+0xa9c>
 8005ff2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29b      	uxth	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006018:	b29a      	uxth	r2, r3
 800601a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e050      	b.n	80060c2 <USB_EPStartXfer+0xb62>
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <USB_EPStartXfer+0xade>
 8006028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006036:	b29a      	uxth	r2, r3
 8006038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e041      	b.n	80060c2 <USB_EPStartXfer+0xb62>
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <USB_EPStartXfer+0xafe>
 8006054:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006058:	3301      	adds	r3, #1
 800605a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800605e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29b      	uxth	r3, r3
 800606e:	4313      	orrs	r3, r2
 8006070:	b29a      	uxth	r2, r3
 8006072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e024      	b.n	80060c2 <USB_EPStartXfer+0xb62>
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11c      	bne.n	80060c2 <USB_EPStartXfer+0xb62>
 8006088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800609c:	4413      	add	r3, r2
 800609e:	673b      	str	r3, [r7, #112]	@ 0x70
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	011a      	lsls	r2, r3, #4
 80060ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060b0:	4413      	add	r3, r2
 80060b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	895b      	ldrh	r3, [r3, #10]
 80060ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6959      	ldr	r1, [r3, #20]
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060f0:	6800      	ldr	r0, [r0, #0]
 80060f2:	f000 ff24 	bl	8006f3e <USB_WritePMA>
 80060f6:	e0ca      	b.n	800628e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d177      	bne.n	80061f8 <USB_EPStartXfer+0xc98>
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006128:	4413      	add	r3, r2
 800612a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800613c:	4413      	add	r3, r2
 800613e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006142:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614e:	b29a      	uxth	r2, r3
 8006150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	2b3e      	cmp	r3, #62	@ 0x3e
 800615a:	d921      	bls.n	80061a0 <USB_EPStartXfer+0xc40>
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <USB_EPStartXfer+0xc1c>
 8006172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006176:	3b01      	subs	r3, #1
 8006178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800617c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006186:	b29b      	uxth	r3, r3
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b29b      	uxth	r3, r3
 800618c:	4313      	orrs	r3, r2
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e05c      	b.n	800625a <USB_EPStartXfer+0xcfa>
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <USB_EPStartXfer+0xc5e>
 80061a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e04d      	b.n	800625a <USB_EPStartXfer+0xcfa>
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <USB_EPStartXfer+0xc7e>
 80061d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061d8:	3301      	adds	r3, #1
 80061da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	4313      	orrs	r3, r2
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e030      	b.n	800625a <USB_EPStartXfer+0xcfa>
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d128      	bne.n	800625a <USB_EPStartXfer+0xcfa>
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800622c:	4413      	add	r3, r2
 800622e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	011a      	lsls	r2, r3, #4
 8006240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006244:	4413      	add	r3, r2
 8006246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800624a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006258:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800625a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	891b      	ldrh	r3, [r3, #8]
 8006266:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	b29b      	uxth	r3, r3
 800627c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006280:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006284:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006288:	6800      	ldr	r0, [r0, #0]
 800628a:	f000 fe58 	bl	8006f3e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b4:	817b      	strh	r3, [r7, #10]
 80062b6:	897b      	ldrh	r3, [r7, #10]
 80062b8:	f083 0310 	eor.w	r3, r3, #16
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	897b      	ldrh	r3, [r7, #10]
 80062c0:	f083 0320 	eor.w	r3, r3, #32
 80062c4:	817b      	strh	r3, [r7, #10]
 80062c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	897b      	ldrh	r3, [r7, #10]
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]
 80062f6:	f000 bcde 	b.w	8006cb6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	7b1b      	ldrb	r3, [r3, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 80bb 	bne.w	8006482 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	429a      	cmp	r2, r3
 8006326:	d917      	bls.n	8006358 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	1ad2      	subs	r2, r2, r3
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	619a      	str	r2, [r3, #24]
 8006356:	e00e      	b.n	8006376 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800639a:	4413      	add	r3, r2
 800639c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80063d6:	d924      	bls.n	8006422 <USB_EPStartXfer+0xec2>
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <USB_EPStartXfer+0xe98>
 80063ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063f2:	3b01      	subs	r3, #1
 80063f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006404:	b29b      	uxth	r3, r3
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	b29b      	uxth	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006416:	b29a      	uxth	r2, r3
 8006418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	f000 bc10 	b.w	8006c42 <USB_EPStartXfer+0x16e2>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10c      	bne.n	8006444 <USB_EPStartXfer+0xee4>
 800642a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e3fe      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <USB_EPStartXfer+0xf04>
 800645a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800645e:	3301      	adds	r3, #1
 8006460:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006470:	b29b      	uxth	r3, r3
 8006472:	029b      	lsls	r3, r3, #10
 8006474:	b29b      	uxth	r3, r3
 8006476:	4313      	orrs	r3, r2
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e3df      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b02      	cmp	r3, #2
 8006490:	f040 8218 	bne.w	80068c4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 809d 	bne.w	80065e0 <USB_EPStartXfer+0x1080>
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ca:	4413      	add	r3, r2
 80064cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	011a      	lsls	r2, r3, #4
 80064de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b3e      	cmp	r3, #62	@ 0x3e
 800650e:	d92b      	bls.n	8006568 <USB_EPStartXfer+0x1008>
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <USB_EPStartXfer+0xfe0>
 8006536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653a:	3b01      	subs	r3, #1
 800653c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654c:	b29b      	uxth	r3, r3
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	b29b      	uxth	r3, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	b29b      	uxth	r3, r3
 8006556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e070      	b.n	800664a <USB_EPStartXfer+0x10ea>
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10c      	bne.n	8006592 <USB_EPStartXfer+0x1032>
 8006578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e05b      	b.n	800664a <USB_EPStartXfer+0x10ea>
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <USB_EPStartXfer+0x1062>
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065bc:	3301      	adds	r3, #1
 80065be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	029b      	lsls	r3, r3, #10
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e034      	b.n	800664a <USB_EPStartXfer+0x10ea>
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d12c      	bne.n	800664a <USB_EPStartXfer+0x10ea>
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006614:	4413      	add	r3, r2
 8006616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	011a      	lsls	r2, r3, #4
 8006628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800662c:	4413      	add	r3, r2
 800662e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 809d 	bne.w	80067a4 <USB_EPStartXfer+0x1244>
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800668e:	4413      	add	r3, r2
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80066d2:	d92b      	bls.n	800672c <USB_EPStartXfer+0x11cc>
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <USB_EPStartXfer+0x11a4>
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fe:	3b01      	subs	r3, #1
 8006700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006710:	b29b      	uxth	r3, r3
 8006712:	029b      	lsls	r3, r3, #10
 8006714:	b29b      	uxth	r3, r3
 8006716:	4313      	orrs	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e069      	b.n	8006800 <USB_EPStartXfer+0x12a0>
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10c      	bne.n	8006756 <USB_EPStartXfer+0x11f6>
 800673c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e054      	b.n	8006800 <USB_EPStartXfer+0x12a0>
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <USB_EPStartXfer+0x1226>
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006780:	3301      	adds	r3, #1
 8006782:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006786:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29b      	uxth	r3, r3
 8006798:	4313      	orrs	r3, r2
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e02d      	b.n	8006800 <USB_EPStartXfer+0x12a0>
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d125      	bne.n	8006800 <USB_EPStartXfer+0x12a0>
 80067b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067ca:	4413      	add	r3, r2
 80067cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	011a      	lsls	r2, r3, #4
 80067de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8218 	beq.w	8006c42 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006832:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <USB_EPStartXfer+0x12ea>
 800683e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800684a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800684e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 81f5 	bne.w	8006c42 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006858:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	f040 81ee 	bne.w	8006c42 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
 80068c2:	e1be      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	78db      	ldrb	r3, [r3, #3]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	f040 81b4 	bne.w	8006c3e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d917      	bls.n	8006922 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80068f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	619a      	str	r2, [r3, #24]
 8006920:	e00e      	b.n	8006940 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 8085 	bne.w	8006a5c <USB_EPStartXfer+0x14fc>
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006976:	4413      	add	r3, r2
 8006978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800698e:	4413      	add	r3, r2
 8006990:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b2:	d923      	bls.n	80069fc <USB_EPStartXfer+0x149c>
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <USB_EPStartXfer+0x1474>
 80069ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ce:	3b01      	subs	r3, #1
 80069d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e060      	b.n	8006abe <USB_EPStartXfer+0x155e>
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10c      	bne.n	8006a1e <USB_EPStartXfer+0x14be>
 8006a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e04f      	b.n	8006abe <USB_EPStartXfer+0x155e>
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <USB_EPStartXfer+0x14de>
 8006a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e030      	b.n	8006abe <USB_EPStartXfer+0x155e>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d128      	bne.n	8006abe <USB_EPStartXfer+0x155e>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a90:	4413      	add	r3, r2
 8006a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	011a      	lsls	r2, r3, #4
 8006aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 8085 	bne.w	8006be8 <USB_EPStartXfer+0x1688>
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b02:	4413      	add	r3, r2
 8006b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	011a      	lsls	r2, r3, #4
 8006b16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b3e:	d923      	bls.n	8006b88 <USB_EPStartXfer+0x1628>
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <USB_EPStartXfer+0x1600>
 8006b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	029b      	lsls	r3, r3, #10
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	e05c      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10c      	bne.n	8006baa <USB_EPStartXfer+0x164a>
 8006b90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e04b      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <USB_EPStartXfer+0x166a>
 8006bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	e02c      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d124      	bne.n	8006c42 <USB_EPStartXfer+0x16e2>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c0e:	4413      	add	r3, r2
 8006c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c26:	4413      	add	r3, r2
 8006c28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e001      	b.n	8006c42 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e03a      	b.n	8006cb8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c80:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d020      	beq.n	8006d16 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cea:	81bb      	strh	r3, [r7, #12]
 8006cec:	89bb      	ldrh	r3, [r7, #12]
 8006cee:	f083 0310 	eor.w	r3, r3, #16
 8006cf2:	81bb      	strh	r3, [r7, #12]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	89bb      	ldrh	r3, [r7, #12]
 8006d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	8013      	strh	r3, [r2, #0]
 8006d14:	e01f      	b.n	8006d56 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2c:	81fb      	strh	r3, [r7, #14]
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d34:	81fb      	strh	r3, [r7, #14]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 809d 	bne.w	8006eb0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d04c      	beq.n	8006e18 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	823b      	strh	r3, [r7, #16]
 8006d8c:	8a3b      	ldrh	r3, [r7, #16]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01b      	beq.n	8006dce <USB_EPClearStall+0x6c>
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dac:	81fb      	strh	r3, [r7, #14]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	89fb      	ldrh	r3, [r7, #14]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d06c      	beq.n	8006eb0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dec:	81bb      	strh	r3, [r7, #12]
 8006dee:	89bb      	ldrh	r3, [r7, #12]
 8006df0:	f083 0320 	eor.w	r3, r3, #32
 8006df4:	81bb      	strh	r3, [r7, #12]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	441a      	add	r2, r3
 8006e00:	89bb      	ldrh	r3, [r7, #12]
 8006e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	8013      	strh	r3, [r2, #0]
 8006e16:	e04b      	b.n	8006eb0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	82fb      	strh	r3, [r7, #22]
 8006e26:	8afb      	ldrh	r3, [r7, #22]
 8006e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01b      	beq.n	8006e68 <USB_EPClearStall+0x106>
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	82bb      	strh	r3, [r7, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	8abb      	ldrh	r3, [r7, #20]
 8006e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	827b      	strh	r3, [r7, #18]
 8006e80:	8a7b      	ldrh	r3, [r7, #18]
 8006e82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e86:	827b      	strh	r3, [r7, #18]
 8006e88:	8a7b      	ldrh	r3, [r7, #18]
 8006e8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e8e:	827b      	strh	r3, [r7, #18]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	441a      	add	r2, r3
 8006e9a:	8a7b      	ldrh	r3, [r7, #18]
 8006e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2280      	movs	r2, #128	@ 0x80
 8006ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr

08006ef6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b08b      	sub	sp, #44	@ 0x2c
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	80fb      	strh	r3, [r7, #6]
 8006f50:	4613      	mov	r3, r2
 8006f52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f54:	88bb      	ldrh	r3, [r7, #4]
 8006f56:	3301      	adds	r3, #1
 8006f58:	085b      	lsrs	r3, r3, #1
 8006f5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	005a      	lsls	r2, r3, #1
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f76:	e01e      	b.n	8006fb6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3301      	adds	r3, #1
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	b21a      	sxth	r2, r3
 8006f88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b21b      	sxth	r3, r3
 8006f90:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	8a7a      	ldrh	r2, [r7, #18]
 8006f96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1dd      	bne.n	8006f78 <USB_WritePMA+0x3a>
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	372c      	adds	r7, #44	@ 0x2c
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b08b      	sub	sp, #44	@ 0x2c
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	80fb      	strh	r3, [r7, #6]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006fde:	88bb      	ldrh	r3, [r7, #4]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	005a      	lsls	r2, r3, #1
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ffa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007000:	e01b      	b.n	800703a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	3302      	adds	r3, #2
 800700e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	b2da      	uxtb	r2, r3
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	3301      	adds	r3, #1
 800701c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	3301      	adds	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	3302      	adds	r3, #2
 8007032:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	3b01      	subs	r3, #1
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e0      	bne.n	8007002 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007040:	88bb      	ldrh	r3, [r7, #4]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	701a      	strb	r2, [r3, #0]
  }
}
 800705c:	bf00      	nop
 800705e:	372c      	adds	r7, #44	@ 0x2c
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7c1b      	ldrb	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d115      	bne.n	80070aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800707e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007082:	2202      	movs	r2, #2
 8007084:	2181      	movs	r1, #129	@ 0x81
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 fe1b 	bl	8008cc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007092:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007096:	2202      	movs	r2, #2
 8007098:	2101      	movs	r1, #1
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fe11 	bl	8008cc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80070a8:	e012      	b.n	80070d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070aa:	2340      	movs	r3, #64	@ 0x40
 80070ac:	2202      	movs	r2, #2
 80070ae:	2181      	movs	r1, #129	@ 0x81
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fe06 	bl	8008cc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070bc:	2340      	movs	r3, #64	@ 0x40
 80070be:	2202      	movs	r2, #2
 80070c0:	2101      	movs	r1, #1
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fdfd 	bl	8008cc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070d0:	2308      	movs	r3, #8
 80070d2:	2203      	movs	r2, #3
 80070d4:	2182      	movs	r1, #130	@ 0x82
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fdf3 	bl	8008cc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070e2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80070e6:	f001 ff13 	bl	8008f10 <USBD_static_malloc>
 80070ea:	4602      	mov	r2, r0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	e026      	b.n	8007150 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007108:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7c1b      	ldrb	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007136:	2101      	movs	r1, #1
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 feb3 	bl	8008ea4 <USBD_LL_PrepareReceive>
 800713e:	e007      	b.n	8007150 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007146:	2340      	movs	r3, #64	@ 0x40
 8007148:	2101      	movs	r1, #1
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 feaa 	bl	8008ea4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800716a:	2181      	movs	r1, #129	@ 0x81
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fdce 	bl	8008d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007178:	2101      	movs	r1, #1
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fdc7 	bl	8008d0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007188:	2182      	movs	r1, #130	@ 0x82
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fdbf 	bl	8008d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 feb9 	bl	8008f28 <USBD_static_free>
    pdev->pClassData = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d039      	beq.n	8007266 <USBD_CDC_Setup+0x9e>
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d17f      	bne.n	80072f6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88db      	ldrh	r3, [r3, #6]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d029      	beq.n	8007252 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b25b      	sxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	da11      	bge.n	800722c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007214:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	88d2      	ldrh	r2, [r2, #6]
 800721a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800721c:	6939      	ldr	r1, [r7, #16]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	88db      	ldrh	r3, [r3, #6]
 8007222:	461a      	mov	r2, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 f9d5 	bl	80085d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800722a:	e06b      	b.n	8007304 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	785a      	ldrb	r2, [r3, #1]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007242:	6939      	ldr	r1, [r7, #16]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	461a      	mov	r2, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 f9f0 	bl	8008630 <USBD_CtlPrepareRx>
      break;
 8007250:	e058      	b.n	8007304 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	7850      	ldrb	r0, [r2, #1]
 800725e:	2200      	movs	r2, #0
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	4798      	blx	r3
      break;
 8007264:	e04e      	b.n	8007304 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b0b      	cmp	r3, #11
 800726c:	d02e      	beq.n	80072cc <USBD_CDC_Setup+0x104>
 800726e:	2b0b      	cmp	r3, #11
 8007270:	dc38      	bgt.n	80072e4 <USBD_CDC_Setup+0x11c>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <USBD_CDC_Setup+0xb4>
 8007276:	2b0a      	cmp	r3, #10
 8007278:	d014      	beq.n	80072a4 <USBD_CDC_Setup+0xdc>
 800727a:	e033      	b.n	80072e4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007282:	2b03      	cmp	r3, #3
 8007284:	d107      	bne.n	8007296 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007286:	f107 030c 	add.w	r3, r7, #12
 800728a:	2202      	movs	r2, #2
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 f9a0 	bl	80085d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007294:	e02e      	b.n	80072f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f931 	bl	8008500 <USBD_CtlError>
            ret = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e027      	b.n	80072f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d107      	bne.n	80072be <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80072ae:	f107 030f 	add.w	r3, r7, #15
 80072b2:	2201      	movs	r2, #1
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f98c 	bl	80085d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072bc:	e01a      	b.n	80072f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f91d 	bl	8008500 <USBD_CtlError>
            ret = USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ca:	e013      	b.n	80072f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d00d      	beq.n	80072f2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f911 	bl	8008500 <USBD_CtlError>
            ret = USBD_FAIL;
 80072de:	2302      	movs	r3, #2
 80072e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072e2:	e006      	b.n	80072f2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f90a 	bl	8008500 <USBD_CtlError>
          ret = USBD_FAIL;
 80072ec:	2302      	movs	r3, #2
 80072ee:	75fb      	strb	r3, [r7, #23]
          break;
 80072f0:	e000      	b.n	80072f4 <USBD_CDC_Setup+0x12c>
          break;
 80072f2:	bf00      	nop
      }
      break;
 80072f4:	e006      	b.n	8007304 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f901 	bl	8008500 <USBD_CtlError>
      ret = USBD_FAIL;
 80072fe:	2302      	movs	r3, #2
 8007300:	75fb      	strb	r3, [r7, #23]
      break;
 8007302:	bf00      	nop
  }

  return ret;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007328:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d03a      	beq.n	80073aa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	331c      	adds	r3, #28
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d029      	beq.n	800739e <USBD_CDC_DataIn+0x90>
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	331c      	adds	r3, #28
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	78f9      	ldrb	r1, [r7, #3]
 800735e:	68b8      	ldr	r0, [r7, #8]
 8007360:	460b      	mov	r3, r1
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4403      	add	r3, r0
 800736a:	3338      	adds	r3, #56	@ 0x38
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	331c      	adds	r3, #28
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007390:	78f9      	ldrb	r1, [r7, #3]
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fd61 	bl	8008e5e <USBD_LL_Transmit>
 800739c:	e003      	b.n	80073a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80073aa:	2302      	movs	r3, #2
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fd8c 	bl	8008eea <USBD_LL_GetRxDataSize>
 80073d2:	4602      	mov	r2, r0
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073f8:	4611      	mov	r1, r2
 80073fa:	4798      	blx	r3

    return USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e000      	b.n	8007402 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007400:	2302      	movs	r3, #2
  }
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007418:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007420:	2b00      	cmp	r3, #0
 8007422:	d014      	beq.n	800744e <USBD_CDC_EP0_RxReady+0x44>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800742a:	2bff      	cmp	r3, #255	@ 0xff
 800742c:	d00f      	beq.n	800744e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800743c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007444:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	22ff      	movs	r2, #255	@ 0xff
 800744a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2243      	movs	r2, #67	@ 0x43
 8007464:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007466:	4b03      	ldr	r3, [pc, #12]	@ (8007474 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000094 	.word	0x20000094

08007478 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2243      	movs	r2, #67	@ 0x43
 8007484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007486:	4b03      	ldr	r3, [pc, #12]	@ (8007494 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000050 	.word	0x20000050

08007498 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2243      	movs	r2, #67	@ 0x43
 80074a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80074a6:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	200000d8 	.word	0x200000d8

080074b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220a      	movs	r2, #10
 80074c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80074c6:	4b03      	ldr	r3, [pc, #12]	@ (80074d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	2000000c 	.word	0x2000000c

080074d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074e2:	2302      	movs	r3, #2
 80074e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007518:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr

08007536 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007546:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d017      	beq.n	80075a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7c1b      	ldrb	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007588:	2101      	movs	r1, #1
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fc8a 	bl	8008ea4 <USBD_LL_PrepareReceive>
 8007590:	e007      	b.n	80075a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007598:	2340      	movs	r3, #64	@ 0x40
 800759a:	2101      	movs	r1, #1
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fc81 	bl	8008ea4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e000      	b.n	80075a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80075a6:	2302      	movs	r3, #2
  }
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e01a      	b.n	80075fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 faee 	bl	8008bd8 <USBD_LL_Init>

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007606:	b480      	push	{r7}
 8007608:	b085      	sub	sp, #20
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d006      	beq.n	8007628 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
 8007626:	e001      	b.n	800762c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fb23 	bl	8008c8c <USBD_LL_Start>

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007670:	2302      	movs	r3, #2
 8007672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4611      	mov	r1, r2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	4611      	mov	r1, r2
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3

  return USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fed7 	bl	800848e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2b02      	cmp	r3, #2
 8007702:	d016      	beq.n	8007732 <USBD_LL_SetupStage+0x6a>
 8007704:	2b02      	cmp	r3, #2
 8007706:	d81c      	bhi.n	8007742 <USBD_LL_SetupStage+0x7a>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <USBD_LL_SetupStage+0x4a>
 800770c:	2b01      	cmp	r3, #1
 800770e:	d008      	beq.n	8007722 <USBD_LL_SetupStage+0x5a>
 8007710:	e017      	b.n	8007742 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f9ca 	bl	8007ab4 <USBD_StdDevReq>
      break;
 8007720:	e01a      	b.n	8007758 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa2c 	bl	8007b88 <USBD_StdItfReq>
      break;
 8007730:	e012      	b.n	8007758 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa6c 	bl	8007c18 <USBD_StdEPReq>
      break;
 8007740:	e00a      	b.n	8007758 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007748:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800774c:	b2db      	uxtb	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fafb 	bl	8008d4c <USBD_LL_StallEP>
      break;
 8007756:	bf00      	nop
  }

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	460b      	mov	r3, r1
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d14b      	bne.n	800780e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800777c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007784:	2b03      	cmp	r3, #3
 8007786:	d134      	bne.n	80077f2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	429a      	cmp	r2, r3
 8007792:	d919      	bls.n	80077c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	1ad2      	subs	r2, r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d203      	bcs.n	80077b6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	e002      	b.n	80077bc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 ff53 	bl	800866c <USBD_CtlContinueRx>
 80077c6:	e038      	b.n	800783a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d105      	bne.n	80077ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 ff50 	bl	8008690 <USBD_CtlSendStatus>
 80077f0:	e023      	b.n	800783a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d11e      	bne.n	800783a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007804:	2100      	movs	r1, #0
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 faa0 	bl	8008d4c <USBD_LL_StallEP>
 800780c:	e015      	b.n	800783a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00d      	beq.n	8007836 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007820:	2b03      	cmp	r3, #3
 8007822:	d108      	bne.n	8007836 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	4611      	mov	r1, r2
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
 8007834:	e001      	b.n	800783a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007836:	2302      	movs	r3, #2
 8007838:	e000      	b.n	800783c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	460b      	mov	r3, r1
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d17f      	bne.n	8007958 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3314      	adds	r3, #20
 800785c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007864:	2b02      	cmp	r3, #2
 8007866:	d15c      	bne.n	8007922 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	429a      	cmp	r2, r3
 8007872:	d915      	bls.n	80078a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 febd 	bl	800860c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007892:	2300      	movs	r3, #0
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fb03 	bl	8008ea4 <USBD_LL_PrepareReceive>
 800789e:	e04e      	b.n	800793e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	6912      	ldr	r2, [r2, #16]
 80078a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80078ac:	fb01 f202 	mul.w	r2, r1, r2
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11c      	bne.n	80078f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	d316      	bcc.n	80078f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d20f      	bcs.n	80078f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fe99 	bl	800860c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f001 fadb 	bl	8008ea4 <USBD_LL_PrepareReceive>
 80078ee:	e026      	b.n	800793e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007902:	2b03      	cmp	r3, #3
 8007904:	d105      	bne.n	8007912 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	@ 0x80
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 fa19 	bl	8008d4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fecb 	bl	80086b6 <USBD_CtlReceiveStatus>
 8007920:	e00d      	b.n	800793e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007928:	2b04      	cmp	r3, #4
 800792a:	d004      	beq.n	8007936 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007936:	2180      	movs	r1, #128	@ 0x80
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f001 fa07 	bl	8008d4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d11d      	bne.n	8007984 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fe81 	bl	8007650 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007956:	e015      	b.n	8007984 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00d      	beq.n	8007980 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800796a:	2b03      	cmp	r3, #3
 800796c:	d108      	bne.n	8007980 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	7afa      	ldrb	r2, [r7, #11]
 8007978:	4611      	mov	r1, r2
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	4798      	blx	r3
 800797e:	e001      	b.n	8007984 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007980:	2302      	movs	r3, #2
 8007982:	e000      	b.n	8007986 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007996:	2340      	movs	r3, #64	@ 0x40
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f990 	bl	8008cc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2240      	movs	r2, #64	@ 0x40
 80079ae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b2:	2340      	movs	r3, #64	@ 0x40
 80079b4:	2200      	movs	r2, #0
 80079b6:	2180      	movs	r1, #128	@ 0x80
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f982 	bl	8008cc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2240      	movs	r2, #64	@ 0x40
 80079c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6852      	ldr	r2, [r2, #4]
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	4611      	mov	r1, r2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
  }

  return USBD_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr

08007a2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2204      	movs	r2, #4
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d105      	bne.n	8007a74 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d10b      	bne.n	8007aaa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aca:	2b40      	cmp	r3, #64	@ 0x40
 8007acc:	d005      	beq.n	8007ada <USBD_StdDevReq+0x26>
 8007ace:	2b40      	cmp	r3, #64	@ 0x40
 8007ad0:	d84f      	bhi.n	8007b72 <USBD_StdDevReq+0xbe>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <USBD_StdDevReq+0x36>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d14b      	bne.n	8007b72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
      break;
 8007ae8:	e048      	b.n	8007b7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d839      	bhi.n	8007b66 <USBD_StdDevReq+0xb2>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <USBD_StdDevReq+0x44>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b49 	.word	0x08007b49
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	08007b67 	.word	0x08007b67
 8007b04:	08007b53 	.word	0x08007b53
 8007b08:	08007b67 	.word	0x08007b67
 8007b0c:	08007b2b 	.word	0x08007b2b
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b67 	.word	0x08007b67
 8007b18:	08007b3f 	.word	0x08007b3f
 8007b1c:	08007b35 	.word	0x08007b35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9dc 	bl	8007ee0 <USBD_GetDescriptor>
          break;
 8007b28:	e022      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb3f 	bl	80081b0 <USBD_SetAddress>
          break;
 8007b32:	e01d      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb7e 	bl	8008238 <USBD_SetConfig>
          break;
 8007b3c:	e018      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fc07 	bl	8008354 <USBD_GetConfig>
          break;
 8007b46:	e013      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc37 	bl	80083be <USBD_GetStatus>
          break;
 8007b50:	e00e      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fc65 	bl	8008424 <USBD_SetFeature>
          break;
 8007b5a:	e009      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fc74 	bl	800844c <USBD_ClrFeature>
          break;
 8007b64:	e004      	b.n	8007b70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fcc9 	bl	8008500 <USBD_CtlError>
          break;
 8007b6e:	bf00      	nop
      }
      break;
 8007b70:	e004      	b.n	8007b7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fcc3 	bl	8008500 <USBD_CtlError>
      break;
 8007b7a:	bf00      	nop
  }

  return ret;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop

08007b88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d005      	beq.n	8007bae <USBD_StdItfReq+0x26>
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d82e      	bhi.n	8007c04 <USBD_StdItfReq+0x7c>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <USBD_StdItfReq+0x26>
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d12a      	bne.n	8007c04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d81d      	bhi.n	8007bf6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	889b      	ldrh	r3, [r3, #4]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d813      	bhi.n	8007bec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88db      	ldrh	r3, [r3, #6]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d110      	bne.n	8007c00 <USBD_StdItfReq+0x78>
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10d      	bne.n	8007c00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fd53 	bl	8008690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bea:	e009      	b.n	8007c00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fc86 	bl	8008500 <USBD_CtlError>
          break;
 8007bf4:	e004      	b.n	8007c00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc81 	bl	8008500 <USBD_CtlError>
          break;
 8007bfe:	e000      	b.n	8007c02 <USBD_StdItfReq+0x7a>
          break;
 8007c00:	bf00      	nop
      }
      break;
 8007c02:	e004      	b.n	8007c0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc7a 	bl	8008500 <USBD_CtlError>
      break;
 8007c0c:	bf00      	nop
  }

  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	889b      	ldrh	r3, [r3, #4]
 8007c2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d007      	beq.n	8007c48 <USBD_StdEPReq+0x30>
 8007c38:	2b40      	cmp	r3, #64	@ 0x40
 8007c3a:	f200 8146 	bhi.w	8007eca <USBD_StdEPReq+0x2b2>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <USBD_StdEPReq+0x40>
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	f040 8141 	bne.w	8007eca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
      break;
 8007c56:	e13d      	b.n	8007ed4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d10a      	bne.n	8007c7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	e12d      	b.n	8007ed6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d007      	beq.n	8007c92 <USBD_StdEPReq+0x7a>
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	f300 811b 	bgt.w	8007ebe <USBD_StdEPReq+0x2a6>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d072      	beq.n	8007d72 <USBD_StdEPReq+0x15a>
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d03a      	beq.n	8007d06 <USBD_StdEPReq+0xee>
 8007c90:	e115      	b.n	8007ebe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d002      	beq.n	8007ca2 <USBD_StdEPReq+0x8a>
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d015      	beq.n	8007ccc <USBD_StdEPReq+0xb4>
 8007ca0:	e02b      	b.n	8007cfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00c      	beq.n	8007cc2 <USBD_StdEPReq+0xaa>
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b80      	cmp	r3, #128	@ 0x80
 8007cac:	d009      	beq.n	8007cc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 f84a 	bl	8008d4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cb8:	2180      	movs	r1, #128	@ 0x80
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 f846 	bl	8008d4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc0:	e020      	b.n	8007d04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc1b 	bl	8008500 <USBD_CtlError>
              break;
 8007cca:	e01b      	b.n	8007d04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10e      	bne.n	8007cf2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <USBD_StdEPReq+0xda>
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b80      	cmp	r3, #128	@ 0x80
 8007cde:	d008      	beq.n	8007cf2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f82d 	bl	8008d4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fccc 	bl	8008690 <USBD_CtlSendStatus>

              break;
 8007cf8:	e004      	b.n	8007d04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fbff 	bl	8008500 <USBD_CtlError>
              break;
 8007d02:	bf00      	nop
          }
          break;
 8007d04:	e0e0      	b.n	8007ec8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d002      	beq.n	8007d16 <USBD_StdEPReq+0xfe>
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d015      	beq.n	8007d40 <USBD_StdEPReq+0x128>
 8007d14:	e026      	b.n	8007d64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00c      	beq.n	8007d36 <USBD_StdEPReq+0x11e>
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b80      	cmp	r3, #128	@ 0x80
 8007d20:	d009      	beq.n	8007d36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f810 	bl	8008d4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d2c:	2180      	movs	r1, #128	@ 0x80
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f80c 	bl	8008d4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d34:	e01c      	b.n	8007d70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fbe1 	bl	8008500 <USBD_CtlError>
              break;
 8007d3e:	e017      	b.n	8007d70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	885b      	ldrh	r3, [r3, #2]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d112      	bne.n	8007d6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 f817 	bl	8008d8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc97 	bl	8008690 <USBD_CtlSendStatus>
              }
              break;
 8007d62:	e004      	b.n	8007d6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fbca 	bl	8008500 <USBD_CtlError>
              break;
 8007d6c:	e000      	b.n	8007d70 <USBD_StdEPReq+0x158>
              break;
 8007d6e:	bf00      	nop
          }
          break;
 8007d70:	e0aa      	b.n	8007ec8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d002      	beq.n	8007d82 <USBD_StdEPReq+0x16a>
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d032      	beq.n	8007de6 <USBD_StdEPReq+0x1ce>
 8007d80:	e097      	b.n	8007eb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <USBD_StdEPReq+0x180>
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b80      	cmp	r3, #128	@ 0x80
 8007d8c:	d004      	beq.n	8007d98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fbb5 	bl	8008500 <USBD_CtlError>
                break;
 8007d96:	e091      	b.n	8007ebc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	da0b      	bge.n	8007db8 <USBD_StdEPReq+0x1a0>
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	3310      	adds	r3, #16
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	3304      	adds	r3, #4
 8007db6:	e00b      	b.n	8007dd0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fbf8 	bl	80085d4 <USBD_CtlSendData>
              break;
 8007de4:	e06a      	b.n	8007ebc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da11      	bge.n	8007e12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	3318      	adds	r3, #24
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d117      	bne.n	8007e38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb78 	bl	8008500 <USBD_CtlError>
                  break;
 8007e10:	e054      	b.n	8007ebc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fb65 	bl	8008500 <USBD_CtlError>
                  break;
 8007e36:	e041      	b.n	8007ebc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da0b      	bge.n	8007e58 <USBD_StdEPReq+0x240>
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	3310      	adds	r3, #16
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	3304      	adds	r3, #4
 8007e56:	e00b      	b.n	8007e70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3304      	adds	r3, #4
 8007e70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <USBD_StdEPReq+0x266>
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b80      	cmp	r3, #128	@ 0x80
 8007e7c:	d103      	bne.n	8007e86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e00e      	b.n	8007ea4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 ff9c 	bl	8008dc8 <USBD_LL_IsStallEP>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e002      	b.n	8007ea4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb92 	bl	80085d4 <USBD_CtlSendData>
              break;
 8007eb0:	e004      	b.n	8007ebc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fb23 	bl	8008500 <USBD_CtlError>
              break;
 8007eba:	bf00      	nop
          }
          break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb1d 	bl	8008500 <USBD_CtlError>
          break;
 8007ec6:	bf00      	nop
      }
      break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fb17 	bl	8008500 <USBD_CtlError>
      break;
 8007ed2:	bf00      	nop
  }

  return ret;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	f200 8128 	bhi.w	8008156 <USBD_GetDescriptor+0x276>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <USBD_GetDescriptor+0x2c>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f81 	.word	0x08007f81
 8007f18:	08008157 	.word	0x08008157
 8007f1c:	08008157 	.word	0x08008157
 8007f20:	080080f7 	.word	0x080080f7
 8007f24:	08008123 	.word	0x08008123
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
      break;
 8007f3e:	e112      	b.n	8008166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7c1b      	ldrb	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	f107 0208 	add.w	r2, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	2202      	movs	r2, #2
 8007f60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f62:	e100      	b.n	8008166 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	f107 0208 	add.w	r2, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	701a      	strb	r2, [r3, #0]
      break;
 8007f7e:	e0f2      	b.n	8008166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	f200 80ac 	bhi.w	80080e4 <USBD_GetDescriptor+0x204>
 8007f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f94 <USBD_GetDescriptor+0xb4>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fad 	.word	0x08007fad
 8007f98:	08007fe1 	.word	0x08007fe1
 8007f9c:	08008015 	.word	0x08008015
 8007fa0:	08008049 	.word	0x08008049
 8007fa4:	0800807d 	.word	0x0800807d
 8007fa8:	080080b1 	.word	0x080080b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	7c12      	ldrb	r2, [r2, #16]
 8007fc4:	f107 0108 	add.w	r1, r7, #8
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fce:	e091      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa94 	bl	8008500 <USBD_CtlError>
            err++;
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fde:	e089      	b.n	80080f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7c12      	ldrb	r2, [r2, #16]
 8007ff8:	f107 0108 	add.w	r1, r7, #8
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3
 8008000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008002:	e077      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa7a 	bl	8008500 <USBD_CtlError>
            err++;
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	3301      	adds	r3, #1
 8008010:	72fb      	strb	r3, [r7, #11]
          break;
 8008012:	e06f      	b.n	80080f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	7c12      	ldrb	r2, [r2, #16]
 800802c:	f107 0108 	add.w	r1, r7, #8
 8008030:	4610      	mov	r0, r2
 8008032:	4798      	blx	r3
 8008034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008036:	e05d      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa60 	bl	8008500 <USBD_CtlError>
            err++;
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	3301      	adds	r3, #1
 8008044:	72fb      	strb	r3, [r7, #11]
          break;
 8008046:	e055      	b.n	80080f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	7c12      	ldrb	r2, [r2, #16]
 8008060:	f107 0108 	add.w	r1, r7, #8
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806a:	e043      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa46 	bl	8008500 <USBD_CtlError>
            err++;
 8008074:	7afb      	ldrb	r3, [r7, #11]
 8008076:	3301      	adds	r3, #1
 8008078:	72fb      	strb	r3, [r7, #11]
          break;
 800807a:	e03b      	b.n	80080f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809e:	e029      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa2c 	bl	8008500 <USBD_CtlError>
            err++;
 80080a8:	7afb      	ldrb	r3, [r7, #11]
 80080aa:	3301      	adds	r3, #1
 80080ac:	72fb      	strb	r3, [r7, #11]
          break;
 80080ae:	e021      	b.n	80080f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d2:	e00f      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa12 	bl	8008500 <USBD_CtlError>
            err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
          break;
 80080e2:	e007      	b.n	80080f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa0a 	bl	8008500 <USBD_CtlError>
          err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080f2:	e038      	b.n	8008166 <USBD_GetDescriptor+0x286>
 80080f4:	e037      	b.n	8008166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	7c1b      	ldrb	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008106:	f107 0208 	add.w	r2, r7, #8
 800810a:	4610      	mov	r0, r2
 800810c:	4798      	blx	r3
 800810e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008110:	e029      	b.n	8008166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f9f3 	bl	8008500 <USBD_CtlError>
        err++;
 800811a:	7afb      	ldrb	r3, [r7, #11]
 800811c:	3301      	adds	r3, #1
 800811e:	72fb      	strb	r3, [r7, #11]
      break;
 8008120:	e021      	b.n	8008166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10d      	bne.n	8008146 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008132:	f107 0208 	add.w	r2, r7, #8
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	2207      	movs	r2, #7
 8008142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008144:	e00f      	b.n	8008166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9d9 	bl	8008500 <USBD_CtlError>
        err++;
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	3301      	adds	r3, #1
 8008152:	72fb      	strb	r3, [r7, #11]
      break;
 8008154:	e007      	b.n	8008166 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f9d1 	bl	8008500 <USBD_CtlError>
      err++;
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	3301      	adds	r3, #1
 8008162:	72fb      	strb	r3, [r7, #11]
      break;
 8008164:	bf00      	nop
  }

  if (err != 0U)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11c      	bne.n	80081a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <USBD_GetDescriptor+0x2b6>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	88db      	ldrh	r3, [r3, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00d      	beq.n	8008196 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	88da      	ldrh	r2, [r3, #6]
 800817e:	893b      	ldrh	r3, [r7, #8]
 8008180:	4293      	cmp	r3, r2
 8008182:	bf28      	it	cs
 8008184:	4613      	movcs	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800818a:	893b      	ldrh	r3, [r7, #8]
 800818c:	461a      	mov	r2, r3
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fa1f 	bl	80085d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	88db      	ldrh	r3, [r3, #6]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa76 	bl	8008690 <USBD_CtlSendStatus>
 80081a4:	e000      	b.n	80081a8 <USBD_GetDescriptor+0x2c8>
    return;
 80081a6:	bf00      	nop
    }
  }
}
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d130      	bne.n	8008224 <USBD_SetAddress+0x74>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d12c      	bne.n	8008224 <USBD_SetAddress+0x74>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	885b      	ldrh	r3, [r3, #2]
 80081ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80081d0:	d828      	bhi.n	8008224 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	885b      	ldrh	r3, [r3, #2]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d104      	bne.n	80081f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f988 	bl	8008500 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f0:	e01d      	b.n	800822e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fe0e 	bl	8008e20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fa43 	bl	8008690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008218:	e009      	b.n	800822e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	e004      	b.n	800822e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f96a 	bl	8008500 <USBD_CtlError>
  }
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	4b41      	ldr	r3, [pc, #260]	@ (8008350 <USBD_SetConfig+0x118>)
 800824a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800824c:	4b40      	ldr	r3, [pc, #256]	@ (8008350 <USBD_SetConfig+0x118>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d904      	bls.n	800825e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f952 	bl	8008500 <USBD_CtlError>
 800825c:	e075      	b.n	800834a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008264:	2b02      	cmp	r3, #2
 8008266:	d002      	beq.n	800826e <USBD_SetConfig+0x36>
 8008268:	2b03      	cmp	r3, #3
 800826a:	d023      	beq.n	80082b4 <USBD_SetConfig+0x7c>
 800826c:	e062      	b.n	8008334 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800826e:	4b38      	ldr	r3, [pc, #224]	@ (8008350 <USBD_SetConfig+0x118>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01a      	beq.n	80082ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008276:	4b36      	ldr	r3, [pc, #216]	@ (8008350 <USBD_SetConfig+0x118>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008288:	4b31      	ldr	r3, [pc, #196]	@ (8008350 <USBD_SetConfig+0x118>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff f9e8 	bl	8007664 <USBD_SetClassConfig>
 8008294:	4603      	mov	r3, r0
 8008296:	2b02      	cmp	r3, #2
 8008298:	d104      	bne.n	80082a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f92f 	bl	8008500 <USBD_CtlError>
            return;
 80082a2:	e052      	b.n	800834a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f9f3 	bl	8008690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082aa:	e04e      	b.n	800834a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f9ef 	bl	8008690 <USBD_CtlSendStatus>
        break;
 80082b2:	e04a      	b.n	800834a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082b4:	4b26      	ldr	r3, [pc, #152]	@ (8008350 <USBD_SetConfig+0x118>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d112      	bne.n	80082e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80082c4:	4b22      	ldr	r3, [pc, #136]	@ (8008350 <USBD_SetConfig+0x118>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082ce:	4b20      	ldr	r3, [pc, #128]	@ (8008350 <USBD_SetConfig+0x118>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff f9e4 	bl	80076a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9d8 	bl	8008690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082e0:	e033      	b.n	800834a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008350 <USBD_SetConfig+0x118>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d01d      	beq.n	800832c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff f9d2 	bl	80076a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082fe:	4b14      	ldr	r3, [pc, #80]	@ (8008350 <USBD_SetConfig+0x118>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008308:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <USBD_SetConfig+0x118>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff f9a8 	bl	8007664 <USBD_SetClassConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	2b02      	cmp	r3, #2
 8008318:	d104      	bne.n	8008324 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f8ef 	bl	8008500 <USBD_CtlError>
            return;
 8008322:	e012      	b.n	800834a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f9b3 	bl	8008690 <USBD_CtlSendStatus>
        break;
 800832a:	e00e      	b.n	800834a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9af 	bl	8008690 <USBD_CtlSendStatus>
        break;
 8008332:	e00a      	b.n	800834a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8e2 	bl	8008500 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800833c:	4b04      	ldr	r3, [pc, #16]	@ (8008350 <USBD_SetConfig+0x118>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff f9ad 	bl	80076a2 <USBD_ClrClassConfig>
        break;
 8008348:	bf00      	nop
    }
  }
}
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000314 	.word	0x20000314

08008354 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d004      	beq.n	8008370 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8c9 	bl	8008500 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800836e:	e022      	b.n	80083b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008376:	2b02      	cmp	r3, #2
 8008378:	dc02      	bgt.n	8008380 <USBD_GetConfig+0x2c>
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc03      	bgt.n	8008386 <USBD_GetConfig+0x32>
 800837e:	e015      	b.n	80083ac <USBD_GetConfig+0x58>
 8008380:	2b03      	cmp	r3, #3
 8008382:	d00b      	beq.n	800839c <USBD_GetConfig+0x48>
 8008384:	e012      	b.n	80083ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3308      	adds	r3, #8
 8008390:	2201      	movs	r2, #1
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f91d 	bl	80085d4 <USBD_CtlSendData>
        break;
 800839a:	e00c      	b.n	80083b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	2201      	movs	r2, #1
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f915 	bl	80085d4 <USBD_CtlSendData>
        break;
 80083aa:	e004      	b.n	80083b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8a6 	bl	8008500 <USBD_CtlError>
        break;
 80083b4:	bf00      	nop
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ce:	3b01      	subs	r3, #1
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d81e      	bhi.n	8008412 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	88db      	ldrh	r3, [r3, #6]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d004      	beq.n	80083e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f88e 	bl	8008500 <USBD_CtlError>
        break;
 80083e4:	e01a      	b.n	800841c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f043 0202 	orr.w	r2, r3, #2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	330c      	adds	r3, #12
 8008406:	2202      	movs	r2, #2
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8e2 	bl	80085d4 <USBD_CtlSendData>
      break;
 8008410:	e004      	b.n	800841c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f873 	bl	8008500 <USBD_CtlError>
      break;
 800841a:	bf00      	nop
  }
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	885b      	ldrh	r3, [r3, #2]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d106      	bne.n	8008444 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f926 	bl	8008690 <USBD_CtlSendStatus>
  }
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845c:	3b01      	subs	r3, #1
 800845e:	2b02      	cmp	r3, #2
 8008460:	d80b      	bhi.n	800847a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d10c      	bne.n	8008484 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f90c 	bl	8008690 <USBD_CtlSendStatus>
      }
      break;
 8008478:	e004      	b.n	8008484 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f83f 	bl	8008500 <USBD_CtlError>
      break;
 8008482:	e000      	b.n	8008486 <USBD_ClrFeature+0x3a>
      break;
 8008484:	bf00      	nop
  }
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785a      	ldrb	r2, [r3, #1]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	3302      	adds	r3, #2
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	3303      	adds	r3, #3
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	3304      	adds	r3, #4
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	3305      	adds	r3, #5
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	3306      	adds	r3, #6
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3307      	adds	r3, #7
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4413      	add	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	80da      	strh	r2, [r3, #6]

}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800850a:	2180      	movs	r1, #128	@ 0x80
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc1d 	bl	8008d4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008512:	2100      	movs	r1, #0
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc19 	bl	8008d4c <USBD_LL_StallEP>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d032      	beq.n	800859e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f834 	bl	80085a6 <USBD_GetLen>
 800853e:	4603      	mov	r3, r0
 8008540:	3301      	adds	r3, #1
 8008542:	b29b      	uxth	r3, r3
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	75fa      	strb	r2, [r7, #23]
 8008552:	461a      	mov	r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4413      	add	r3, r2
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	75fa      	strb	r2, [r7, #23]
 8008564:	461a      	mov	r2, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	2203      	movs	r2, #3
 800856c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800856e:	e012      	b.n	8008596 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	60fa      	str	r2, [r7, #12]
 8008576:	7dfa      	ldrb	r2, [r7, #23]
 8008578:	1c51      	adds	r1, r2, #1
 800857a:	75f9      	strb	r1, [r7, #23]
 800857c:	4611      	mov	r1, r2
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	440a      	add	r2, r1
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	75fa      	strb	r2, [r7, #23]
 800858c:	461a      	mov	r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e8      	bne.n	8008570 <USBD_GetString+0x4e>
    }
  }
}
 800859e:	bf00      	nop
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085b2:	e005      	b.n	80085c0 <USBD_GetLen+0x1a>
  {
    len++;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	3301      	adds	r3, #1
 80085b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3301      	adds	r3, #1
 80085be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f5      	bne.n	80085b4 <USBD_GetLen+0xe>
  }

  return len;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	2100      	movs	r1, #0
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fc2e 	bl	8008e5e <USBD_LL_Transmit>

  return USBD_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	2100      	movs	r1, #0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 fc1c 	bl	8008e5e <USBD_LL_Transmit>

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2203      	movs	r2, #3
 8008642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008646:	88fa      	ldrh	r2, [r7, #6]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	2100      	movs	r1, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fc21 	bl	8008ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	2100      	movs	r1, #0
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fc0f 	bl	8008ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2204      	movs	r2, #4
 800869c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fbd9 	bl	8008e5e <USBD_LL_Transmit>

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2205      	movs	r2, #5
 80086c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fbe9 	bl	8008ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e0:	2200      	movs	r2, #0
 80086e2:	4912      	ldr	r1, [pc, #72]	@ (800872c <MX_USB_DEVICE_Init+0x50>)
 80086e4:	4812      	ldr	r0, [pc, #72]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 80086e6:	f7fe ff63 	bl	80075b0 <USBD_Init>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f0:	f7f8 fabe 	bl	8000c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086f4:	490f      	ldr	r1, [pc, #60]	@ (8008734 <MX_USB_DEVICE_Init+0x58>)
 80086f6:	480e      	ldr	r0, [pc, #56]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 80086f8:	f7fe ff85 	bl	8007606 <USBD_RegisterClass>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008702:	f7f8 fab5 	bl	8000c70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008706:	490c      	ldr	r1, [pc, #48]	@ (8008738 <MX_USB_DEVICE_Init+0x5c>)
 8008708:	4809      	ldr	r0, [pc, #36]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 800870a:	f7fe fee5 	bl	80074d8 <USBD_CDC_RegisterInterface>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008714:	f7f8 faac 	bl	8000c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008718:	4805      	ldr	r0, [pc, #20]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 800871a:	f7fe ff8d 	bl	8007638 <USBD_Start>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008724:	f7f8 faa4 	bl	8000c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008728:	bf00      	nop
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2000012c 	.word	0x2000012c
 8008730:	20000318 	.word	0x20000318
 8008734:	20000018 	.word	0x20000018
 8008738:	2000011c 	.word	0x2000011c

0800873c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008740:	2200      	movs	r2, #0
 8008742:	4905      	ldr	r1, [pc, #20]	@ (8008758 <CDC_Init_FS+0x1c>)
 8008744:	4805      	ldr	r0, [pc, #20]	@ (800875c <CDC_Init_FS+0x20>)
 8008746:	f7fe fedd 	bl	8007504 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800874a:	4905      	ldr	r1, [pc, #20]	@ (8008760 <CDC_Init_FS+0x24>)
 800874c:	4803      	ldr	r0, [pc, #12]	@ (800875c <CDC_Init_FS+0x20>)
 800874e:	f7fe fef2 	bl	8007536 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008752:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008754:	4618      	mov	r0, r3
 8008756:	bd80      	pop	{r7, pc}
 8008758:	200009dc 	.word	0x200009dc
 800875c:	20000318 	.word	0x20000318
 8008760:	200005dc 	.word	0x200005dc

08008764 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008768:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800876a:	4618      	mov	r0, r3
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr
	...

08008774 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
 8008780:	4613      	mov	r3, r2
 8008782:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b23      	cmp	r3, #35	@ 0x23
 8008788:	d84a      	bhi.n	8008820 <CDC_Control_FS+0xac>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <CDC_Control_FS+0x1c>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	08008821 	.word	0x08008821
 8008794:	08008821 	.word	0x08008821
 8008798:	08008821 	.word	0x08008821
 800879c:	08008821 	.word	0x08008821
 80087a0:	08008821 	.word	0x08008821
 80087a4:	08008821 	.word	0x08008821
 80087a8:	08008821 	.word	0x08008821
 80087ac:	08008821 	.word	0x08008821
 80087b0:	08008821 	.word	0x08008821
 80087b4:	08008821 	.word	0x08008821
 80087b8:	08008821 	.word	0x08008821
 80087bc:	08008821 	.word	0x08008821
 80087c0:	08008821 	.word	0x08008821
 80087c4:	08008821 	.word	0x08008821
 80087c8:	08008821 	.word	0x08008821
 80087cc:	08008821 	.word	0x08008821
 80087d0:	08008821 	.word	0x08008821
 80087d4:	08008821 	.word	0x08008821
 80087d8:	08008821 	.word	0x08008821
 80087dc:	08008821 	.word	0x08008821
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008821 	.word	0x08008821
 80087e8:	08008821 	.word	0x08008821
 80087ec:	08008821 	.word	0x08008821
 80087f0:	08008821 	.word	0x08008821
 80087f4:	08008821 	.word	0x08008821
 80087f8:	08008821 	.word	0x08008821
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008821 	.word	0x08008821
 8008804:	08008821 	.word	0x08008821
 8008808:	08008821 	.word	0x08008821
 800880c:	08008821 	.word	0x08008821
 8008810:	08008821 	.word	0x08008821
 8008814:	08008821 	.word	0x08008821
 8008818:	08008821 	.word	0x08008821
 800881c:	08008821 	.word	0x08008821
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008820:	bf00      	nop
  }

  return (USBD_OK);
 8008822:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop

08008830 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4805      	ldr	r0, [pc, #20]	@ (8008854 <CDC_Receive_FS+0x24>)
 800883e:	f7fe fe7a 	bl	8007536 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008842:	4804      	ldr	r0, [pc, #16]	@ (8008854 <CDC_Receive_FS+0x24>)
 8008844:	f7fe fe8a 	bl	800755c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008848:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000318 	.word	0x20000318

08008858 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2212      	movs	r2, #18
 8008868:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	@ (8008878 <USBD_FS_DeviceDescriptor+0x20>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000148 	.word	0x20000148

0800887c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2204      	movs	r2, #4
 800888c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800888e:	4b03      	ldr	r3, [pc, #12]	@ (800889c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	2000015c 	.word	0x2000015c

080088a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	4907      	ldr	r1, [pc, #28]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80088b6:	4808      	ldr	r0, [pc, #32]	@ (80088d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80088b8:	f7ff fe33 	bl	8008522 <USBD_GetString>
 80088bc:	e004      	b.n	80088c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4904      	ldr	r1, [pc, #16]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80088c2:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80088c4:	f7ff fe2d 	bl	8008522 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c8:	4b02      	ldr	r3, [pc, #8]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000ddc 	.word	0x20000ddc
 80088d8:	08009018 	.word	0x08009018

080088dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	4904      	ldr	r1, [pc, #16]	@ (80088fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088ec:	4804      	ldr	r0, [pc, #16]	@ (8008900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088ee:	f7ff fe18 	bl	8008522 <USBD_GetString>
  return USBD_StrDesc;
 80088f2:	4b02      	ldr	r3, [pc, #8]	@ (80088fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000ddc 	.word	0x20000ddc
 8008900:	08009030 	.word	0x08009030

08008904 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	221a      	movs	r2, #26
 8008914:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008916:	f000 f843 	bl	80089a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800891a:	4b02      	ldr	r3, [pc, #8]	@ (8008924 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000160 	.word	0x20000160

08008928 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4907      	ldr	r1, [pc, #28]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
 800893e:	4808      	ldr	r0, [pc, #32]	@ (8008960 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008940:	f7ff fdef 	bl	8008522 <USBD_GetString>
 8008944:	e004      	b.n	8008950 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	4904      	ldr	r1, [pc, #16]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
 800894a:	4805      	ldr	r0, [pc, #20]	@ (8008960 <USBD_FS_ConfigStrDescriptor+0x38>)
 800894c:	f7ff fde9 	bl	8008522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008950:	4b02      	ldr	r3, [pc, #8]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20000ddc 	.word	0x20000ddc
 8008960:	08009044 	.word	0x08009044

08008964 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	@ (800899c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800897c:	f7ff fdd1 	bl	8008522 <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	@ (800899c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008988:	f7ff fdcb 	bl	8008522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000ddc 	.word	0x20000ddc
 800899c:	08009050 	.word	0x08009050

080089a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4413      	add	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089b4:	2208      	movs	r2, #8
 80089b6:	4906      	ldr	r1, [pc, #24]	@ (80089d0 <Get_SerialNum+0x30>)
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f80d 	bl	80089d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089be:	2204      	movs	r2, #4
 80089c0:	4904      	ldr	r1, [pc, #16]	@ (80089d4 <Get_SerialNum+0x34>)
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f808 	bl	80089d8 <IntToUnicode>
  }
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000162 	.word	0x20000162
 80089d4:	20000172 	.word	0x20000172

080089d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
 80089ee:	e027      	b.n	8008a40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	0f1b      	lsrs	r3, r3, #28
 80089f4:	2b09      	cmp	r3, #9
 80089f6:	d80b      	bhi.n	8008a10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	0f1b      	lsrs	r3, r3, #28
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	4619      	mov	r1, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	440b      	add	r3, r1
 8008a08:	3230      	adds	r2, #48	@ 0x30
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e00a      	b.n	8008a26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	0f1b      	lsrs	r3, r3, #28
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	440b      	add	r3, r1
 8008a20:	3237      	adds	r2, #55	@ 0x37
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	3301      	adds	r3, #1
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	75fb      	strb	r3, [r7, #23]
 8008a40:	7dfa      	ldrb	r2, [r7, #23]
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d3d3      	bcc.n	80089f0 <IntToUnicode+0x18>
  }
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr

08008a54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0d      	ldr	r2, [pc, #52]	@ (8008a98 <HAL_PCD_MspInit+0x44>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d113      	bne.n	8008a8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a66:	4b0d      	ldr	r3, [pc, #52]	@ (8008a9c <HAL_PCD_MspInit+0x48>)
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a9c <HAL_PCD_MspInit+0x48>)
 8008a6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a70:	61d3      	str	r3, [r2, #28]
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <HAL_PCD_MspInit+0x48>)
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	2014      	movs	r0, #20
 8008a84:	f7f8 fc31 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a88:	2014      	movs	r0, #20
 8008a8a:	f7f8 fc4a 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40005c00 	.word	0x40005c00
 8008a9c:	40021000 	.word	0x40021000

08008aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fe06 	bl	80076c8 <USBD_LL_SetupStage>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	440b      	add	r3, r1
 8008ae4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7fe fe38 	bl	8007762 <USBD_LL_DataOutStage>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	440b      	add	r3, r1
 8008b1a:	333c      	adds	r3, #60	@ 0x3c
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	4619      	mov	r1, r3
 8008b22:	f7fe fe8f 	bl	8007844 <USBD_LL_DataInStage>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe ff9f 	bl	8007a80 <USBD_LL_SOF>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b52:	2301      	movs	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d001      	beq.n	8008b62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b5e:	f7f8 f887 	bl	8000c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008b68:	7bfa      	ldrb	r2, [r7, #15]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe ff4f 	bl	8007a10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe ff08 	bl	800798e <USBD_LL_Reset>
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe ff49 	bl	8007a2e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ba4:	4b04      	ldr	r3, [pc, #16]	@ (8008bb8 <HAL_PCD_SuspendCallback+0x30>)
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	4a03      	ldr	r2, [pc, #12]	@ (8008bb8 <HAL_PCD_SuspendCallback+0x30>)
 8008baa:	f043 0306 	orr.w	r3, r3, #6
 8008bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed00 	.word	0xe000ed00

08008bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe ff43 	bl	8007a56 <USBD_LL_Resume>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008be0:	4a28      	ldr	r2, [pc, #160]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a26      	ldr	r2, [pc, #152]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008bec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008bf0:	4b24      	ldr	r3, [pc, #144]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008bf2:	4a25      	ldr	r2, [pc, #148]	@ (8008c88 <USBD_LL_Init+0xb0>)
 8008bf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008bf6:	4b23      	ldr	r3, [pc, #140]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008bfc:	4b21      	ldr	r3, [pc, #132]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008bfe:	2202      	movs	r2, #2
 8008c00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c02:	4b20      	ldr	r3, [pc, #128]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c08:	4b1e      	ldr	r3, [pc, #120]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c14:	481b      	ldr	r0, [pc, #108]	@ (8008c84 <USBD_LL_Init+0xac>)
 8008c16:	f7f8 fd3b 	bl	8001690 <HAL_PCD_Init>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008c20:	f7f8 f826 	bl	8000c70 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c2a:	2318      	movs	r3, #24
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	f7fa fa59 	bl	80030e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c3a:	2358      	movs	r3, #88	@ 0x58
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2180      	movs	r1, #128	@ 0x80
 8008c40:	f7fa fa51 	bl	80030e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c4a:	23c0      	movs	r3, #192	@ 0xc0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2181      	movs	r1, #129	@ 0x81
 8008c50:	f7fa fa49 	bl	80030e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c5a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2101      	movs	r1, #1
 8008c62:	f7fa fa40 	bl	80030e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c70:	2200      	movs	r2, #0
 8008c72:	2182      	movs	r1, #130	@ 0x82
 8008c74:	f7fa fa37 	bl	80030e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000fdc 	.word	0x20000fdc
 8008c88:	40005c00 	.word	0x40005c00

08008c8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f8 fdf3 	bl	800188e <HAL_PCD_Start>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f94e 	bl	8008f50 <USBD_Get_USB_Status>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	4608      	mov	r0, r1
 8008ccc:	4611      	mov	r1, r2
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	70fb      	strb	r3, [r7, #3]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70bb      	strb	r3, [r7, #2]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cea:	78bb      	ldrb	r3, [r7, #2]
 8008cec:	883a      	ldrh	r2, [r7, #0]
 8008cee:	78f9      	ldrb	r1, [r7, #3]
 8008cf0:	f7f8 ff48 	bl	8001b84 <HAL_PCD_EP_Open>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f928 	bl	8008f50 <USBD_Get_USB_Status>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f8 ff86 	bl	8001c3e <HAL_PCD_EP_Close>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f909 	bl	8008f50 <USBD_Get_USB_Status>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7f9 f82e 	bl	8001dcc <HAL_PCD_EP_SetStall>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 f8ea 	bl	8008f50 <USBD_Get_USB_Status>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f9 f86f 	bl	8001e8c <HAL_PCD_EP_ClrStall>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f8cb 	bl	8008f50 <USBD_Get_USB_Status>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008dda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da0c      	bge.n	8008dfe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	440b      	add	r3, r1
 8008df8:	3302      	adds	r3, #2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	e00b      	b.n	8008e16 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e04:	68f9      	ldr	r1, [r7, #12]
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	440b      	add	r3, r1
 8008e10:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008e14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr

08008e20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f8 fe7b 	bl	8001b3a <HAL_PCD_SetAddress>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f880 	bl	8008f50 <USBD_Get_USB_Status>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	72fb      	strb	r3, [r7, #11]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e80:	893b      	ldrh	r3, [r7, #8]
 8008e82:	7af9      	ldrb	r1, [r7, #11]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	f7f8 ff6a 	bl	8001d5e <HAL_PCD_EP_Transmit>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f85d 	bl	8008f50 <USBD_Get_USB_Status>
 8008e96:	4603      	mov	r3, r0
 8008e98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	72fb      	strb	r3, [r7, #11]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ec6:	893b      	ldrh	r3, [r7, #8]
 8008ec8:	7af9      	ldrb	r1, [r7, #11]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	f7f8 feff 	bl	8001cce <HAL_PCD_EP_Receive>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f83a 	bl	8008f50 <USBD_Get_USB_Status>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ee0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7f8 ff15 	bl	8001d30 <HAL_PCD_EP_GetRxCount>
 8008f06:	4603      	mov	r3, r0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f18:	4b02      	ldr	r3, [pc, #8]	@ (8008f24 <USBD_static_malloc+0x14>)
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr
 8008f24:	200012cc 	.word	0x200012cc

08008f28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr

08008f3a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bc80      	pop	{r7}
 8008f4e:	4770      	bx	lr

08008f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d817      	bhi.n	8008f94 <USBD_Get_USB_Status+0x44>
 8008f64:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <USBD_Get_USB_Status+0x1c>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008f7d 	.word	0x08008f7d
 8008f70:	08008f83 	.word	0x08008f83
 8008f74:	08008f89 	.word	0x08008f89
 8008f78:	08008f8f 	.word	0x08008f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f80:	e00b      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f82:	2302      	movs	r3, #2
 8008f84:	73fb      	strb	r3, [r7, #15]
    break;
 8008f86:	e008      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8c:	e005      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	73fb      	strb	r3, [r7, #15]
    break;
 8008f92:	e002      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f94:	2302      	movs	r3, #2
 8008f96:	73fb      	strb	r3, [r7, #15]
    break;
 8008f98:	bf00      	nop
  }
  return usb_status;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop

08008fa8 <memset>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4402      	add	r2, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d100      	bne.n	8008fb2 <memset+0xa>
 8008fb0:	4770      	bx	lr
 8008fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb6:	e7f9      	b.n	8008fac <memset+0x4>

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	2600      	movs	r6, #0
 8008fbc:	4d0c      	ldr	r5, [pc, #48]	@ (8008ff0 <__libc_init_array+0x38>)
 8008fbe:	4c0d      	ldr	r4, [pc, #52]	@ (8008ff4 <__libc_init_array+0x3c>)
 8008fc0:	1b64      	subs	r4, r4, r5
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	f000 f81a 	bl	8009000 <_init>
 8008fcc:	2600      	movs	r6, #0
 8008fce:	4d0a      	ldr	r5, [pc, #40]	@ (8008ff8 <__libc_init_array+0x40>)
 8008fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8008ffc <__libc_init_array+0x44>)
 8008fd2:	1b64      	subs	r4, r4, r5
 8008fd4:	10a4      	asrs	r4, r4, #2
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	08009084 	.word	0x08009084
 8008ff4:	08009084 	.word	0x08009084
 8008ff8:	08009084 	.word	0x08009084
 8008ffc:	08009088 	.word	0x08009088

08009000 <_init>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr

0800900c <_fini>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr
