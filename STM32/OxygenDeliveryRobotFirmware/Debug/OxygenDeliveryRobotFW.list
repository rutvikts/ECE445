
OxygenDeliveryRobotFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d4  080096d4  0000b17c  2**0
                  CONTENTS
  4 .ARM          00000000  080096d4  080096d4  0000b17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096d4  080096d4  0000b17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d4  080096d4  0000a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096d8  080096d8  0000a6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080096dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000180  08009858  0000b180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  08009858  0000b544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac7  00000000  00000000  0000b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386b  00000000  00000000  0001ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000224d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2c  00000000  00000000  00023788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa60  00000000  00000000  000245b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f7  00000000  00000000  0003f014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebaf  00000000  00000000  00055a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e45ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c54  00000000  00000000  000e4600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e9254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08009650 	.word	0x08009650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08009650 	.word	0x08009650

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b27      	ldr	r3, [pc, #156]	@ (8000200 <MX_GPIO_Init+0xb4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a26      	ldr	r2, [pc, #152]	@ (8000200 <MX_GPIO_Init+0xb4>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b24      	ldr	r3, [pc, #144]	@ (8000200 <MX_GPIO_Init+0xb4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b21      	ldr	r3, [pc, #132]	@ (8000200 <MX_GPIO_Init+0xb4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a20      	ldr	r2, [pc, #128]	@ (8000200 <MX_GPIO_Init+0xb4>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1e      	ldr	r3, [pc, #120]	@ (8000200 <MX_GPIO_Init+0xb4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1b      	ldr	r3, [pc, #108]	@ (8000200 <MX_GPIO_Init+0xb4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1a      	ldr	r2, [pc, #104]	@ (8000200 <MX_GPIO_Init+0xb4>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b18      	ldr	r3, [pc, #96]	@ (8000200 <MX_GPIO_Init+0xb4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_RasPi_Pin|SPI1_NSS_ESP2_Pin|SPI1_NSS_ESP1_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	211c      	movs	r1, #28
 80001ac:	4815      	ldr	r0, [pc, #84]	@ (8000204 <MX_GPIO_Init+0xb8>)
 80001ae:	f001 fb16 	bl	80017de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS_RasPi_Pin|SPI1_NSS_ESP2_Pin|SPI1_NSS_ESP1_Pin;
 80001b2:	231c      	movs	r3, #28
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2301      	movs	r3, #1
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001be:	2303      	movs	r3, #3
 80001c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	4619      	mov	r1, r3
 80001c8:	480e      	ldr	r0, [pc, #56]	@ (8000204 <MX_GPIO_Init+0xb8>)
 80001ca:	f001 f96d 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80001ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <MX_GPIO_Init+0xbc>)
 80001d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	480a      	ldr	r0, [pc, #40]	@ (800020c <MX_GPIO_Init+0xc0>)
 80001e4:	f001 f960 	bl	80014a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2101      	movs	r1, #1
 80001ec:	2017      	movs	r0, #23
 80001ee:	f001 f924 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80001f2:	2017      	movs	r0, #23
 80001f4:	f001 f93d 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 80001f8:	bf00      	nop
 80001fa:	3720      	adds	r7, #32
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40021000 	.word	0x40021000
 8000204:	40010800 	.word	0x40010800
 8000208:	10110000 	.word	0x10110000
 800020c:	40010c00 	.word	0x40010c00

08000210 <MAP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	69b9      	ldr	r1, [r7, #24]
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	1a8a      	subs	r2, r1, r2
 800022a:	fb03 f202 	mul.w	r2, r3, r2
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1acb      	subs	r3, r1, r3
 8000234:	fbb2 f2f3 	udiv	r2, r2, r3
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	4413      	add	r3, r2
}
 800023c:	4618      	mov	r0, r3
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <mapChannel>:

int mapChannel(int speed, int minLimit, int maxLimit){
 8000246:	b580      	push	{r7, lr}
 8000248:	b086      	sub	sp, #24
 800024a:	af02      	add	r7, sp, #8
 800024c:	60f8      	str	r0, [r7, #12]
 800024e:	60b9      	str	r1, [r7, #8]
 8000250:	607a      	str	r2, [r7, #4]
	return MAP(speed, -20, 20, minLimit, maxLimit);
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	4613      	mov	r3, r2
 800025c:	2214      	movs	r2, #20
 800025e:	f06f 0113 	mvn.w	r1, #19
 8000262:	f7ff ffd5 	bl	8000210 <MAP>
 8000266:	4603      	mov	r3, r0
}
 8000268:	4618      	mov	r0, r3
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <update_encoder>:
	int64_t position;
	int64_t rpm;
	uint32_t last_counter_value;
}encoder_instance;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim){
 8000270:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(&htim2);
 800027c:	4b3d      	ldr	r3, [pc, #244]	@ (8000374 <update_encoder+0x104>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000282:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if(!first_time){
 8000284:	4b3c      	ldr	r3, [pc, #240]	@ (8000378 <update_encoder+0x108>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d106      	bne.n	800029a <update_encoder+0x2a>
		encoder_value ->velocity = 0;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8000292:	4b39      	ldr	r3, [pc, #228]	@ (8000378 <update_encoder+0x108>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e052      	b.n	8000340 <update_encoder+0xd0>
	}
	else{
		if(temp_counter == encoder_value ->last_counter_value){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d103      	bne.n	80002ac <update_encoder+0x3c>
			encoder_value ->velocity = 0;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	801a      	strh	r2, [r3, #0]
 80002aa:	e049      	b.n	8000340 <update_encoder+0xd0>
		}
		else if(temp_counter > encoder_value ->last_counter_value){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d922      	bls.n	80002fc <update_encoder+0x8c>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80002b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000374 <update_encoder+0x104>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	2b10      	cmp	r3, #16
 80002c2:	d110      	bne.n	80002e6 <update_encoder+0x76>
				encoder_value ->velocity = -encoder_value ->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(&htim2)-temp_counter);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000374 <update_encoder+0x104>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b21a      	sxth	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	801a      	strh	r2, [r3, #0]
 80002e4:	e02c      	b.n	8000340 <update_encoder+0xd0>
			}
			else{
				encoder_value ->velocity = temp_counter - encoder_value ->last_counter_value;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	801a      	strh	r2, [r3, #0]
 80002fa:	e021      	b.n	8000340 <update_encoder+0xd0>
			}
		}
		else{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80002fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <update_encoder+0x104>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0310 	and.w	r3, r3, #16
 8000306:	2b10      	cmp	r3, #16
 8000308:	d10a      	bne.n	8000320 <update_encoder+0xb0>
				encoder_value ->velocity = temp_counter - encoder_value ->last_counter_value;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	b29a      	uxth	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	b29b      	uxth	r3, r3
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b29b      	uxth	r3, r3
 8000318:	b21a      	sxth	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	801a      	strh	r2, [r3, #0]
 800031e:	e00f      	b.n	8000340 <update_encoder+0xd0>
			}
			else{
				encoder_value ->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(&htim2) - encoder_value ->last_counter_value);
 8000320:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <update_encoder+0x104>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000326:	b29a      	uxth	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	b29b      	uxth	r3, r3
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	b29a      	uxth	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4413      	add	r3, r2
 8000338:	b29b      	uxth	r3, r3
 800033a:	b21a      	sxth	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	encoder_value ->position += encoder_value ->velocity;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000346:	6879      	ldr	r1, [r7, #4]
 8000348:	f9b1 1000 	ldrsh.w	r1, [r1]
 800034c:	b209      	sxth	r1, r1
 800034e:	17c8      	asrs	r0, r1, #31
 8000350:	460c      	mov	r4, r1
 8000352:	4605      	mov	r5, r0
 8000354:	eb12 0804 	adds.w	r8, r2, r4
 8000358:	eb43 0905 	adc.w	r9, r3, r5
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoder_value ->last_counter_value = temp_counter;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	619a      	str	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000372:	4770      	bx	lr
 8000374:	20000290 	.word	0x20000290
 8000378:	200001ec 	.word	0x200001ec

0800037c <HAL_TIM_IC_CaptureCallback>:
encoder_instance enc_instance_mot1 = {0,0,0,0};
encoder_instance enc_instance_mot2 = {0,0,0,0};
encoder_instance enc_instance_mot3 = {0,0,0,0};


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	counter1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <HAL_TIM_IC_CaptureCallback+0x70>)
 800038c:	6013      	str	r3, [r2, #0]
	count1 = (int16_t) counter1;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <HAL_TIM_IC_CaptureCallback+0x70>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	b21a      	sxth	r2, r3
 8000394:	4b16      	ldr	r3, [pc, #88]	@ (80003f0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000396:	801a      	strh	r2, [r3, #0]

	counter2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000398:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <HAL_TIM_IC_CaptureCallback+0x78>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800039e:	4a16      	ldr	r2, [pc, #88]	@ (80003f8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80003a0:	6013      	str	r3, [r2, #0]
	count2 = (int16_t) counter2;
 80003a2:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	b21a      	sxth	r2, r3
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <HAL_TIM_IC_CaptureCallback+0x80>)
 80003aa:	801a      	strh	r2, [r3, #0]

	counter3 = __HAL_TIM_GET_COUNTER(&htim4);
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_TIM_IC_CaptureCallback+0x84>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_TIM_IC_CaptureCallback+0x88>)
 80003b4:	6013      	str	r3, [r2, #0]
	count3 = (int16_t) counter3;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <HAL_TIM_IC_CaptureCallback+0x88>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80003be:	801a      	strh	r2, [r3, #0]

	update_encoder(&enc_instance_mot1, &htim2);
 80003c0:	4909      	ldr	r1, [pc, #36]	@ (80003e8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80003c2:	4812      	ldr	r0, [pc, #72]	@ (800040c <HAL_TIM_IC_CaptureCallback+0x90>)
 80003c4:	f7ff ff54 	bl	8000270 <update_encoder>

	encoder_position = enc_instance_mot1.position;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <HAL_TIM_IC_CaptureCallback+0x90>)
 80003ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80003ce:	4910      	ldr	r1, [pc, #64]	@ (8000410 <HAL_TIM_IC_CaptureCallback+0x94>)
 80003d0:	e9c1 2300 	strd	r2, r3, [r1]
	encoder_velocity = enc_instance_mot1.velocity;
 80003d4:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <HAL_TIM_IC_CaptureCallback+0x90>)
 80003d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003da:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <HAL_TIM_IC_CaptureCallback+0x98>)
 80003dc:	801a      	strh	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000290 	.word	0x20000290
 80003ec:	2000019c 	.word	0x2000019c
 80003f0:	200001a0 	.word	0x200001a0
 80003f4:	200002d8 	.word	0x200002d8
 80003f8:	200001a4 	.word	0x200001a4
 80003fc:	200001a8 	.word	0x200001a8
 8000400:	20000320 	.word	0x20000320
 8000404:	200001ac 	.word	0x200001ac
 8000408:	200001b0 	.word	0x200001b0
 800040c:	200001c0 	.word	0x200001c0
 8000410:	200001b8 	.word	0x200001b8
 8000414:	200001b2 	.word	0x200001b2

08000418 <SPI_Enable>:
	GPIOA->CRL |= (3<<16);    // PA4 used for CS, GPIO Output

}

void SPI_Enable (void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	SPI1->CR1 |= (1<<6);   // SPE=1, Peripheral enabled
 800041c:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <SPI_Enable+0x18>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a03      	ldr	r2, [pc, #12]	@ (8000430 <SPI_Enable+0x18>)
 8000422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40013000 	.word	0x40013000

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 fea2 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 fa12 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f7ff fe84 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000444:	f000 fa96 	bl	8000974 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000448:	f000 fba8 	bl	8000b9c <MX_TIM1_Init>
  MX_TIM2_Init();
 800044c:	f000 fc62 	bl	8000d14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000450:	f000 fcb4 	bl	8000dbc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000454:	f000 fd06 	bl	8000e64 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000458:	f008 fc68 	bl	8008d2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Setting up PWM Timer
 800045c:	2100      	movs	r1, #0
 800045e:	48b7      	ldr	r0, [pc, #732]	@ (800073c <main+0x308>)
 8000460:	f003 fd1c 	bl	8003e9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Setting up PWM Timer
 8000464:	2104      	movs	r1, #4
 8000466:	48b5      	ldr	r0, [pc, #724]	@ (800073c <main+0x308>)
 8000468:	f003 fd18 	bl	8003e9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Setting up PWM Timer
 800046c:	2108      	movs	r1, #8
 800046e:	48b3      	ldr	r0, [pc, #716]	@ (800073c <main+0x308>)
 8000470:	f003 fd14 	bl	8003e9c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Setting up Encoders
 8000474:	213c      	movs	r1, #60	@ 0x3c
 8000476:	48b2      	ldr	r0, [pc, #712]	@ (8000740 <main+0x30c>)
 8000478:	f003 feb8 	bl	80041ec <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800047c:	213c      	movs	r1, #60	@ 0x3c
 800047e:	48b1      	ldr	r0, [pc, #708]	@ (8000744 <main+0x310>)
 8000480:	f003 feb4 	bl	80041ec <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000484:	213c      	movs	r1, #60	@ 0x3c
 8000486:	48b0      	ldr	r0, [pc, #704]	@ (8000748 <main+0x314>)
 8000488:	f003 feb0 	bl	80041ec <HAL_TIM_Encoder_Start_IT>


	SPI_Enable();
 800048c:	f7ff ffc4 	bl	8000418 <SPI_Enable>
//	SPI_Receive (RxData, 3);  // receive 6 bytes data
//	CS_Disable ();  // pull the pin high
//	HAL_Delay(1000);

	  //proper
	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 8000490:	4bae      	ldr	r3, [pc, #696]	@ (800074c <main+0x318>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000498:	f240 414c 	movw	r1, #1100	@ 0x44c
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fed2 	bl	8000246 <mapChannel>
 80004a2:	4602      	mov	r2, r0
 80004a4:	4ba5      	ldr	r3, [pc, #660]	@ (800073c <main+0x308>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 80004aa:	4ba9      	ldr	r3, [pc, #676]	@ (8000750 <main+0x31c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f240 725c 	movw	r2, #1884	@ 0x75c
 80004b2:	f240 414c 	movw	r1, #1100	@ 0x44c
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fec5 	bl	8000246 <mapChannel>
 80004bc:	4602      	mov	r2, r0
 80004be:	4b9f      	ldr	r3, [pc, #636]	@ (800073c <main+0x308>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 80004c4:	4ba3      	ldr	r3, [pc, #652]	@ (8000754 <main+0x320>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f240 725c 	movw	r2, #1884	@ 0x75c
 80004cc:	f240 414c 	movw	r1, #1100	@ 0x44c
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff feb8 	bl	8000246 <mapChannel>
 80004d6:	4602      	mov	r2, r0
 80004d8:	4b98      	ldr	r3, [pc, #608]	@ (800073c <main+0x308>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 80004de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80004e2:	f000 feaf 	bl	8001244 <HAL_Delay>


	// Go Forward
	M1_Speed = 0;
 80004e6:	4b99      	ldr	r3, [pc, #612]	@ (800074c <main+0x318>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
	M2_Speed = -10;
 80004ec:	4b98      	ldr	r3, [pc, #608]	@ (8000750 <main+0x31c>)
 80004ee:	f06f 0209 	mvn.w	r2, #9
 80004f2:	601a      	str	r2, [r3, #0]
	M3_Speed = 10;
 80004f4:	4b97      	ldr	r3, [pc, #604]	@ (8000754 <main+0x320>)
 80004f6:	220a      	movs	r2, #10
 80004f8:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 80004fa:	4b94      	ldr	r3, [pc, #592]	@ (800074c <main+0x318>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000502:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fe9d 	bl	8000246 <mapChannel>
 800050c:	4602      	mov	r2, r0
 800050e:	4b8b      	ldr	r3, [pc, #556]	@ (800073c <main+0x308>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 8000514:	4b8e      	ldr	r3, [pc, #568]	@ (8000750 <main+0x31c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f240 725c 	movw	r2, #1884	@ 0x75c
 800051c:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff fe90 	bl	8000246 <mapChannel>
 8000526:	4602      	mov	r2, r0
 8000528:	4b84      	ldr	r3, [pc, #528]	@ (800073c <main+0x308>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 800052e:	4b89      	ldr	r3, [pc, #548]	@ (8000754 <main+0x320>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000536:	f240 414c 	movw	r1, #1100	@ 0x44c
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe83 	bl	8000246 <mapChannel>
 8000540:	4602      	mov	r2, r0
 8000542:	4b7e      	ldr	r3, [pc, #504]	@ (800073c <main+0x308>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 8000548:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800054c:	f000 fe7a 	bl	8001244 <HAL_Delay>


	// Pause
	M1_Speed = 0;
 8000550:	4b7e      	ldr	r3, [pc, #504]	@ (800074c <main+0x318>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
	M2_Speed = 0;
 8000556:	4b7e      	ldr	r3, [pc, #504]	@ (8000750 <main+0x31c>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
	M3_Speed = 0;
 800055c:	4b7d      	ldr	r3, [pc, #500]	@ (8000754 <main+0x320>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 8000562:	4b7a      	ldr	r3, [pc, #488]	@ (800074c <main+0x318>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f240 725c 	movw	r2, #1884	@ 0x75c
 800056a:	f240 414c 	movw	r1, #1100	@ 0x44c
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe69 	bl	8000246 <mapChannel>
 8000574:	4602      	mov	r2, r0
 8000576:	4b71      	ldr	r3, [pc, #452]	@ (800073c <main+0x308>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 800057c:	4b74      	ldr	r3, [pc, #464]	@ (8000750 <main+0x31c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000584:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe5c 	bl	8000246 <mapChannel>
 800058e:	4602      	mov	r2, r0
 8000590:	4b6a      	ldr	r3, [pc, #424]	@ (800073c <main+0x308>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 8000596:	4b6f      	ldr	r3, [pc, #444]	@ (8000754 <main+0x320>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f240 725c 	movw	r2, #1884	@ 0x75c
 800059e:	f240 414c 	movw	r1, #1100	@ 0x44c
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fe4f 	bl	8000246 <mapChannel>
 80005a8:	4602      	mov	r2, r0
 80005aa:	4b64      	ldr	r3, [pc, #400]	@ (800073c <main+0x308>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 80005b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b4:	f000 fe46 	bl	8001244 <HAL_Delay>

	// Go Backwards
	M1_Speed = 0;
 80005b8:	4b64      	ldr	r3, [pc, #400]	@ (800074c <main+0x318>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	M2_Speed = 10;
 80005be:	4b64      	ldr	r3, [pc, #400]	@ (8000750 <main+0x31c>)
 80005c0:	220a      	movs	r2, #10
 80005c2:	601a      	str	r2, [r3, #0]
	M3_Speed = -10;
 80005c4:	4b63      	ldr	r3, [pc, #396]	@ (8000754 <main+0x320>)
 80005c6:	f06f 0209 	mvn.w	r2, #9
 80005ca:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 80005cc:	4b5f      	ldr	r3, [pc, #380]	@ (800074c <main+0x318>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f240 725c 	movw	r2, #1884	@ 0x75c
 80005d4:	f240 414c 	movw	r1, #1100	@ 0x44c
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe34 	bl	8000246 <mapChannel>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b56      	ldr	r3, [pc, #344]	@ (800073c <main+0x308>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 80005e6:	4b5a      	ldr	r3, [pc, #360]	@ (8000750 <main+0x31c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f240 725c 	movw	r2, #1884	@ 0x75c
 80005ee:	f240 414c 	movw	r1, #1100	@ 0x44c
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe27 	bl	8000246 <mapChannel>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b50      	ldr	r3, [pc, #320]	@ (800073c <main+0x308>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 8000600:	4b54      	ldr	r3, [pc, #336]	@ (8000754 <main+0x320>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000608:	f240 414c 	movw	r1, #1100	@ 0x44c
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe1a 	bl	8000246 <mapChannel>
 8000612:	4602      	mov	r2, r0
 8000614:	4b49      	ldr	r3, [pc, #292]	@ (800073c <main+0x308>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 800061a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800061e:	f000 fe11 	bl	8001244 <HAL_Delay>

	// Pause
	M1_Speed = 0;
 8000622:	4b4a      	ldr	r3, [pc, #296]	@ (800074c <main+0x318>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	M2_Speed = 0;
 8000628:	4b49      	ldr	r3, [pc, #292]	@ (8000750 <main+0x31c>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
	M3_Speed = 0;
 800062e:	4b49      	ldr	r3, [pc, #292]	@ (8000754 <main+0x320>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 8000634:	4b45      	ldr	r3, [pc, #276]	@ (800074c <main+0x318>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f240 725c 	movw	r2, #1884	@ 0x75c
 800063c:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe00 	bl	8000246 <mapChannel>
 8000646:	4602      	mov	r2, r0
 8000648:	4b3c      	ldr	r3, [pc, #240]	@ (800073c <main+0x308>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 800064e:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <main+0x31c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000656:	f240 414c 	movw	r1, #1100	@ 0x44c
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdf3 	bl	8000246 <mapChannel>
 8000660:	4602      	mov	r2, r0
 8000662:	4b36      	ldr	r3, [pc, #216]	@ (800073c <main+0x308>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 8000668:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <main+0x320>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000670:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fde6 	bl	8000246 <mapChannel>
 800067a:	4602      	mov	r2, r0
 800067c:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <main+0x308>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 8000682:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000686:	f000 fddd 	bl	8001244 <HAL_Delay>

	// Go Left
	M1_Speed = 10;
 800068a:	4b30      	ldr	r3, [pc, #192]	@ (800074c <main+0x318>)
 800068c:	220a      	movs	r2, #10
 800068e:	601a      	str	r2, [r3, #0]
	M2_Speed = -5;
 8000690:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <main+0x31c>)
 8000692:	f06f 0204 	mvn.w	r2, #4
 8000696:	601a      	str	r2, [r3, #0]
	M3_Speed = -5;
 8000698:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <main+0x320>)
 800069a:	f06f 0204 	mvn.w	r2, #4
 800069e:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <main+0x318>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f240 725c 	movw	r2, #1884	@ 0x75c
 80006a8:	f240 414c 	movw	r1, #1100	@ 0x44c
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fdca 	bl	8000246 <mapChannel>
 80006b2:	4602      	mov	r2, r0
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <main+0x308>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <main+0x31c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f240 725c 	movw	r2, #1884	@ 0x75c
 80006c2:	f240 414c 	movw	r1, #1100	@ 0x44c
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fdbd 	bl	8000246 <mapChannel>
 80006cc:	4602      	mov	r2, r0
 80006ce:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <main+0x308>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <main+0x320>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f240 725c 	movw	r2, #1884	@ 0x75c
 80006dc:	f240 414c 	movw	r1, #1100	@ 0x44c
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fdb0 	bl	8000246 <mapChannel>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <main+0x308>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 80006ee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006f2:	f000 fda7 	bl	8001244 <HAL_Delay>

	// Pause
	M1_Speed = 0;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <main+0x318>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
	M2_Speed = 0;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <main+0x31c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	M3_Speed = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <main+0x320>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <main+0x318>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000710:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd96 	bl	8000246 <mapChannel>
 800071a:	4602      	mov	r2, r0
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <main+0x308>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <main+0x31c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f240 725c 	movw	r2, #1884	@ 0x75c
 800072a:	f240 414c 	movw	r1, #1100	@ 0x44c
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd89 	bl	8000246 <mapChannel>
 8000734:	4602      	mov	r2, r0
 8000736:	4b01      	ldr	r3, [pc, #4]	@ (800073c <main+0x308>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	e00d      	b.n	8000758 <main+0x324>
 800073c:	20000248 	.word	0x20000248
 8000740:	20000290 	.word	0x20000290
 8000744:	200002d8 	.word	0x200002d8
 8000748:	20000320 	.word	0x20000320
 800074c:	200001e0 	.word	0x200001e0
 8000750:	200001e4 	.word	0x200001e4
 8000754:	200001e8 	.word	0x200001e8
 8000758:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 800075a:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <main+0x420>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000762:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd6d 	bl	8000246 <mapChannel>
 800076c:	4602      	mov	r2, r0
 800076e:	4b3a      	ldr	r3, [pc, #232]	@ (8000858 <main+0x424>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 8000774:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000778:	f000 fd64 	bl	8001244 <HAL_Delay>

	// Go Right
	M1_Speed = -10;
 800077c:	4b37      	ldr	r3, [pc, #220]	@ (800085c <main+0x428>)
 800077e:	f06f 0209 	mvn.w	r2, #9
 8000782:	601a      	str	r2, [r3, #0]
	M2_Speed = 5;
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <main+0x42c>)
 8000786:	2205      	movs	r2, #5
 8000788:	601a      	str	r2, [r3, #0]
	M3_Speed = 5;
 800078a:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <main+0x420>)
 800078c:	2205      	movs	r2, #5
 800078e:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 8000790:	4b32      	ldr	r3, [pc, #200]	@ (800085c <main+0x428>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000798:	f240 414c 	movw	r1, #1100	@ 0x44c
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd52 	bl	8000246 <mapChannel>
 80007a2:	4602      	mov	r2, r0
 80007a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000858 <main+0x424>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 80007aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <main+0x42c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f240 725c 	movw	r2, #1884	@ 0x75c
 80007b2:	f240 414c 	movw	r1, #1100	@ 0x44c
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd45 	bl	8000246 <mapChannel>
 80007bc:	4602      	mov	r2, r0
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <main+0x424>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 80007c4:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <main+0x420>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f240 725c 	movw	r2, #1884	@ 0x75c
 80007cc:	f240 414c 	movw	r1, #1100	@ 0x44c
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fd38 	bl	8000246 <mapChannel>
 80007d6:	4602      	mov	r2, r0
 80007d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <main+0x424>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 80007de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80007e2:	f000 fd2f 	bl	8001244 <HAL_Delay>

	// Pause
	M1_Speed = 0;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <main+0x428>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	M2_Speed = 0;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <main+0x42c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
	M3_Speed = 0;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <main+0x420>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]

	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <main+0x428>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000800:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd1e 	bl	8000246 <mapChannel>
 800080a:	4602      	mov	r2, r0
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <main+0x424>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CCR2 = mapChannel(M2_Speed, 1100, 1884);
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <main+0x42c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f240 725c 	movw	r2, #1884	@ 0x75c
 800081a:	f240 414c 	movw	r1, #1100	@ 0x44c
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd11 	bl	8000246 <mapChannel>
 8000824:	4602      	mov	r2, r0
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <main+0x424>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance->CCR3 = mapChannel(M3_Speed, 1100, 1884);
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <main+0x420>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f240 725c 	movw	r2, #1884	@ 0x75c
 8000834:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd04 	bl	8000246 <mapChannel>
 800083e:	4602      	mov	r2, r0
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <main+0x424>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(3000);
 8000846:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800084a:	f000 fcfb 	bl	8001244 <HAL_Delay>
	htim1.Instance->CCR1 = mapChannel(M1_Speed, 1100, 1884); // current, minimum, maximum, default
 800084e:	bf00      	nop
 8000850:	e61e      	b.n	8000490 <main+0x5c>
 8000852:	bf00      	nop
 8000854:	200001e8 	.word	0x200001e8
 8000858:	20000248 	.word	0x20000248
 800085c:	200001e0 	.word	0x200001e0
 8000860:	200001e4 	.word	0x200001e4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	2228      	movs	r2, #40	@ 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f008 fec0 	bl	80095f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fd2e 	bl	800331c <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008c6:	f000 f84f 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ff9a 	bl	8003820 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008f2:	f000 f839 	bl	8000968 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008f6:	2310      	movs	r3, #16
 80008f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f8e9 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800090c:	f000 f82c 	bl	8000968 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3750      	adds	r7, #80	@ 0x50
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Limit Switch Interrupt Functionality
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]

	if((GPIO_Pin == GPIO_PIN_9)) {
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000928:	d114      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x3c>
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_SET)){
 800092a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x48>)
 8000930:	f000 ff3e 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10d      	bne.n	8000956 <HAL_GPIO_EXTI_Callback+0x3e>
			 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x4c>)
 800093e:	f003 fb4f 	bl	8003fe0 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000942:	2104      	movs	r1, #4
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000946:	f003 fb4b 	bl	8003fe0 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800094a:	2108      	movs	r1, #8
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x4c>)
 800094e:	f003 fb47 	bl	8003fe0 <HAL_TIM_PWM_Stop>
	}
	else{
		__NOP();
	}

}
 8000952:	e000      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x3e>
		__NOP();
 8000954:	bf00      	nop
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010c00 	.word	0x40010c00
 8000964:	20000248 	.word	0x20000248

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_SPI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009a8:	2228      	movs	r2, #40	@ 0x28
 80009aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009c6:	f003 f93d 	bl	8003c44 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d0:	f7ff ffca 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200001f0 	.word	0x200001f0
 80009dc:	40013000 	.word	0x40013000

080009e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <HAL_SPI_MspInit+0x88>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d12f      	bne.n	8000a60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a30:	23a0      	movs	r3, #160	@ 0xa0
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <HAL_SPI_MspInit+0x90>)
 8000a44:	f000 fd30 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a48:	2340      	movs	r3, #64	@ 0x40
 8000a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_SPI_MspInit+0x90>)
 8000a5c:	f000 fd24 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_MspInit+0x60>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_MspInit+0x60>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 fb70 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b36:	f000 ffa8 	bl	8001a8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20001034 	.word	0x20001034

08000b44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b4c:	f000 fe60 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM2_IRQHandler+0x10>)
 8000b5a:	f003 fbf5 	bl	8004348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000290 	.word	0x20000290

08000b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM3_IRQHandler+0x10>)
 8000b6e:	f003 fbeb 	bl	8004348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002d8 	.word	0x200002d8

08000b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <TIM4_IRQHandler+0x10>)
 8000b82:	f003 fbe1 	bl	8004348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000320 	.word	0x20000320

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b096      	sub	sp, #88	@ 0x58
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 fd0f 	bl	80095f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bda:	4b4c      	ldr	r3, [pc, #304]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8000d10 <MX_TIM1_Init+0x174>)
 8000bde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000be0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000be2:	2247      	movs	r2, #71	@ 0x47
 8000be4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000bec:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000bee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000bf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfa:	4b44      	ldr	r3, [pc, #272]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b42      	ldr	r3, [pc, #264]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c06:	4841      	ldr	r0, [pc, #260]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c08:	f003 f8a0 	bl	8003d4c <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c12:	f7ff fea9 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c20:	4619      	mov	r1, r3
 8000c22:	483a      	ldr	r0, [pc, #232]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c24:	f003 fd5a 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c2e:	f7ff fe9b 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c32:	4836      	ldr	r0, [pc, #216]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c34:	f003 f8d9 	bl	8003dea <HAL_TIM_PWM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c3e:	f7ff fe93 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482e      	ldr	r0, [pc, #184]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c52:	f004 f8d3 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c5c:	f7ff fe84 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	@ 0x60
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 6000;
 8000c64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4821      	ldr	r0, [pc, #132]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000c88:	f003 fc66 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c92:	f7ff fe69 	bl	8000968 <Error_Handler>
  }
  sConfigOC.Pulse = 3000;
 8000c96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000ca6:	f003 fc57 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000cb0:	f7ff fe5a 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000cbe:	f003 fc4b 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000cc8:	f7ff fe4e 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000cf0:	f004 f8e2 	bl	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000cfa:	f7ff fe35 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cfe:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <MX_TIM1_Init+0x170>)
 8000d00:	f000 f9e4 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3758      	adds	r7, #88	@ 0x58
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000248 	.word	0x20000248
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	@ 0x30
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2224      	movs	r2, #36	@ 0x24
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fc68 	bl	80095f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000d84:	f003 f990 	bl	80040a8 <HAL_TIM_Encoder_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d8e:	f7ff fdeb 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_TIM2_Init+0xa4>)
 8000da0:	f004 f82c 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000daa:	f7ff fddd 	bl	8000968 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim2); // Start the interrupt
//  HAL_TIM_Base_Start(&htim2); // Start the timer
  /* USER CODE END TIM2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	@ 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000290 	.word	0x20000290

08000dbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2224      	movs	r2, #36	@ 0x24
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 fc14 	bl	80095f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000dda:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <MX_TIM3_Init+0xa4>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e16:	2301      	movs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000e2a:	f003 f93d 	bl	80040a8 <HAL_TIM_Encoder_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e34:	f7ff fd98 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_TIM3_Init+0xa0>)
 8000e46:	f003 ffd9 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e50:	f7ff fd8a 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	@ 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200002d8 	.word	0x200002d8
 8000e60:	40000400 	.word	0x40000400

08000e64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2224      	movs	r2, #36	@ 0x24
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f008 fbc0 	bl	80095f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e80:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000e82:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <MX_TIM4_Init+0xa4>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000ed2:	f003 f8e9 	bl	80040a8 <HAL_TIM_Encoder_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f7ff fd44 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_TIM4_Init+0xa0>)
 8000eee:	f003 ff85 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ef8:	f7ff fd36 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	@ 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000320 	.word	0x20000320
 8000f08:	40000800 	.word	0x40000800

08000f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <HAL_TIM_Base_MspInit+0x34>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40012c00 	.word	0x40012c00
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f66:	d12c      	bne.n	8000fc2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f68:	4b52      	ldr	r3, [pc, #328]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b4f      	ldr	r3, [pc, #316]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b4c      	ldr	r3, [pc, #304]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b49      	ldr	r3, [pc, #292]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH1_ME1_ChA_Pin|TIM2_CH2_ME1_ChB_Pin;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4843      	ldr	r0, [pc, #268]	@ (80010b8 <HAL_TIM_Encoder_MspInit+0x170>)
 8000fac:	f000 fa7c 	bl	80014a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	201c      	movs	r0, #28
 8000fb6:	f000 fa40 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fba:	201c      	movs	r0, #28
 8000fbc:	f000 fa59 	bl	8001472 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fc0:	e074      	b.n	80010ac <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80010bc <HAL_TIM_Encoder_MspInit+0x174>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13e      	bne.n	800104a <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fcc:	4b39      	ldr	r3, [pc, #228]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	4a38      	ldr	r2, [pc, #224]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	61d3      	str	r3, [r2, #28]
 8000fd8:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM3_CH1_ME2_ChA_Pin|TIM3_CH2_ME2_ChB_Pin;
 8000ffc:	2330      	movs	r3, #48	@ 0x30
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	482c      	ldr	r0, [pc, #176]	@ (80010c0 <HAL_TIM_Encoder_MspInit+0x178>)
 8001010:	f000 fa4a 	bl	80014a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
 800101a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
 8001022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001024:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
 800102a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800102c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001030:	637b      	str	r3, [r7, #52]	@ 0x34
 8001032:	4a24      	ldr	r2, [pc, #144]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001036:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	201d      	movs	r0, #29
 800103e:	f000 f9fc 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001042:	201d      	movs	r0, #29
 8001044:	f000 fa15 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 8001048:	e030      	b.n	80010ac <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1e      	ldr	r2, [pc, #120]	@ (80010c8 <HAL_TIM_Encoder_MspInit+0x180>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d12b      	bne.n	80010ac <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	61d3      	str	r3, [r2, #28]
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ME3_ChA_Pin|TIM4_CH2_ME3_ChB_Pin;
 8001084:	23c0      	movs	r3, #192	@ 0xc0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <HAL_TIM_Encoder_MspInit+0x178>)
 8001098:	f000 fa06 	bl	80014a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	201e      	movs	r0, #30
 80010a2:	f000 f9ca 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010a6:	201e      	movs	r0, #30
 80010a8:	f000 f9e3 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	@ 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40000400 	.word	0x40000400
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40000800 	.word	0x40000800

080010cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <HAL_TIM_MspPostInit+0x5c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d118      	bne.n	800111e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_TIM_MspPostInit+0x60>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <HAL_TIM_MspPostInit+0x60>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <HAL_TIM_MspPostInit+0x60>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1__PWM_Motor_1_Pin|TIM1_CH2__PWM_Motor_2_Pin|TIM1_CH3__PWM_Motor_3_Pin;
 8001104:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_TIM_MspPostInit+0x64>)
 800111a:	f000 f9c5 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff fd2c 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113a:	490c      	ldr	r1, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800113c:	4a0c      	ldr	r2, [pc, #48]	@ (8001170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001150:	4c09      	ldr	r4, [pc, #36]	@ (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f008 fa53 	bl	8009608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff f967 	bl	8000434 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001170:	080096dc 	.word	0x080096dc
  ldr r2, =_sbss
 8001174:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001178:	20001544 	.word	0x20001544

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f947 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fc6a 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f95f 	bl	800148e <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e8:	f000 f927 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	@ (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000008 	.word	0x20000008
 800122c:	20000368 	.word	0x20000368

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000368 	.word	0x20000368

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4906      	ldr	r1, [pc, #24]	@ (8001324 <__NVIC_EnableIRQ+0x34>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001404:	f7ff ff90 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff2d 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff42 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff35 	bl	80012f0 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b08b      	sub	sp, #44	@ 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e169      	b.n	8001790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8158 	bne.w	800178a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a9a      	ldr	r2, [pc, #616]	@ (8001748 <HAL_GPIO_Init+0x2a0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d05e      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014e4:	4a98      	ldr	r2, [pc, #608]	@ (8001748 <HAL_GPIO_Init+0x2a0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d875      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014ea:	4a98      	ldr	r2, [pc, #608]	@ (800174c <HAL_GPIO_Init+0x2a4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d058      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014f0:	4a96      	ldr	r2, [pc, #600]	@ (800174c <HAL_GPIO_Init+0x2a4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d86f      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014f6:	4a96      	ldr	r2, [pc, #600]	@ (8001750 <HAL_GPIO_Init+0x2a8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d052      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014fc:	4a94      	ldr	r2, [pc, #592]	@ (8001750 <HAL_GPIO_Init+0x2a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d869      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001502:	4a94      	ldr	r2, [pc, #592]	@ (8001754 <HAL_GPIO_Init+0x2ac>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04c      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001508:	4a92      	ldr	r2, [pc, #584]	@ (8001754 <HAL_GPIO_Init+0x2ac>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d863      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800150e:	4a92      	ldr	r2, [pc, #584]	@ (8001758 <HAL_GPIO_Init+0x2b0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d046      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001514:	4a90      	ldr	r2, [pc, #576]	@ (8001758 <HAL_GPIO_Init+0x2b0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d85d      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d82a      	bhi.n	8001574 <HAL_GPIO_Init+0xcc>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d859      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001522:	a201      	add	r2, pc, #4	@ (adr r2, 8001528 <HAL_GPIO_Init+0x80>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	080015a3 	.word	0x080015a3
 800152c:	0800157d 	.word	0x0800157d
 8001530:	0800158f 	.word	0x0800158f
 8001534:	080015d1 	.word	0x080015d1
 8001538:	080015d7 	.word	0x080015d7
 800153c:	080015d7 	.word	0x080015d7
 8001540:	080015d7 	.word	0x080015d7
 8001544:	080015d7 	.word	0x080015d7
 8001548:	080015d7 	.word	0x080015d7
 800154c:	080015d7 	.word	0x080015d7
 8001550:	080015d7 	.word	0x080015d7
 8001554:	080015d7 	.word	0x080015d7
 8001558:	080015d7 	.word	0x080015d7
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015d7 	.word	0x080015d7
 8001564:	080015d7 	.word	0x080015d7
 8001568:	080015d7 	.word	0x080015d7
 800156c:	08001585 	.word	0x08001585
 8001570:	08001599 	.word	0x08001599
 8001574:	4a79      	ldr	r2, [pc, #484]	@ (800175c <HAL_GPIO_Init+0x2b4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800157a:	e02c      	b.n	80015d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e029      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e024      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	3308      	adds	r3, #8
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e01f      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	330c      	adds	r3, #12
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e01a      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015aa:	2304      	movs	r3, #4
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e013      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	611a      	str	r2, [r3, #16]
          break;
 80015c2:	e009      	b.n	80015d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	615a      	str	r2, [r3, #20]
          break;
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          break;
 80015d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	@ 0xff
 80015dc:	d801      	bhi.n	80015e2 <HAL_GPIO_Init+0x13a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_Init+0x13e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	@ 0xff
 80015ec:	d802      	bhi.n	80015f4 <HAL_GPIO_Init+0x14c>
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x152>
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	3b08      	subs	r3, #8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	210f      	movs	r1, #15
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	6a39      	ldr	r1, [r7, #32]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80b1 	beq.w	800178a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001628:	4b4d      	ldr	r3, [pc, #308]	@ (8001760 <HAL_GPIO_Init+0x2b8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a4c      	ldr	r2, [pc, #304]	@ (8001760 <HAL_GPIO_Init+0x2b8>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b4a      	ldr	r3, [pc, #296]	@ (8001760 <HAL_GPIO_Init+0x2b8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001640:	4a48      	ldr	r2, [pc, #288]	@ (8001764 <HAL_GPIO_Init+0x2bc>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a40      	ldr	r2, [pc, #256]	@ (8001768 <HAL_GPIO_Init+0x2c0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x1ec>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3f      	ldr	r2, [pc, #252]	@ (800176c <HAL_GPIO_Init+0x2c4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1e8>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3e      	ldr	r2, [pc, #248]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1e4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3d      	ldr	r2, [pc, #244]	@ (8001774 <HAL_GPIO_Init+0x2cc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1e0>
 8001684:	2303      	movs	r3, #3
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001688:	2304      	movs	r3, #4
 800168a:	e004      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 800168c:	2302      	movs	r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001694:	2300      	movs	r3, #0
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a6:	492f      	ldr	r1, [pc, #188]	@ (8001764 <HAL_GPIO_Init+0x2bc>)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	492c      	ldr	r1, [pc, #176]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4928      	ldr	r1, [pc, #160]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e8:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4922      	ldr	r1, [pc, #136]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	491e      	ldr	r1, [pc, #120]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4918      	ldr	r1, [pc, #96]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4914      	ldr	r1, [pc, #80]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d021      	beq.n	800177c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	490e      	ldr	r1, [pc, #56]	@ (8001778 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e021      	b.n	800178a <HAL_GPIO_Init+0x2e2>
 8001746:	bf00      	nop
 8001748:	10320000 	.word	0x10320000
 800174c:	10310000 	.word	0x10310000
 8001750:	10220000 	.word	0x10220000
 8001754:	10210000 	.word	0x10210000
 8001758:	10120000 	.word	0x10120000
 800175c:	10110000 	.word	0x10110000
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000
 8001768:	40010800 	.word	0x40010800
 800176c:	40010c00 	.word	0x40010c00
 8001770:	40011000 	.word	0x40011000
 8001774:	40011400 	.word	0x40011400
 8001778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_GPIO_Init+0x304>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	43db      	mvns	r3, r3
 8001784:	4909      	ldr	r1, [pc, #36]	@ (80017ac <HAL_GPIO_Init+0x304>)
 8001786:	4013      	ands	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	3301      	adds	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	f47f ae8e 	bne.w	80014bc <HAL_GPIO_Init+0x14>
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	372c      	adds	r7, #44	@ 0x2c
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
 80017ea:	4613      	mov	r3, r2
 80017ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f4:	887a      	ldrh	r2, [r7, #2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f872 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b08b      	sub	sp, #44	@ 0x2c
 8001844:	af06      	add	r7, sp, #24
 8001846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0f1      	b.n	8001a36 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f007 fc1c 	bl	80090a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fba6 	bl	8004fca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	687e      	ldr	r6, [r7, #4]
 8001886:	466d      	mov	r5, sp
 8001888:	f106 0410 	add.w	r4, r6, #16
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	602b      	str	r3, [r5, #0]
 8001894:	1d33      	adds	r3, r6, #4
 8001896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001898:	6838      	ldr	r0, [r7, #0]
 800189a:	f003 fb70 	bl	8004f7e <USB_CoreInit>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0c2      	b.n	8001a36 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fba1 	bl	8004ffe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e040      	b.n	8001944 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3301      	adds	r3, #1
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3303      	adds	r3, #3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3338      	adds	r3, #56	@ 0x38
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	333c      	adds	r3, #60	@ 0x3c
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3340      	adds	r3, #64	@ 0x40
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3b9      	bcc.n	80018c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e044      	b.n	80019de <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3301      	adds	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3b5      	bcc.n	8001954 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	687e      	ldr	r6, [r7, #4]
 80019f0:	466d      	mov	r5, sp
 80019f2:	f106 0410 	add.w	r4, r6, #16
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	1d33      	adds	r3, r6, #4
 8001a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f003 fb07 	bl	8005016 <USB_DevInit>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00d      	b.n	8001a36 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 fd89 	bl	8007546 <USB_DevDisconnect>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_Start+0x16>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e016      	b.n	8001a82 <HAL_PCD_Start+0x44>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fa9c 	bl	8004f9e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a66:	2101      	movs	r1, #1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f007 fd8e 	bl	800958a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fd5d 	bl	8007532 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b088      	sub	sp, #32
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fd5f 	bl	800755a <USB_ReadInterrupts>
 8001a9c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb1b 	bl	80020e4 <PCD_EP_ISR_Handler>

    return;
 8001aae:	e119      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001acc:	b292      	uxth	r2, r2
 8001ace:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f007 fb61 	bl	800919a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f905 	bl	8001cea <HAL_PCD_SetAddress>

    return;
 8001ae0:	e100      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00c      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001afe:	b292      	uxth	r2, r2
 8001b00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b04:	e0ee      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b22:	b292      	uxth	r2, r2
 8001b24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b28:	e0dc      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d027      	beq.n	8001b84 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	b292      	uxth	r2, r2
 8001b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f007 fb51 	bl	800920c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b82:	e0af      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8083 	beq.w	8001c96 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
 8001b94:	e010      	b.n	8001bb8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	441a      	add	r2, r3
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	3320      	adds	r3, #32
 8001bac:	443b      	add	r3, r7
 8001bae:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d9eb      	bls.n	8001b96 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bee:	bf00      	nop
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f6      	beq.n	8001bf0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c14:	b292      	uxth	r2, r2
 8001c16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	77fb      	strb	r3, [r7, #31]
 8001c1e:	e00f      	b.n	8001c40 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4611      	mov	r1, r2
 8001c28:	7ffa      	ldrb	r2, [r7, #31]
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	440a      	add	r2, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	3320      	adds	r3, #32
 8001c32:	443b      	add	r3, r7
 8001c34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c38:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	d9ec      	bls.n	8001c20 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0208 	orr.w	r2, r2, #8
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0204 	orr.w	r2, r2, #4
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f007 faa2 	bl	80091d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c94:	e026      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00f      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f007 fa60 	bl	800917e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001cbe:	e011      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ce2:	bf00      	nop
  }
}
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_PCD_SetAddress+0x1a>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e013      	b.n	8001d2c <HAL_PCD_SetAddress+0x42>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 fbf5 	bl	800750c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	70fb      	strb	r3, [r7, #3]
 8001d46:	460b      	mov	r3, r1
 8001d48:	803b      	strh	r3, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da0e      	bge.n	8001d78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]
 8001d76:	e00e      	b.n	8001d96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 0207 	and.w	r2, r3, #7
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	78ba      	ldrb	r2, [r7, #2]
 8001dac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_EP_Open+0x94>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e00e      	b.n	8001de6 <HAL_PCD_EP_Open+0xb2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 f93e 	bl	8005058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001de4:	7afb      	ldrb	r3, [r7, #11]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0e      	bge.n	8001e20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_EP_Close+0x6a>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e00e      	b.n	8001e76 <HAL_PCD_EP_Close+0x88>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fcb6 	bl	80057d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 0207 	and.w	r2, r3, #7
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fe6d 	bl	8005bb0 <USB_EPStartXfer>

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 0207 	and.w	r2, r3, #7
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2201      	movs	r2, #1
 8001f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fe1f 	bl	8005bb0 <USB_EPStartXfer>

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0207 	and.w	r2, r3, #7
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d901      	bls.n	8001f9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e04c      	b.n	8002034 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da0e      	bge.n	8001fc0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	705a      	strb	r2, [r3, #1]
 8001fbe:	e00c      	b.n	8001fda <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_EP_SetStall+0x7e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e01c      	b.n	8002034 <HAL_PCD_EP_SetStall+0xb8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 f982 	bl	8007312 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f005 faa7 	bl	8007578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d901      	bls.n	800205a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e040      	b.n	80020dc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800205a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205e:	2b00      	cmp	r3, #0
 8002060:	da0e      	bge.n	8002080 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00e      	b.n	800209e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_PCD_EP_ClrStall+0x82>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e00e      	b.n	80020dc <HAL_PCD_EP_ClrStall+0xa0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 f970 	bl	80073b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b096      	sub	sp, #88	@ 0x58
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020ec:	e3be      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002108:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8178 	bne.w	8002402 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d151      	bne.n	80021c2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800212a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212e:	81fb      	strh	r3, [r7, #14]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800213a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213e:	b29b      	uxth	r3, r3
 8002140:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3328      	adds	r3, #40	@ 0x28
 8002146:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	3302      	adds	r3, #2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002172:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	441a      	add	r2, r3
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002182:	2100      	movs	r1, #0
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f006 ffe0 	bl	800914a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 836a 	beq.w	800286c <PCD_EP_ISR_Handler+0x788>
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8365 	bne.w	800286c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80021c0:	e354      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021c8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d034      	beq.n	800224a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	3306      	adds	r3, #6
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002218:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800221e:	b29b      	uxth	r3, r3
 8002220:	f005 f9fa 	bl	8007618 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29a      	uxth	r2, r3
 800222c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002230:	4013      	ands	r3, r2
 8002232:	823b      	strh	r3, [r7, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	8a3a      	ldrh	r2, [r7, #16]
 800223a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800223e:	b292      	uxth	r2, r2
 8002240:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f006 ff54 	bl	80090f0 <HAL_PCD_SetupStageCallback>
 8002248:	e310      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800224a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800224e:	2b00      	cmp	r3, #0
 8002250:	f280 830c 	bge.w	800286c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002260:	4013      	ands	r3, r2
 8002262:	83fb      	strh	r3, [r7, #30]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	8bfa      	ldrh	r2, [r7, #30]
 800226a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800226e:	b292      	uxth	r2, r2
 8002270:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	3306      	adds	r3, #6
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800229e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <PCD_EP_ISR_Handler+0x1f6>
 80022a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b4:	6959      	ldr	r1, [r3, #20]
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f005 f9aa 	bl	8007618 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	441a      	add	r2, r3
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022d2:	2100      	movs	r1, #0
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f006 ff1d 	bl	8009114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80022e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 82bd 	bne.w	800286c <PCD_EP_ISR_Handler+0x788>
 80022f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80022fe:	f000 82b5 	beq.w	800286c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232c:	b29a      	uxth	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b3e      	cmp	r3, #62	@ 0x3e
 8002338:	d91d      	bls.n	8002376 <PCD_EP_ISR_Handler+0x292>
 800233a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	647b      	str	r3, [r7, #68]	@ 0x44
 8002342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <PCD_EP_ISR_Handler+0x270>
 800234e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002350:	3b01      	subs	r3, #1
 8002352:	647b      	str	r3, [r7, #68]	@ 0x44
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29a      	uxth	r2, r3
 800235a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235c:	b29b      	uxth	r3, r3
 800235e:	029b      	lsls	r3, r3, #10
 8002360:	b29b      	uxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236e:	b29a      	uxth	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e026      	b.n	80023c4 <PCD_EP_ISR_Handler+0x2e0>
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <PCD_EP_ISR_Handler+0x2b0>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238c:	b29a      	uxth	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	e017      	b.n	80023c4 <PCD_EP_ISR_Handler+0x2e0>
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	647b      	str	r3, [r7, #68]	@ 0x44
 800239c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <PCD_EP_ISR_Handler+0x2ca>
 80023a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023aa:	3301      	adds	r3, #1
 80023ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d4:	827b      	strh	r3, [r7, #18]
 80023d6:	8a7b      	ldrh	r3, [r7, #18]
 80023d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80023dc:	827b      	strh	r3, [r7, #18]
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80023e4:	827b      	strh	r3, [r7, #18]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8013      	strh	r3, [r2, #0]
 8002400:	e234      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002416:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800241a:	2b00      	cmp	r3, #0
 800241c:	f280 80fc 	bge.w	8002618 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002436:	4013      	ands	r3, r2
 8002438:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800244e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002452:	b292      	uxth	r2, r2
 8002454:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002456:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	7b1b      	ldrb	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d125      	bne.n	80024c0 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	3306      	adds	r3, #6
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80024a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8092 	beq.w	80025ce <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b0:	6959      	ldr	r1, [r3, #20]
 80024b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b4:	88da      	ldrh	r2, [r3, #6]
 80024b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024ba:	f005 f8ad 	bl	8007618 <USB_ReadPMA>
 80024be:	e086      	b.n	80025ce <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c2:	78db      	ldrb	r3, [r3, #3]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d10a      	bne.n	80024de <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024cc:	461a      	mov	r2, r3
 80024ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9d9 	bl	8002888 <HAL_PCD_EP_DB_Receive>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80024dc:	e077      	b.n	80025ce <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d024      	beq.n	8002586 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002568:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02e      	beq.n	80025ce <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002576:	6959      	ldr	r1, [r3, #20]
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	891a      	ldrh	r2, [r3, #8]
 800257c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002580:	f005 f84a 	bl	8007618 <USB_ReadPMA>
 8002584:	e023      	b.n	80025ce <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	3306      	adds	r3, #6
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80025b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	895a      	ldrh	r2, [r3, #10]
 80025c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025ca:	f005 f825 	bl	8007618 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025d6:	441a      	add	r2, r3
 80025d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025e4:	441a      	add	r2, r3
 80025e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <PCD_EP_ISR_Handler+0x51a>
 80025f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80025f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d206      	bcs.n	800260c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f006 fd85 	bl	8009114 <HAL_PCD_DataOutStageCallback>
 800260a:	e005      	b.n	8002618 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002612:	4618      	mov	r0, r3
 8002614:	f003 facc 	bl	8005bb0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002618:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800261c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8123 	beq.w	800286c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002626:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002654:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800266a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 80a2 	bne.w	80027c4 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002688:	7b1b      	ldrb	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8093 	beq.w	80027b6 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002690:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d046      	beq.n	800272a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d126      	bne.n	80026f2 <PCD_EP_ISR_Handler+0x60e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	4413      	add	r3, r2
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	011a      	lsls	r2, r3, #4
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	4413      	add	r3, r2
 80026c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e061      	b.n	80027b6 <PCD_EP_ISR_Handler+0x6d2>
 80026f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d15d      	bne.n	80027b6 <PCD_EP_ISR_Handler+0x6d2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	4413      	add	r3, r2
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	011a      	lsls	r2, r3, #4
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	4413      	add	r3, r2
 800271c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002724:	2200      	movs	r2, #0
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e045      	b.n	80027b6 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d126      	bne.n	8002786 <PCD_EP_ISR_Handler+0x6a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274c:	4413      	add	r3, r2
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	011a      	lsls	r2, r3, #4
 8002756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002758:	4413      	add	r3, r2
 800275a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276a:	b29a      	uxth	r2, r3
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277e:	b29a      	uxth	r2, r3
 8002780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e017      	b.n	80027b6 <PCD_EP_ISR_Handler+0x6d2>
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d113      	bne.n	80027b6 <PCD_EP_ISR_Handler+0x6d2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279c:	4413      	add	r3, r2
 800279e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a8:	4413      	add	r3, r2
 80027aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f006 fcc4 	bl	800914a <HAL_PCD_DataInStageCallback>
 80027c2:	e053      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80027c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d146      	bne.n	800285e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	3302      	adds	r3, #2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80027fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002804:	429a      	cmp	r2, r3
 8002806:	d907      	bls.n	8002818 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002810:	1ad2      	subs	r2, r2, r3
 8002812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	e002      	b.n	800281e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f006 fc8c 	bl	800914a <HAL_PCD_DataInStageCallback>
 8002832:	e01b      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800283c:	441a      	add	r2, r3
 800283e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002840:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800284a:	441a      	add	r2, r3
 800284c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002856:	4618      	mov	r0, r3
 8002858:	f003 f9aa 	bl	8005bb0 <USB_EPStartXfer>
 800285c:	e006      	b.n	800286c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800285e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002862:	461a      	mov	r2, r3
 8002864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f91b 	bl	8002aa2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002874:	b29b      	uxth	r3, r3
 8002876:	b21b      	sxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f6ff ac38 	blt.w	80020ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3758      	adds	r7, #88	@ 0x58
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d07e      	beq.n	800299e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3302      	adds	r3, #2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	8b7b      	ldrh	r3, [r7, #26]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d306      	bcc.n	80028e2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	8b7b      	ldrh	r3, [r7, #26]
 80028da:	1ad2      	subs	r2, r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	619a      	str	r2, [r3, #24]
 80028e0:	e002      	b.n	80028e8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d123      	bne.n	8002938 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290a:	833b      	strh	r3, [r7, #24]
 800290c:	8b3b      	ldrh	r3, [r7, #24]
 800290e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002912:	833b      	strh	r3, [r7, #24]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	8b3b      	ldrh	r3, [r7, #24]
 8002924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800292c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01f      	beq.n	8002982 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800295c:	82fb      	strh	r3, [r7, #22]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800297e:	b29b      	uxth	r3, r3
 8002980:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002982:	8b7b      	ldrh	r3, [r7, #26]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8087 	beq.w	8002a98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6959      	ldr	r1, [r3, #20]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	891a      	ldrh	r2, [r3, #8]
 8002996:	8b7b      	ldrh	r3, [r7, #26]
 8002998:	f004 fe3e 	bl	8007618 <USB_ReadPMA>
 800299c:	e07c      	b.n	8002a98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	3306      	adds	r3, #6
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	8b7b      	ldrh	r3, [r7, #26]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d306      	bcc.n	80029e0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	8b7b      	ldrh	r3, [r7, #26]
 80029d8:	1ad2      	subs	r2, r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	e002      	b.n	80029e6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d123      	bne.n	8002a36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a08:	83fb      	strh	r3, [r7, #30]
 8002a0a:	8bfb      	ldrh	r3, [r7, #30]
 8002a0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a10:	83fb      	strh	r3, [r7, #30]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	8bfb      	ldrh	r3, [r7, #30]
 8002a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11f      	bne.n	8002a80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5a:	83bb      	strh	r3, [r7, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	8bbb      	ldrh	r3, [r7, #28]
 8002a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a80:	8b7b      	ldrh	r3, [r7, #26]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	895a      	ldrh	r2, [r3, #10]
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	f004 fdc0 	bl	8007618 <USB_ReadPMA>
    }
  }

  return count;
 8002a98:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b0a4      	sub	sp, #144	@ 0x90
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 81dd 	beq.w	8002e76 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d907      	bls.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	619a      	str	r2, [r3, #24]
 8002b02:	e002      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 80b9 	bne.w	8002c86 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d126      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	4413      	add	r3, r2
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	011a      	lsls	r2, r3, #4
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e01a      	b.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d116      	bne.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b86:	4413      	add	r3, r2
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	011a      	lsls	r2, r3, #4
 8002b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b92:	4413      	add	r3, r2
 8002b94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d126      	bne.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x15a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	011a      	lsls	r2, r3, #4
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	e017      	b.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d113      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	4413      	add	r3, r2
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	011a      	lsls	r2, r3, #4
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f006 fa89 	bl	800914a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 82fc 	beq.w	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5e:	82fb      	strh	r3, [r7, #22]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	8afb      	ldrh	r3, [r7, #22]
 8002c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8013      	strh	r3, [r2, #0]
 8002c84:	e2da      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002caa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	f040 82ae 	bne.w	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ce8:	441a      	add	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d30b      	bcc.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	621a      	str	r2, [r3, #32]
 8002d1e:	e017      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d38:	e00a      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d165      	bne.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x382>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	011a      	lsls	r2, r3, #4
 8002d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d78:	4413      	add	r3, r2
 8002d7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d96:	d91d      	bls.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x332>
 8002d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x310>
 8002dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dae:	3b01      	subs	r3, #1
 8002db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	029b      	lsls	r3, r3, #10
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e044      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x350>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	e035      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e08:	3301      	adds	r3, #1
 8002e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	e01c      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d118      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e40:	4413      	add	r3, r2
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	011a      	lsls	r2, r3, #4
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	6959      	ldr	r1, [r3, #20]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	891a      	ldrh	r2, [r3, #8]
 8002e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f004 fb8d 	bl	800758e <USB_WritePMA>
 8002e74:	e1e2      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3306      	adds	r3, #6
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d307      	bcc.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	619a      	str	r2, [r3, #24]
 8002ebc:	e002      	b.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 80c0 	bne.w	800304e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	785b      	ldrb	r3, [r3, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d126      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eea:	4413      	add	r3, r2
 8002eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	011a      	lsls	r2, r3, #4
 8002ef4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	e01a      	b.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d116      	bne.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f40:	4413      	add	r3, r2
 8002f42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f52:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f56:	2200      	movs	r2, #0
 8002f58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d12b      	bne.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7c:	4413      	add	r3, r2
 8002f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	011a      	lsls	r2, r3, #4
 8002f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f88:	4413      	add	r3, r2
 8002f8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	e017      	b.n	8002ff0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d113      	bne.n	8002ff0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd6:	4413      	add	r3, r2
 8002fd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	011a      	lsls	r2, r3, #4
 8002fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fe8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fec:	2200      	movs	r2, #0
 8002fee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f006 f8a7 	bl	800914a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 811a 	bne.w	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800301e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003022:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	441a      	add	r2, r3
 8003034:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800303c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003048:	b29b      	uxth	r3, r3
 800304a:	8013      	strh	r3, [r2, #0]
 800304c:	e0f6      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d121      	bne.n	800309c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800306e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003072:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800308c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003098:	b29b      	uxth	r3, r3
 800309a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	f040 80ca 	bne.w	800323c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030b0:	441a      	add	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030be:	441a      	add	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d30b      	bcc.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	621a      	str	r2, [r3, #32]
 80030e6:	e017      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80030f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003100:	e00a      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	657b      	str	r3, [r7, #84]	@ 0x54
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d165      	bne.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x750>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313a:	4413      	add	r3, r2
 800313c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	011a      	lsls	r2, r3, #4
 8003144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003146:	4413      	add	r3, r2
 8003148:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800314c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800314e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003158:	b29a      	uxth	r2, r3
 800315a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003162:	2b3e      	cmp	r3, #62	@ 0x3e
 8003164:	d91d      	bls.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x700>
 8003166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800316e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_PCD_EP_DB_Transmit+0x6de>
 800317a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800317c:	3b01      	subs	r3, #1
 800317e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003180:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29a      	uxth	r2, r3
 8003186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003188:	b29b      	uxth	r3, r3
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	b29b      	uxth	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319a:	b29a      	uxth	r2, r3
 800319c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	e041      	b.n	8003226 <HAL_PCD_EP_DB_Transmit+0x784>
 80031a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80031aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031bc:	801a      	strh	r2, [r3, #0]
 80031be:	e032      	b.n	8003226 <HAL_PCD_EP_DB_Transmit+0x784>
 80031c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_PCD_EP_DB_Transmit+0x738>
 80031d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031d6:	3301      	adds	r3, #1
 80031d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	e019      	b.n	8003226 <HAL_PCD_EP_DB_Transmit+0x784>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x784>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003208:	4413      	add	r3, r2
 800320a:	657b      	str	r3, [r7, #84]	@ 0x54
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	011a      	lsls	r2, r3, #4
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	4413      	add	r3, r2
 8003216:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800321a:	653b      	str	r3, [r7, #80]	@ 0x50
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003220:	b29a      	uxth	r2, r3
 8003222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003224:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6959      	ldr	r1, [r3, #20]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	895a      	ldrh	r2, [r3, #10]
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003236:	b29b      	uxth	r3, r3
 8003238:	f004 f9a9 	bl	800758e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003256:	82bb      	strh	r3, [r7, #20]
 8003258:	8abb      	ldrh	r3, [r7, #20]
 800325a:	f083 0310 	eor.w	r3, r3, #16
 800325e:	82bb      	strh	r3, [r7, #20]
 8003260:	8abb      	ldrh	r3, [r7, #20]
 8003262:	f083 0320 	eor.w	r3, r3, #32
 8003266:	82bb      	strh	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	8abb      	ldrh	r3, [r7, #20]
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3790      	adds	r7, #144	@ 0x90
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
 80032a4:	4613      	mov	r3, r2
 80032a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	897b      	ldrh	r3, [r7, #10]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e009      	b.n	80032e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032cc:	897a      	ldrh	r2, [r7, #10]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032e0:	893b      	ldrh	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	80da      	strh	r2, [r3, #6]
 80032f4:	e00b      	b.n	800330e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2201      	movs	r2, #1
 80032fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	b29a      	uxth	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
	...

0800331c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e272      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8087 	beq.w	800344a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	4b92      	ldr	r3, [pc, #584]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b04      	cmp	r3, #4
 8003346:	d00c      	beq.n	8003362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003348:	4b8f      	ldr	r3, [pc, #572]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d112      	bne.n	800337a <HAL_RCC_OscConfig+0x5e>
 8003354:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d10b      	bne.n	800337a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003362:	4b89      	ldr	r3, [pc, #548]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d06c      	beq.n	8003448 <HAL_RCC_OscConfig+0x12c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d168      	bne.n	8003448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e24c      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x76>
 8003384:	4b80      	ldr	r3, [pc, #512]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a7f      	ldr	r2, [pc, #508]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e02e      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x98>
 800339a:	4b7b      	ldr	r3, [pc, #492]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7a      	ldr	r2, [pc, #488]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b78      	ldr	r3, [pc, #480]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a77      	ldr	r2, [pc, #476]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0xbc>
 80033be:	4b72      	ldr	r3, [pc, #456]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a71      	ldr	r2, [pc, #452]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xd4>
 80033d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b68      	ldr	r3, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a67      	ldr	r2, [pc, #412]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd ff1a 	bl	8001230 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd ff16 	bl	8001230 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	@ 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e200      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b5d      	ldr	r3, [pc, #372]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xe4>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd ff06 	bl	8001230 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd ff02 	bl	8001230 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	@ 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1ec      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x10c>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003456:	4b4c      	ldr	r3, [pc, #304]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003462:	4b49      	ldr	r3, [pc, #292]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x18c>
 800346e:	4b46      	ldr	r3, [pc, #280]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x176>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1c0      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4939      	ldr	r1, [pc, #228]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	e03a      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b36      	ldr	r3, [pc, #216]	@ (800358c <HAL_RCC_OscConfig+0x270>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fd febb 	bl	8001230 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034be:	f7fd feb7 	bl	8001230 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1a1      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4927      	ldr	r1, [pc, #156]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b26      	ldr	r3, [pc, #152]	@ (800358c <HAL_RCC_OscConfig+0x270>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fd fe9a 	bl	8001230 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fd fe96 	bl	8001230 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e180      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03a      	beq.n	80035a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <HAL_RCC_OscConfig+0x274>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fd fe7a 	bl	8001230 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7fd fe76 	bl	8001230 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e160      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	4b0d      	ldr	r3, [pc, #52]	@ (8003588 <HAL_RCC_OscConfig+0x26c>)
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800355e:	2001      	movs	r0, #1
 8003560:	f000 fa9c 	bl	8003a9c <RCC_Delay>
 8003564:	e01c      	b.n	80035a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <HAL_RCC_OscConfig+0x274>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fd fe60 	bl	8001230 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003572:	e00f      	b.n	8003594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fd fe5c 	bl	8001230 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d908      	bls.n	8003594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e146      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	42420000 	.word	0x42420000
 8003590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b92      	ldr	r3, [pc, #584]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e9      	bne.n	8003574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a6 	beq.w	80036fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8b      	ldr	r3, [pc, #556]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a87      	ldr	r2, [pc, #540]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	61d3      	str	r3, [r2, #28]
 80035ca:	4b85      	ldr	r3, [pc, #532]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b82      	ldr	r3, [pc, #520]	@ (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b7f      	ldr	r3, [pc, #508]	@ (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7e      	ldr	r2, [pc, #504]	@ (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd fe1d 	bl	8001230 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd fe19 	bl	8001230 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e103      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b75      	ldr	r3, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x4c8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x312>
 8003620:	4b6f      	ldr	r3, [pc, #444]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a6e      	ldr	r2, [pc, #440]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x334>
 8003636:	4b6a      	ldr	r3, [pc, #424]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a69      	ldr	r2, [pc, #420]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6213      	str	r3, [r2, #32]
 8003642:	4b67      	ldr	r3, [pc, #412]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a66      	ldr	r2, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6213      	str	r3, [r2, #32]
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x356>
 8003658:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a60      	ldr	r2, [pc, #384]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	4b5e      	ldr	r3, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a5d      	ldr	r2, [pc, #372]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x36e>
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a57      	ldr	r2, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fd fdcd 	bl	8001230 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd fdc9 	bl	8001230 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0b1      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x37e>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fdb7 	bl	8001230 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd fdb3 	bl	8001230 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e09b      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b40      	ldr	r3, [pc, #256]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3c      	ldr	r3, [pc, #240]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a3b      	ldr	r2, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8087 	beq.w	8003812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d061      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d146      	bne.n	80037a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b33      	ldr	r3, [pc, #204]	@ (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fd fd87 	bl	8001230 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fd83 	bl	8001230 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e06d      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	4b29      	ldr	r3, [pc, #164]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d108      	bne.n	8003760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4921      	ldr	r1, [pc, #132]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003760:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a19      	ldr	r1, [r3, #32]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	430b      	orrs	r3, r1
 8003772:	491b      	ldr	r1, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fd57 	bl	8001230 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fd53 	bl	8001230 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e03d      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x46a>
 80037a4:	e035      	b.n	8003812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd fd40 	bl	8001230 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd fd3c 	bl	8001230 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e026      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x498>
 80037d2:	e01e      	b.n	8003812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e019      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_RCC_OscConfig+0x500>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0d0      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b6a      	ldr	r3, [pc, #424]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b67      	ldr	r3, [pc, #412]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4965      	ldr	r1, [pc, #404]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a58      	ldr	r2, [pc, #352]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a52      	ldr	r2, [pc, #328]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800389e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d040      	beq.n	8003940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d115      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b41      	ldr	r3, [pc, #260]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e073      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3d      	ldr	r3, [pc, #244]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b39      	ldr	r3, [pc, #228]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4936      	ldr	r1, [pc, #216]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fd fc8e 	bl	8001230 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fd fc8a 	bl	8001230 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e053      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d210      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4922      	ldr	r1, [pc, #136]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	@ (80039e8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <HAL_RCC_ClockConfig+0x1cc>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <HAL_RCC_ClockConfig+0x1d0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fbec 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	080096b0 	.word	0x080096b0
 80039ec:	20000000 	.word	0x20000000
 80039f0:	20000004 	.word	0x20000004

080039f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x30>
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x36>
 8003a22:	e027      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a24:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a26:	613b      	str	r3, [r7, #16]
      break;
 8003a28:	e027      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	0c9b      	lsrs	r3, r3, #18
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	4a17      	ldr	r2, [pc, #92]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a34:	5cd3      	ldrb	r3, [r2, r3]
 8003a36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a42:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0c5b      	lsrs	r3, r3, #17
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	4a11      	ldr	r2, [pc, #68]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a56:	fb03 f202 	mul.w	r2, r3, r2
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e004      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	613b      	str	r3, [r7, #16]
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a76:	613b      	str	r3, [r7, #16]
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	693b      	ldr	r3, [r7, #16]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	007a1200 	.word	0x007a1200
 8003a90:	080096c0 	.word	0x080096c0
 8003a94:	080096d0 	.word	0x080096d0
 8003a98:	003d0900 	.word	0x003d0900

08003a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <RCC_Delay+0x34>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <RCC_Delay+0x38>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0a5b      	lsrs	r3, r3, #9
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab8:	bf00      	nop
  }
  while (Delay --);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <RCC_Delay+0x1c>
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d07d      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b4c      	ldr	r3, [pc, #304]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4a4b      	ldr	r2, [pc, #300]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	61d3      	str	r3, [r2, #28]
 8003b10:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b46      	ldr	r3, [pc, #280]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d118      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2c:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b38:	f7fd fb7a 	bl	8001230 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b40:	f7fd fb76 	bl	8001230 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	@ 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e06d      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b3a      	ldr	r3, [pc, #232]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5e:	4b36      	ldr	r3, [pc, #216]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02e      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d027      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b86:	4b2e      	ldr	r3, [pc, #184]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b92:	4a29      	ldr	r2, [pc, #164]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d014      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fb45 	bl	8001230 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fd fb41 	bl	8001230 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e036      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ee      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4917      	ldr	r1, [pc, #92]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be4:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4a13      	ldr	r2, [pc, #76]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	490b      	ldr	r1, [pc, #44]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1a:	4b07      	ldr	r3, [pc, #28]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4904      	ldr	r1, [pc, #16]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42420440 	.word	0x42420440

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e076      	b.n	8003d44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d108      	bne.n	8003c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c66:	d009      	beq.n	8003c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
 8003c6e:	e005      	b.n	8003c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fea2 	bl	80009e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	0c1a      	lsrs	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f002 0204 	and.w	r2, r2, #4
 8003d22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd f8ca 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 fd92 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e041      	b.n	8003e80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f839 	bl	8003e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f000 fd43 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_TIM_PWM_Start+0x24>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e022      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d109      	bne.n	8003eda <HAL_TIM_PWM_Start+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e015      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d109      	bne.n	8003ef4 <HAL_TIM_PWM_Start+0x58>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e05e      	b.n	8003fcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x82>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f1c:	e013      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d104      	bne.n	8003f2e <HAL_TIM_PWM_Start+0x92>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f2c:	e00b      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xa2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f3c:	e003      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 ff30 	bl	8004db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <HAL_TIM_PWM_Start+0x138>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_TIM_PWM_Start+0x138>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIM_PWM_Start+0xfa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d009      	beq.n	8003f96 <HAL_TIM_PWM_Start+0xfa>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_TIM_PWM_Start+0x13c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_PWM_Start+0xfa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <HAL_TIM_PWM_Start+0x140>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d111      	bne.n	8003fba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d010      	beq.n	8003fca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	e007      	b.n	8003fca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800

08003fe0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fede 	bl	8004db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <HAL_TIM_PWM_Stop+0xc4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d117      	bne.n	8004032 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	f241 1311 	movw	r3, #4369	@ 0x1111
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_TIM_PWM_Stop+0x52>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	f240 4344 	movw	r3, #1092	@ 0x444
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_TIM_PWM_Stop+0x52>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	f241 1311 	movw	r3, #4369	@ 0x1111
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <HAL_TIM_PWM_Stop+0x82>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a1a      	ldr	r2, [r3, #32]
 8004048:	f240 4344 	movw	r3, #1092	@ 0x444
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <HAL_TIM_PWM_Stop+0x82>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_TIM_PWM_Stop+0x92>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004070:	e013      	b.n	800409a <HAL_TIM_PWM_Stop+0xba>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d104      	bne.n	8004082 <HAL_TIM_PWM_Stop+0xa2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004080:	e00b      	b.n	800409a <HAL_TIM_PWM_Stop+0xba>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Stop+0xb2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004090:	e003      	b.n	800409a <HAL_TIM_PWM_Stop+0xba>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e093      	b.n	80041e4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fc ff39 	bl	8000f48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f000 fbd9 	bl	80048b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	4313      	orrs	r3, r2
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004148:	f023 030c 	bic.w	r3, r3, #12
 800414c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004154:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4313      	orrs	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	011a      	lsls	r2, r3, #4
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	031b      	lsls	r3, r3, #12
 8004178:	4313      	orrs	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4313      	orrs	r3, r2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004204:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800420c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004214:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d110      	bne.n	800423e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004222:	7b7b      	ldrb	r3, [r7, #13]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e089      	b.n	8004340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800423c:	e031      	b.n	80042a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d110      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004244:	7bbb      	ldrb	r3, [r7, #14]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800424a:	7b3b      	ldrb	r3, [r7, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e075      	b.n	8004340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004264:	e01d      	b.n	80042a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004272:	7b7b      	ldrb	r3, [r7, #13]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004278:	7b3b      	ldrb	r3, [r7, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d001      	beq.n	8004282 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e05e      	b.n	8004340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d010      	beq.n	80042d0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80042ae:	e01f      	b.n	80042f0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fd7b 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0202 	orr.w	r2, r2, #2
 80042cc:	60da      	str	r2, [r3, #12]
      break;
 80042ce:	e02e      	b.n	800432e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	2104      	movs	r1, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fd6b 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0204 	orr.w	r2, r2, #4
 80042ec:	60da      	str	r2, [r3, #12]
      break;
 80042ee:	e01e      	b.n	800432e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd5b 	bl	8004db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	2104      	movs	r1, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd54 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0202 	orr.w	r2, r2, #2
 800431a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0204 	orr.w	r2, r2, #4
 800432a:	60da      	str	r2, [r3, #12]
      break;
 800432c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0202 	mvn.w	r2, #2
 8004374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fb fff6 	bl	800037c <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa72 	bl	800487c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa78 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0204 	mvn.w	r2, #4
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fb ffcc 	bl	800037c <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa48 	bl	800487c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa4e 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b08      	cmp	r3, #8
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0208 	mvn.w	r2, #8
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2204      	movs	r2, #4
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fb ffa2 	bl	800037c <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa1e 	bl	800487c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fa24 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0210 	mvn.w	r2, #16
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2208      	movs	r2, #8
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fb ff78 	bl	800037c <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9f4 	bl	800487c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9fa 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d10e      	bne.n	80044cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0201 	mvn.w	r2, #1
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9cf 	bl	800486a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e4:	2b80      	cmp	r3, #128	@ 0x80
 80044e6:	d107      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fd3a 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b40      	cmp	r3, #64	@ 0x40
 8004504:	d10e      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d107      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9be 	bl	80048a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b20      	cmp	r3, #32
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d107      	bne.n	8004550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0220 	mvn.w	r2, #32
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fd05 	bl	8004f5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004572:	2302      	movs	r3, #2
 8004574:	e0ae      	b.n	80046d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	f200 809f 	bhi.w	80046c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080046c5 	.word	0x080046c5
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	08004601 	.word	0x08004601
 80045a0:	080046c5 	.word	0x080046c5
 80045a4:	080046c5 	.word	0x080046c5
 80045a8:	080046c5 	.word	0x080046c5
 80045ac:	08004643 	.word	0x08004643
 80045b0:	080046c5 	.word	0x080046c5
 80045b4:	080046c5 	.word	0x080046c5
 80045b8:	080046c5 	.word	0x080046c5
 80045bc:	08004683 	.word	0x08004683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9d6 	bl	8004978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0204 	bic.w	r2, r2, #4
 80045ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      break;
 80045fe:	e064      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fa1c 	bl	8004a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6999      	ldr	r1, [r3, #24]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
      break;
 8004640:	e043      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fa65 	bl	8004b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0204 	bic.w	r2, r2, #4
 800466c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69d9      	ldr	r1, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
      break;
 8004680:	e023      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 faaf 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800469c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x1c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0b4      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x186>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800471e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004730:	d03e      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004736:	f200 8087 	bhi.w	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	f000 8086 	beq.w	800484e <HAL_TIM_ConfigClockSource+0x172>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004746:	d87f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b70      	cmp	r3, #112	@ 0x70
 800474a:	d01a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xa6>
 800474c:	2b70      	cmp	r3, #112	@ 0x70
 800474e:	d87b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b60      	cmp	r3, #96	@ 0x60
 8004752:	d050      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d877      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b50      	cmp	r3, #80	@ 0x50
 800475a:	d03c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xfa>
 800475c:	2b50      	cmp	r3, #80	@ 0x50
 800475e:	d873      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d058      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x13a>
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	d86f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b30      	cmp	r3, #48	@ 0x30
 800476a:	d064      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b30      	cmp	r3, #48	@ 0x30
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b20      	cmp	r3, #32
 8004776:	d867      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05c      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d05a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	e062      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	f000 faf0 	bl	8004d76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
      break;
 80047ae:	e04f      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	f000 fad9 	bl	8004d76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fa50 	bl	8004c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	@ 0x50
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 faa7 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fa6e 	bl	8004ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	@ 0x60
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa97 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004814:	e01c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fa30 	bl	8004c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	@ 0x40
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fa87 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004834:	e00c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fa7e 	bl	8004d42 <TIM_ITRx_SetConfig>
      break;
 8004846:	e003      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e000      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
	...

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a29      	ldr	r2, [pc, #164]	@ (800496c <TIM_Base_SetConfig+0xb8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <TIM_Base_SetConfig+0x30>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d007      	beq.n	80048e4 <TIM_Base_SetConfig+0x30>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <TIM_Base_SetConfig+0xbc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0x30>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <TIM_Base_SetConfig+0xc0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d108      	bne.n	80048f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <TIM_Base_SetConfig+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_Base_SetConfig+0x62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004904:	d007      	beq.n	8004916 <TIM_Base_SetConfig+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a19      	ldr	r2, [pc, #100]	@ (8004970 <TIM_Base_SetConfig+0xbc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_Base_SetConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <TIM_Base_SetConfig+0xc0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a07      	ldr	r2, [pc, #28]	@ (800496c <TIM_Base_SetConfig+0xb8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	615a      	str	r2, [r3, #20]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800

08004978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0201 	bic.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 0302 	bic.w	r3, r3, #2
 80049c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <TIM_OC1_SetConfig+0xc8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10c      	bne.n	80049ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0308 	bic.w	r3, r3, #8
 80049da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a13      	ldr	r2, [pc, #76]	@ (8004a40 <TIM_OC1_SetConfig+0xc8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d111      	bne.n	8004a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00

08004a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0210 	bic.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0320 	bic.w	r3, r3, #32
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <TIM_OC2_SetConfig+0xd0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10d      	bne.n	8004ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	@ (8004b14 <TIM_OC2_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d113      	bne.n	8004af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10d      	bne.n	8004b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d113      	bne.n	8004bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40012c00 	.word	0x40012c00

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0f      	ldr	r2, [pc, #60]	@ (8004c84 <TIM_OC4_SetConfig+0x98>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00

08004c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 030a 	bic.w	r3, r3, #10
 8004cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f023 0210 	bic.w	r2, r3, #16
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	031b      	lsls	r3, r3, #12
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f043 0307 	orr.w	r3, r3, #7
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b087      	sub	sp, #28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	021a      	lsls	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e046      	b.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e60:	d009      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a12      	ldr	r2, [pc, #72]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a10      	ldr	r2, [pc, #64]	@ (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10c      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800

08004eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e03d      	b.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f7e:	b084      	sub	sp, #16
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	f107 0014 	add.w	r0, r7, #20
 8004f8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	b004      	add	sp, #16
 8004f9c:	4770      	bx	lr

08004f9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004fb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fd2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004fd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005016:	b084      	sub	sp, #16
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	f107 0014 	add.w	r0, r7, #20
 8005024:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	b004      	add	sp, #16
 8005054:	4770      	bx	lr
	...

08005058 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005058:	b480      	push	{r7}
 800505a:	b09d      	sub	sp, #116	@ 0x74
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d81f      	bhi.n	80050ca <USB_ActivateEndpoint+0x72>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <USB_ActivateEndpoint+0x38>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050d3 	.word	0x080050d3
 800509c:	080050af 	.word	0x080050af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050ac:	e012      	b.n	80050d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050b2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80050b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050ba:	e00b      	b.n	80050d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050c8:	e004      	b.n	80050d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80050d0:	e000      	b.n	80050d4 <USB_ActivateEndpoint+0x7c>
      break;
 80050d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510c:	b29b      	uxth	r3, r3
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	4313      	orrs	r3, r2
 8005114:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	7b1b      	ldrb	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8178 	bne.w	8005434 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8084 	beq.w	8005256 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4413      	add	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	011a      	lsls	r2, r3, #4
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	88db      	ldrh	r3, [r3, #6]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	827b      	strh	r3, [r7, #18]
 8005190:	8a7b      	ldrh	r3, [r7, #18]
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01b      	beq.n	80051d2 <USB_ActivateEndpoint+0x17a>
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b0:	823b      	strh	r3, [r7, #16]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8a3b      	ldrh	r3, [r7, #16]
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	78db      	ldrb	r3, [r3, #3]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d020      	beq.n	800521c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	89bb      	ldrh	r3, [r7, #12]
 80051f4:	f083 0320 	eor.w	r3, r3, #32
 80051f8:	81bb      	strh	r3, [r7, #12]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	89bb      	ldrh	r3, [r7, #12]
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
 800521a:	e2d5      	b.n	80057c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005232:	81fb      	strh	r3, [r7, #14]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800524c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]
 8005254:	e2b8      	b.n	80057c8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	4413      	add	r3, r2
 8005268:	633b      	str	r3, [r7, #48]	@ 0x30
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	011a      	lsls	r2, r3, #4
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	4413      	add	r3, r2
 8005274:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	b29b      	uxth	r3, r3
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005288:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	4413      	add	r3, r2
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80052c4:	d91d      	bls.n	8005302 <USB_ActivateEndpoint+0x2aa>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <USB_ActivateEndpoint+0x288>
 80052da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052dc:	3b01      	subs	r3, #1
 80052de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	029b      	lsls	r3, r3, #10
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e026      	b.n	8005350 <USB_ActivateEndpoint+0x2f8>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <USB_ActivateEndpoint+0x2c8>
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29a      	uxth	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e017      	b.n	8005350 <USB_ActivateEndpoint+0x2f8>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <USB_ActivateEndpoint+0x2e2>
 8005334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005336:	3301      	adds	r3, #1
 8005338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29a      	uxth	r2, r3
 8005340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29b      	uxth	r3, r3
 8005348:	4313      	orrs	r3, r2
 800534a:	b29a      	uxth	r2, r3
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800535e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <USB_ActivateEndpoint+0x348>
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	843b      	strh	r3, [r7, #32]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	8c3b      	ldrh	r3, [r7, #32]
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005394:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d124      	bne.n	80053f2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	83bb      	strh	r3, [r7, #28]
 80053c0:	8bbb      	ldrh	r3, [r7, #28]
 80053c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053c6:	83bb      	strh	r3, [r7, #28]
 80053c8:	8bbb      	ldrh	r3, [r7, #28]
 80053ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053ce:	83bb      	strh	r3, [r7, #28]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	8bbb      	ldrh	r3, [r7, #28]
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]
 80053f0:	e1ea      	b.n	80057c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005408:	83fb      	strh	r3, [r7, #30]
 800540a:	8bfb      	ldrh	r3, [r7, #30]
 800540c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005410:	83fb      	strh	r3, [r7, #30]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8bfb      	ldrh	r3, [r7, #30]
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
 8005432:	e1c9      	b.n	80057c8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11e      	bne.n	800547a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005452:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800546c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]
 8005478:	e01d      	b.n	80054b6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800548c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005490:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054c6:	4413      	add	r3, r2
 80054c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	011a      	lsls	r2, r3, #4
 80054d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	891b      	ldrh	r3, [r3, #8]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fa:	4413      	add	r3, r2
 80054fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	011a      	lsls	r2, r3, #4
 8005504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005506:	4413      	add	r3, r2
 8005508:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	895b      	ldrh	r3, [r3, #10]
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8093 	bne.w	800564e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800553c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <USB_ActivateEndpoint+0x524>
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800558a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <USB_ActivateEndpoint+0x574>
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80055ea:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055f2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800562a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]
 800564c:	e0bc      	b.n	80057c8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800565e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01d      	beq.n	80056a6 <USB_ActivateEndpoint+0x64e>
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800569e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80056b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01d      	beq.n	80056fe <USB_ActivateEndpoint+0x6a6>
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	78db      	ldrb	r3, [r3, #3]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d024      	beq.n	8005750 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005720:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005724:	f083 0320 	eor.w	r3, r3, #32
 8005728:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]
 800574e:	e01d      	b.n	800578c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005766:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800577c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80057c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3774      	adds	r7, #116	@ 0x74
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d8:	b480      	push	{r7}
 80057da:	b08d      	sub	sp, #52	@ 0x34
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	7b1b      	ldrb	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 808e 	bne.w	8005908 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d044      	beq.n	800587e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	81bb      	strh	r3, [r7, #12]
 8005802:	89bb      	ldrh	r3, [r7, #12]
 8005804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <USB_DeactivateEndpoint+0x6c>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	817b      	strh	r3, [r7, #10]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	897b      	ldrh	r3, [r7, #10]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800585a:	813b      	strh	r3, [r7, #8]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]
 800587c:	e192      	b.n	8005ba4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	827b      	strh	r3, [r7, #18]
 800588c:	8a7b      	ldrh	r3, [r7, #18]
 800588e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01b      	beq.n	80058ce <USB_DeactivateEndpoint+0xf6>
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ac:	823b      	strh	r3, [r7, #16]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	441a      	add	r2, r3
 80058b8:	8a3b      	ldrh	r3, [r7, #16]
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e4:	81fb      	strh	r3, [r7, #14]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]
 8005906:	e14d      	b.n	8005ba4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80a5 	bne.w	8005a5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	843b      	strh	r3, [r7, #32]
 8005920:	8c3b      	ldrh	r3, [r7, #32]
 8005922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01b      	beq.n	8005962 <USB_DeactivateEndpoint+0x18a>
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005940:	83fb      	strh	r3, [r7, #30]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8bfb      	ldrh	r3, [r7, #30]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800595a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	83bb      	strh	r3, [r7, #28]
 8005970:	8bbb      	ldrh	r3, [r7, #28]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01b      	beq.n	80059b2 <USB_DeactivateEndpoint+0x1da>
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005990:	837b      	strh	r3, [r7, #26]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	8b7b      	ldrh	r3, [r7, #26]
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c8:	833b      	strh	r3, [r7, #24]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	8b3b      	ldrh	r3, [r7, #24]
 80059d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a00:	82fb      	strh	r3, [r7, #22]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a38:	82bb      	strh	r3, [r7, #20]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	441a      	add	r2, r3
 8005a44:	8abb      	ldrh	r3, [r7, #20]
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
 8005a5a:	e0a3      	b.n	8005ba4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <USB_DeactivateEndpoint+0x2d4>
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	441a      	add	r2, r3
 8005a96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005aba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <USB_DeactivateEndpoint+0x324>
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ada:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3734      	adds	r7, #52	@ 0x34
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b0c2      	sub	sp, #264	@ 0x108
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bbe:	6018      	str	r0, [r3, #0]
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f040 86b7 	bne.w	800694a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d908      	bls.n	8005c0a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c08:	e007      	b.n	8005c1a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	7b1b      	ldrb	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13a      	bne.n	8005ca0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6959      	ldr	r1, [r3, #20]
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	88da      	ldrh	r2, [r3, #6]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	f001 fc9c 	bl	800758e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	011a      	lsls	r2, r3, #4
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	f000 be1f 	b.w	80068de <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	78db      	ldrb	r3, [r3, #3]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	f040 8462 	bne.w	8006576 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f240 83df 	bls.w	800648e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 81c7 	beq.w	8006100 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d177      	bne.n	8005e7e <USB_EPStartXfer+0x2ce>
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	4413      	add	r3, r2
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	011a      	lsls	r2, r3, #4
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de0:	d921      	bls.n	8005e26 <USB_EPStartXfer+0x276>
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <USB_EPStartXfer+0x252>
 8005df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	4313      	orrs	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e050      	b.n	8005ec8 <USB_EPStartXfer+0x318>
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <USB_EPStartXfer+0x294>
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	e041      	b.n	8005ec8 <USB_EPStartXfer+0x318>
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <USB_EPStartXfer+0x2b4>
 8005e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	e024      	b.n	8005ec8 <USB_EPStartXfer+0x318>
 8005e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d11c      	bne.n	8005ec8 <USB_EPStartXfer+0x318>
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	4413      	add	r3, r2
 8005ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	895b      	ldrh	r3, [r3, #10]
 8005ed4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6959      	ldr	r1, [r3, #20]
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ef2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f001 fb49 	bl	800758e <USB_WritePMA>
            ep->xfer_buff += len;
 8005efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0c:	441a      	add	r2, r3
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d90f      	bls.n	8005f56 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	621a      	str	r2, [r3, #32]
 8005f54:	e00e      	b.n	8005f74 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d177      	bne.n	8006074 <USB_EPStartXfer+0x4c4>
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	011a      	lsls	r2, r3, #4
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fd6:	d921      	bls.n	800601c <USB_EPStartXfer+0x46c>
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <USB_EPStartXfer+0x448>
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006002:	b29b      	uxth	r3, r3
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	b29b      	uxth	r3, r3
 8006008:	4313      	orrs	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006014:	b29a      	uxth	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e056      	b.n	80060ca <USB_EPStartXfer+0x51a>
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <USB_EPStartXfer+0x48a>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e047      	b.n	80060ca <USB_EPStartXfer+0x51a>
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <USB_EPStartXfer+0x4aa>
 8006050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006054:	3301      	adds	r3, #1
 8006056:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e02a      	b.n	80060ca <USB_EPStartXfer+0x51a>
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d122      	bne.n	80060ca <USB_EPStartXfer+0x51a>
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	623b      	str	r3, [r7, #32]
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	4413      	add	r3, r2
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	011a      	lsls	r2, r3, #4
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	891b      	ldrh	r3, [r3, #8]
 80060d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6959      	ldr	r1, [r3, #20]
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060f8:	6800      	ldr	r0, [r0, #0]
 80060fa:	f001 fa48 	bl	800758e <USB_WritePMA>
 80060fe:	e3ee      	b.n	80068de <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d177      	bne.n	8006200 <USB_EPStartXfer+0x650>
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006130:	4413      	add	r3, r2
 8006132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	011a      	lsls	r2, r3, #4
 8006142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006144:	4413      	add	r3, r2
 8006146:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800614a:	647b      	str	r3, [r7, #68]	@ 0x44
 800614c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	2b3e      	cmp	r3, #62	@ 0x3e
 8006162:	d921      	bls.n	80061a8 <USB_EPStartXfer+0x5f8>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <USB_EPStartXfer+0x5d4>
 800617a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800617e:	3b01      	subs	r3, #1
 8006180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e056      	b.n	8006256 <USB_EPStartXfer+0x6a6>
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <USB_EPStartXfer+0x616>
 80061b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e047      	b.n	8006256 <USB_EPStartXfer+0x6a6>
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0x636>
 80061dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80061e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e02a      	b.n	8006256 <USB_EPStartXfer+0x6a6>
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d122      	bne.n	8006256 <USB_EPStartXfer+0x6a6>
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	653b      	str	r3, [r7, #80]	@ 0x50
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006230:	4413      	add	r3, r2
 8006232:	653b      	str	r3, [r7, #80]	@ 0x50
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	011a      	lsls	r2, r3, #4
 8006242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006244:	4413      	add	r3, r2
 8006246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800624a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	b29a      	uxth	r2, r3
 8006252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	891b      	ldrh	r3, [r3, #8]
 8006262:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6959      	ldr	r1, [r3, #20]
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	b29b      	uxth	r3, r3
 8006278:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800627c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006280:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006284:	6800      	ldr	r0, [r0, #0]
 8006286:	f001 f982 	bl	800758e <USB_WritePMA>
            ep->xfer_buff += len;
 800628a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	441a      	add	r2, r3
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d90f      	bls.n	80062e4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	621a      	str	r2, [r3, #32]
 80062e2:	e00e      	b.n	8006302 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d177      	bne.n	800640e <USB_EPStartXfer+0x85e>
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	4413      	add	r3, r2
 8006340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	4413      	add	r3, r2
 8006354:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
 800635a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006364:	b29a      	uxth	r2, r3
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006370:	d921      	bls.n	80063b6 <USB_EPStartXfer+0x806>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <USB_EPStartXfer+0x7e2>
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	3b01      	subs	r3, #1
 800638e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e050      	b.n	8006458 <USB_EPStartXfer+0x8a8>
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <USB_EPStartXfer+0x824>
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	e041      	b.n	8006458 <USB_EPStartXfer+0x8a8>
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <USB_EPStartXfer+0x844>
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29b      	uxth	r3, r3
 8006404:	4313      	orrs	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e024      	b.n	8006458 <USB_EPStartXfer+0x8a8>
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d11c      	bne.n	8006458 <USB_EPStartXfer+0x8a8>
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006432:	4413      	add	r3, r2
 8006434:	643b      	str	r3, [r7, #64]	@ 0x40
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	011a      	lsls	r2, r3, #4
 8006444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006446:	4413      	add	r3, r2
 8006448:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	b29a      	uxth	r2, r3
 8006454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	895b      	ldrh	r3, [r3, #10]
 8006464:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6959      	ldr	r1, [r3, #20]
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	b29b      	uxth	r3, r3
 800647a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800647e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006482:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	f001 f881 	bl	800758e <USB_WritePMA>
 800648c:	e227      	b.n	80068de <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80064c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800651a:	4413      	add	r3, r2
 800651c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800651e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	011a      	lsls	r2, r3, #4
 800652c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800652e:	4413      	add	r3, r2
 8006530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	b29a      	uxth	r2, r3
 800653c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800653e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	891b      	ldrh	r3, [r3, #8]
 800654c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6959      	ldr	r1, [r3, #20]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	b29b      	uxth	r3, r3
 8006562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006566:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800656a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800656e:	6800      	ldr	r0, [r0, #0]
 8006570:	f001 f80d 	bl	800758e <USB_WritePMA>
 8006574:	e1b3      	b.n	80068de <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 80c6 	beq.w	8006748 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d177      	bne.n	80066c8 <USB_EPStartXfer+0xb18>
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065f8:	4413      	add	r3, r2
 80065fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	011a      	lsls	r2, r3, #4
 800660a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800660c:	4413      	add	r3, r2
 800660e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006612:	667b      	str	r3, [r7, #100]	@ 0x64
 8006614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661e:	b29a      	uxth	r2, r3
 8006620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006628:	2b3e      	cmp	r3, #62	@ 0x3e
 800662a:	d921      	bls.n	8006670 <USB_EPStartXfer+0xac0>
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_EPStartXfer+0xa9c>
 8006642:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006646:	3b01      	subs	r3, #1
 8006648:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800664c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29a      	uxth	r2, r3
 8006652:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006656:	b29b      	uxth	r3, r3
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	b29b      	uxth	r3, r3
 800665c:	4313      	orrs	r3, r2
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e050      	b.n	8006712 <USB_EPStartXfer+0xb62>
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <USB_EPStartXfer+0xade>
 8006678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006686:	b29a      	uxth	r2, r3
 8006688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	e041      	b.n	8006712 <USB_EPStartXfer+0xb62>
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <USB_EPStartXfer+0xafe>
 80066a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e024      	b.n	8006712 <USB_EPStartXfer+0xb62>
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d11c      	bne.n	8006712 <USB_EPStartXfer+0xb62>
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066ec:	4413      	add	r3, r2
 80066ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006700:	4413      	add	r3, r2
 8006702:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	b29a      	uxth	r2, r3
 800670e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006710:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	895b      	ldrh	r3, [r3, #10]
 800671e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6959      	ldr	r1, [r3, #20]
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006732:	b29b      	uxth	r3, r3
 8006734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800673c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006740:	6800      	ldr	r0, [r0, #0]
 8006742:	f000 ff24 	bl	800758e <USB_WritePMA>
 8006746:	e0ca      	b.n	80068de <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d177      	bne.n	8006848 <USB_EPStartXfer+0xc98>
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006778:	4413      	add	r3, r2
 800677a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	011a      	lsls	r2, r3, #4
 800678a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800678c:	4413      	add	r3, r2
 800678e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006792:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067aa:	d921      	bls.n	80067f0 <USB_EPStartXfer+0xc40>
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <USB_EPStartXfer+0xc1c>
 80067c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4313      	orrs	r3, r2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e05c      	b.n	80068aa <USB_EPStartXfer+0xcfa>
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <USB_EPStartXfer+0xc5e>
 80067f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006806:	b29a      	uxth	r2, r3
 8006808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e04d      	b.n	80068aa <USB_EPStartXfer+0xcfa>
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <USB_EPStartXfer+0xc7e>
 8006824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006828:	3301      	adds	r3, #1
 800682a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800682e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006838:	b29b      	uxth	r3, r3
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	b29b      	uxth	r3, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e030      	b.n	80068aa <USB_EPStartXfer+0xcfa>
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d128      	bne.n	80068aa <USB_EPStartXfer+0xcfa>
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	011a      	lsls	r2, r3, #4
 8006890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006894:	4413      	add	r3, r2
 8006896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800689a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800689e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	891b      	ldrh	r3, [r3, #8]
 80068b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6959      	ldr	r1, [r3, #20]
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068d8:	6800      	ldr	r0, [r0, #0]
 80068da:	f000 fe58 	bl	800758e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006904:	817b      	strh	r3, [r7, #10]
 8006906:	897b      	ldrh	r3, [r7, #10]
 8006908:	f083 0310 	eor.w	r3, r3, #16
 800690c:	817b      	strh	r3, [r7, #10]
 800690e:	897b      	ldrh	r3, [r7, #10]
 8006910:	f083 0320 	eor.w	r3, r3, #32
 8006914:	817b      	strh	r3, [r7, #10]
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
 8006946:	f000 bcde 	b.w	8007306 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800694a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	7b1b      	ldrb	r3, [r3, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 80bb 	bne.w	8006ad2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	429a      	cmp	r2, r3
 8006976:	d917      	bls.n	80069a8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	619a      	str	r2, [r3, #24]
 80069a6:	e00e      	b.n	80069c6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80069a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069ea:	4413      	add	r3, r2
 80069ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a26:	d924      	bls.n	8006a72 <USB_EPStartXfer+0xec2>
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <USB_EPStartXfer+0xe98>
 8006a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a42:	3b01      	subs	r3, #1
 8006a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	f000 bc10 	b.w	8007292 <USB_EPStartXfer+0x16e2>
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <USB_EPStartXfer+0xee4>
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e3fe      	b.n	8007292 <USB_EPStartXfer+0x16e2>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <USB_EPStartXfer+0xf04>
 8006aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e3df      	b.n	8007292 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	f040 8218 	bne.w	8006f14 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 809d 	bne.w	8006c30 <USB_EPStartXfer+0x1080>
 8006af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b5e:	d92b      	bls.n	8006bb8 <USB_EPStartXfer+0x1008>
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <USB_EPStartXfer+0xfe0>
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	029b      	lsls	r3, r3, #10
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	e070      	b.n	8006c9a <USB_EPStartXfer+0x10ea>
 8006bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10c      	bne.n	8006be2 <USB_EPStartXfer+0x1032>
 8006bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	e05b      	b.n	8006c9a <USB_EPStartXfer+0x10ea>
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <USB_EPStartXfer+0x1062>
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	029b      	lsls	r3, r3, #10
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	e034      	b.n	8006c9a <USB_EPStartXfer+0x10ea>
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d12c      	bne.n	8006c9a <USB_EPStartXfer+0x10ea>
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c64:	4413      	add	r3, r2
 8006c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	011a      	lsls	r2, r3, #4
 8006c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f040 809d 	bne.w	8006df4 <USB_EPStartXfer+0x1244>
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cde:	4413      	add	r3, r2
 8006ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	011a      	lsls	r2, r3, #4
 8006cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d22:	d92b      	bls.n	8006d7c <USB_EPStartXfer+0x11cc>
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <USB_EPStartXfer+0x11a4>
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	029b      	lsls	r3, r3, #10
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e069      	b.n	8006e50 <USB_EPStartXfer+0x12a0>
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10c      	bne.n	8006da6 <USB_EPStartXfer+0x11f6>
 8006d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e054      	b.n	8006e50 <USB_EPStartXfer+0x12a0>
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <USB_EPStartXfer+0x1226>
 8006dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	029b      	lsls	r3, r3, #10
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4313      	orrs	r3, r2
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	e02d      	b.n	8006e50 <USB_EPStartXfer+0x12a0>
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d125      	bne.n	8006e50 <USB_EPStartXfer+0x12a0>
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	011a      	lsls	r2, r3, #4
 8006e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e4e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8218 	beq.w	8007292 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <USB_EPStartXfer+0x12ea>
 8006e8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10d      	bne.n	8006eb6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f040 81f5 	bne.w	8007292 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ea8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 81ee 	bne.w	8007292 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	8013      	strh	r3, [r2, #0]
 8006f12:	e1be      	b.n	8007292 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	78db      	ldrb	r3, [r3, #3]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 81b4 	bne.w	800728e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d917      	bls.n	8006f72 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	619a      	str	r2, [r3, #24]
 8006f70:	e00e      	b.n	8006f90 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f040 8085 	bne.w	80070ac <USB_EPStartXfer+0x14fc>
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	011a      	lsls	r2, r3, #4
 8006fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fde:	4413      	add	r3, r2
 8006fe0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	2b3e      	cmp	r3, #62	@ 0x3e
 8007002:	d923      	bls.n	800704c <USB_EPStartXfer+0x149c>
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <USB_EPStartXfer+0x1474>
 800701a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701e:	3b01      	subs	r3, #1
 8007020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29b      	uxth	r3, r3
 8007036:	4313      	orrs	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e060      	b.n	800710e <USB_EPStartXfer+0x155e>
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10c      	bne.n	800706e <USB_EPStartXfer+0x14be>
 8007054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007064:	b29a      	uxth	r2, r3
 8007066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e04f      	b.n	800710e <USB_EPStartXfer+0x155e>
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <USB_EPStartXfer+0x14de>
 8007084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007088:	3301      	adds	r3, #1
 800708a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800708e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	e030      	b.n	800710e <USB_EPStartXfer+0x155e>
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d128      	bne.n	800710e <USB_EPStartXfer+0x155e>
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070e0:	4413      	add	r3, r2
 80070e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	011a      	lsls	r2, r3, #4
 80070f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	b29a      	uxth	r2, r3
 8007108:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 8085 	bne.w	8007238 <USB_EPStartXfer+0x1688>
 800712e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800714a:	b29b      	uxth	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007152:	4413      	add	r3, r2
 8007154:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	011a      	lsls	r2, r3, #4
 8007166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800716a:	4413      	add	r3, r2
 800716c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007180:	b29a      	uxth	r2, r3
 8007182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718c:	2b3e      	cmp	r3, #62	@ 0x3e
 800718e:	d923      	bls.n	80071d8 <USB_EPStartXfer+0x1628>
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <USB_EPStartXfer+0x1600>
 80071a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071bc:	b29b      	uxth	r3, r3
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	4313      	orrs	r3, r2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e05c      	b.n	8007292 <USB_EPStartXfer+0x16e2>
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10c      	bne.n	80071fa <USB_EPStartXfer+0x164a>
 80071e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e04b      	b.n	8007292 <USB_EPStartXfer+0x16e2>
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <USB_EPStartXfer+0x166a>
 8007210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007214:	3301      	adds	r3, #1
 8007216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800721a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b29a      	uxth	r2, r3
 8007230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007234:	801a      	strh	r2, [r3, #0]
 8007236:	e02c      	b.n	8007292 <USB_EPStartXfer+0x16e2>
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d124      	bne.n	8007292 <USB_EPStartXfer+0x16e2>
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007256:	b29b      	uxth	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800725e:	4413      	add	r3, r2
 8007260:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	011a      	lsls	r2, r3, #4
 8007272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007276:	4413      	add	r3, r2
 8007278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800727c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	e001      	b.n	8007292 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e03a      	b.n	8007308 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80072d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d020      	beq.n	8007366 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733a:	81bb      	strh	r3, [r7, #12]
 800733c:	89bb      	ldrh	r3, [r7, #12]
 800733e:	f083 0310 	eor.w	r3, r3, #16
 8007342:	81bb      	strh	r3, [r7, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	89bb      	ldrh	r3, [r7, #12]
 8007350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007360:	b29b      	uxth	r3, r3
 8007362:	8013      	strh	r3, [r2, #0]
 8007364:	e01f      	b.n	80073a6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737c:	81fb      	strh	r3, [r7, #14]
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007384:	81fb      	strh	r3, [r7, #14]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	441a      	add	r2, r3
 8007390:	89fb      	ldrh	r3, [r7, #14]
 8007392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800739e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b087      	sub	sp, #28
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 809d 	bne.w	8007500 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04c      	beq.n	8007468 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	823b      	strh	r3, [r7, #16]
 80073dc:	8a3b      	ldrh	r3, [r7, #16]
 80073de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01b      	beq.n	800741e <USB_EPClearStall+0x6c>
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fc:	81fb      	strh	r3, [r7, #14]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	441a      	add	r2, r3
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800741a:	b29b      	uxth	r3, r3
 800741c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	78db      	ldrb	r3, [r3, #3]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d06c      	beq.n	8007500 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800743c:	81bb      	strh	r3, [r7, #12]
 800743e:	89bb      	ldrh	r3, [r7, #12]
 8007440:	f083 0320 	eor.w	r3, r3, #32
 8007444:	81bb      	strh	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	441a      	add	r2, r3
 8007450:	89bb      	ldrh	r3, [r7, #12]
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800745a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]
 8007466:	e04b      	b.n	8007500 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	82fb      	strh	r3, [r7, #22]
 8007476:	8afb      	ldrh	r3, [r7, #22]
 8007478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <USB_EPClearStall+0x106>
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007496:	82bb      	strh	r3, [r7, #20]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	8abb      	ldrh	r3, [r7, #20]
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ce:	827b      	strh	r3, [r7, #18]
 80074d0:	8a7b      	ldrh	r3, [r7, #18]
 80074d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074d6:	827b      	strh	r3, [r7, #18]
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80074de:	827b      	strh	r3, [r7, #18]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	441a      	add	r2, r3
 80074ea:	8a7b      	ldrh	r3, [r7, #18]
 80074ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr

0800750c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2280      	movs	r2, #128	@ 0x80
 8007522:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007568:	b29b      	uxth	r3, r3
 800756a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800756c:	68fb      	ldr	r3, [r7, #12]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr

08007578 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr

0800758e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800758e:	b480      	push	{r7}
 8007590:	b08b      	sub	sp, #44	@ 0x2c
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	4611      	mov	r1, r2
 800759a:	461a      	mov	r2, r3
 800759c:	460b      	mov	r3, r1
 800759e:	80fb      	strh	r3, [r7, #6]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80075a4:	88bb      	ldrh	r3, [r7, #4]
 80075a6:	3301      	adds	r3, #1
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075b4:	88fb      	ldrh	r3, [r7, #6]
 80075b6:	005a      	lsls	r2, r3, #1
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c6:	e01e      	b.n	8007606 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3301      	adds	r3, #1
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	b21a      	sxth	r2, r3
 80075d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075dc:	4313      	orrs	r3, r2
 80075de:	b21b      	sxth	r3, r3
 80075e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	8a7a      	ldrh	r2, [r7, #18]
 80075e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	3302      	adds	r3, #2
 80075ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	3302      	adds	r3, #2
 80075f2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	3301      	adds	r3, #1
 80075f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3301      	adds	r3, #1
 80075fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	3b01      	subs	r3, #1
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1dd      	bne.n	80075c8 <USB_WritePMA+0x3a>
  }
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	372c      	adds	r7, #44	@ 0x2c
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007618:	b480      	push	{r7}
 800761a:	b08b      	sub	sp, #44	@ 0x2c
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	460b      	mov	r3, r1
 8007628:	80fb      	strh	r3, [r7, #6]
 800762a:	4613      	mov	r3, r2
 800762c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800762e:	88bb      	ldrh	r3, [r7, #4]
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	005a      	lsls	r2, r3, #1
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800764a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007650:	e01b      	b.n	800768a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	3302      	adds	r3, #2
 800765e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b2da      	uxtb	r2, r3
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	3302      	adds	r3, #2
 8007682:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	3b01      	subs	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e0      	bne.n	8007652 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007690:	88bb      	ldrh	r3, [r7, #4]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	701a      	strb	r2, [r3, #0]
  }
}
 80076ac:	bf00      	nop
 80076ae:	372c      	adds	r7, #44	@ 0x2c
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7c1b      	ldrb	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d115      	bne.n	80076fa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076d2:	2202      	movs	r2, #2
 80076d4:	2181      	movs	r1, #129	@ 0x81
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fe1b 	bl	8009312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076e6:	2202      	movs	r2, #2
 80076e8:	2101      	movs	r1, #1
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fe11 	bl	8009312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80076f8:	e012      	b.n	8007720 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076fa:	2340      	movs	r3, #64	@ 0x40
 80076fc:	2202      	movs	r2, #2
 80076fe:	2181      	movs	r1, #129	@ 0x81
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fe06 	bl	8009312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800770c:	2340      	movs	r3, #64	@ 0x40
 800770e:	2202      	movs	r2, #2
 8007710:	2101      	movs	r1, #1
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fdfd 	bl	8009312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007720:	2308      	movs	r3, #8
 8007722:	2203      	movs	r2, #3
 8007724:	2182      	movs	r1, #130	@ 0x82
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fdf3 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007732:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007736:	f001 ff13 	bl	8009560 <USBD_static_malloc>
 800773a:	4602      	mov	r2, r0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e026      	b.n	80077a0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007758:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7c1b      	ldrb	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007786:	2101      	movs	r1, #1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 feb3 	bl	80094f4 <USBD_LL_PrepareReceive>
 800778e:	e007      	b.n	80077a0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007796:	2340      	movs	r3, #64	@ 0x40
 8007798:	2101      	movs	r1, #1
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 feaa 	bl	80094f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80077ba:	2181      	movs	r1, #129	@ 0x81
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fdce 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80077c8:	2101      	movs	r1, #1
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fdc7 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80077d8:	2182      	movs	r1, #130	@ 0x82
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fdbf 	bl	800935e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00e      	beq.n	800780e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007800:	4618      	mov	r0, r3
 8007802:	f001 feb9 	bl	8009578 <USBD_static_free>
    pdev->pClassData = NULL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007828:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800783e:	2b00      	cmp	r3, #0
 8007840:	d039      	beq.n	80078b6 <USBD_CDC_Setup+0x9e>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d17f      	bne.n	8007946 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	88db      	ldrh	r3, [r3, #6]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d029      	beq.n	80078a2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b25b      	sxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	da11      	bge.n	800787c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007864:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	88d2      	ldrh	r2, [r2, #6]
 800786a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800786c:	6939      	ldr	r1, [r7, #16]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	461a      	mov	r2, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f9d5 	bl	8008c24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800787a:	e06b      	b.n	8007954 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	785a      	ldrb	r2, [r3, #1]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	88db      	ldrh	r3, [r3, #6]
 800788a:	b2da      	uxtb	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007892:	6939      	ldr	r1, [r7, #16]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	461a      	mov	r2, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f9f0 	bl	8008c80 <USBD_CtlPrepareRx>
      break;
 80078a0:	e058      	b.n	8007954 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	7850      	ldrb	r0, [r2, #1]
 80078ae:	2200      	movs	r2, #0
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	4798      	blx	r3
      break;
 80078b4:	e04e      	b.n	8007954 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b0b      	cmp	r3, #11
 80078bc:	d02e      	beq.n	800791c <USBD_CDC_Setup+0x104>
 80078be:	2b0b      	cmp	r3, #11
 80078c0:	dc38      	bgt.n	8007934 <USBD_CDC_Setup+0x11c>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <USBD_CDC_Setup+0xb4>
 80078c6:	2b0a      	cmp	r3, #10
 80078c8:	d014      	beq.n	80078f4 <USBD_CDC_Setup+0xdc>
 80078ca:	e033      	b.n	8007934 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d107      	bne.n	80078e6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	2202      	movs	r2, #2
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f9a0 	bl	8008c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078e4:	e02e      	b.n	8007944 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f931 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 80078ee:	2302      	movs	r3, #2
 80078f0:	75fb      	strb	r3, [r7, #23]
          break;
 80078f2:	e027      	b.n	8007944 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d107      	bne.n	800790e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80078fe:	f107 030f 	add.w	r3, r7, #15
 8007902:	2201      	movs	r2, #1
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 f98c 	bl	8008c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800790c:	e01a      	b.n	8007944 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f91d 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007916:	2302      	movs	r3, #2
 8007918:	75fb      	strb	r3, [r7, #23]
          break;
 800791a:	e013      	b.n	8007944 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007922:	2b03      	cmp	r3, #3
 8007924:	d00d      	beq.n	8007942 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f911 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007932:	e006      	b.n	8007942 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f90a 	bl	8008b50 <USBD_CtlError>
          ret = USBD_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	75fb      	strb	r3, [r7, #23]
          break;
 8007940:	e000      	b.n	8007944 <USBD_CDC_Setup+0x12c>
          break;
 8007942:	bf00      	nop
      }
      break;
 8007944:	e006      	b.n	8007954 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f901 	bl	8008b50 <USBD_CtlError>
      ret = USBD_FAIL;
 800794e:	2302      	movs	r3, #2
 8007950:	75fb      	strb	r3, [r7, #23]
      break;
 8007952:	bf00      	nop
  }

  return ret;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007970:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007978:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d03a      	beq.n	80079fa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	331c      	adds	r3, #28
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d029      	beq.n	80079ee <USBD_CDC_DataIn+0x90>
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	331c      	adds	r3, #28
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	78f9      	ldrb	r1, [r7, #3]
 80079ae:	68b8      	ldr	r0, [r7, #8]
 80079b0:	460b      	mov	r3, r1
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4403      	add	r3, r0
 80079ba:	3338      	adds	r3, #56	@ 0x38
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	fbb2 f1f3 	udiv	r1, r2, r3
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d110      	bne.n	80079ee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	331c      	adds	r3, #28
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079e0:	78f9      	ldrb	r1, [r7, #3]
 80079e2:	2300      	movs	r3, #0
 80079e4:	2200      	movs	r2, #0
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fd61 	bl	80094ae <USBD_LL_Transmit>
 80079ec:	e003      	b.n	80079f6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fd8c 	bl	800953a <USBD_LL_GetRxDataSize>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4798      	blx	r3

    return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a68:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d014      	beq.n	8007a9e <USBD_CDC_EP0_RxReady+0x44>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a7a:	2bff      	cmp	r3, #255	@ 0xff
 8007a7c:	d00f      	beq.n	8007a9e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	22ff      	movs	r2, #255	@ 0xff
 8007a9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2243      	movs	r2, #67	@ 0x43
 8007ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000094 	.word	0x20000094

08007ac8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2243      	movs	r2, #67	@ 0x43
 8007ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007ad6:	4b03      	ldr	r3, [pc, #12]	@ (8007ae4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000050 	.word	0x20000050

08007ae8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2243      	movs	r2, #67	@ 0x43
 8007af4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007af6:	4b03      	ldr	r3, [pc, #12]	@ (8007b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200000d8 	.word	0x200000d8

08007b08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	220a      	movs	r2, #10
 8007b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b16:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000000c 	.word	0x2000000c

08007b28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b32:	2302      	movs	r3, #2
 8007b34:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr

08007b86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d017      	beq.n	8007bf6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bd8:	2101      	movs	r1, #1
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fc8a 	bl	80094f4 <USBD_LL_PrepareReceive>
 8007be0:	e007      	b.n	8007bf2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007be8:	2340      	movs	r3, #64	@ 0x40
 8007bea:	2101      	movs	r1, #1
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fc81 	bl	80094f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e000      	b.n	8007bf8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007bf6:	2302      	movs	r3, #2
  }
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c14:	2302      	movs	r3, #2
 8007c16:	e01a      	b.n	8007c4e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	79fa      	ldrb	r2, [r7, #7]
 8007c44:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 faee 	bl	8009228 <USBD_LL_Init>

  return USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d006      	beq.n	8007c78 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	e001      	b.n	8007c7c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fb23 	bl	80092dc <USBD_LL_Start>

  return USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fed7 	bl	8008ade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d016      	beq.n	8007d82 <USBD_LL_SetupStage+0x6a>
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d81c      	bhi.n	8007d92 <USBD_LL_SetupStage+0x7a>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <USBD_LL_SetupStage+0x4a>
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d008      	beq.n	8007d72 <USBD_LL_SetupStage+0x5a>
 8007d60:	e017      	b.n	8007d92 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9ca 	bl	8008104 <USBD_StdDevReq>
      break;
 8007d70:	e01a      	b.n	8007da8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa2c 	bl	80081d8 <USBD_StdItfReq>
      break;
 8007d80:	e012      	b.n	8007da8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa6c 	bl	8008268 <USBD_StdEPReq>
      break;
 8007d90:	e00a      	b.n	8007da8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007d98:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fafb 	bl	800939c <USBD_LL_StallEP>
      break;
 8007da6:	bf00      	nop
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b086      	sub	sp, #24
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d14b      	bne.n	8007e5e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007dcc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d134      	bne.n	8007e42 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d919      	bls.n	8007e18 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	1ad2      	subs	r2, r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d203      	bcs.n	8007e06 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	e002      	b.n	8007e0c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 ff53 	bl	8008cbc <USBD_CtlContinueRx>
 8007e16:	e038      	b.n	8007e8a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d105      	bne.n	8007e3a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 ff50 	bl	8008ce0 <USBD_CtlSendStatus>
 8007e40:	e023      	b.n	8007e8a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	d11e      	bne.n	8007e8a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e54:	2100      	movs	r1, #0
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f001 faa0 	bl	800939c <USBD_LL_StallEP>
 8007e5c:	e015      	b.n	8007e8a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00d      	beq.n	8007e86 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d108      	bne.n	8007e86 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	7afa      	ldrb	r2, [r7, #11]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
 8007e84:	e001      	b.n	8007e8a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e000      	b.n	8007e8c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d17f      	bne.n	8007fa8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d15c      	bne.n	8007f72 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d915      	bls.n	8007ef0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 febd 	bl	8008c5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f001 fb03 	bl	80094f4 <USBD_LL_PrepareReceive>
 8007eee:	e04e      	b.n	8007f8e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	6912      	ldr	r2, [r2, #16]
 8007ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007efc:	fb01 f202 	mul.w	r2, r1, r2
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d11c      	bne.n	8007f40 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d316      	bcc.n	8007f40 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d20f      	bcs.n	8007f40 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fe99 	bl	8008c5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f001 fadb 	bl	80094f4 <USBD_LL_PrepareReceive>
 8007f3e:	e026      	b.n	8007f8e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d105      	bne.n	8007f62 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f62:	2180      	movs	r1, #128	@ 0x80
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 fa19 	bl	800939c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fecb 	bl	8008d06 <USBD_CtlReceiveStatus>
 8007f70:	e00d      	b.n	8007f8e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d004      	beq.n	8007f86 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f86:	2180      	movs	r1, #128	@ 0x80
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f001 fa07 	bl	800939c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d11d      	bne.n	8007fd4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff fe81 	bl	8007ca0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007fa6:	e015      	b.n	8007fd4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d108      	bne.n	8007fd0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	7afa      	ldrb	r2, [r7, #11]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	4798      	blx	r3
 8007fce:	e001      	b.n	8007fd4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e000      	b.n	8007fd6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fe6:	2340      	movs	r3, #64	@ 0x40
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 f990 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008002:	2340      	movs	r3, #64	@ 0x40
 8008004:	2200      	movs	r2, #0
 8008006:	2180      	movs	r1, #128	@ 0x80
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f982 	bl	8009312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2240      	movs	r2, #64	@ 0x40
 8008018:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6852      	ldr	r2, [r2, #4]
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	4611      	mov	r1, r2
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
  }

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d105      	bne.n	80080c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d10b      	bne.n	80080fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	d005      	beq.n	800812a <USBD_StdDevReq+0x26>
 800811e:	2b40      	cmp	r3, #64	@ 0x40
 8008120:	d84f      	bhi.n	80081c2 <USBD_StdDevReq+0xbe>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <USBD_StdDevReq+0x36>
 8008126:	2b20      	cmp	r3, #32
 8008128:	d14b      	bne.n	80081c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
      break;
 8008138:	e048      	b.n	80081cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b09      	cmp	r3, #9
 8008140:	d839      	bhi.n	80081b6 <USBD_StdDevReq+0xb2>
 8008142:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <USBD_StdDevReq+0x44>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	08008199 	.word	0x08008199
 800814c:	080081ad 	.word	0x080081ad
 8008150:	080081b7 	.word	0x080081b7
 8008154:	080081a3 	.word	0x080081a3
 8008158:	080081b7 	.word	0x080081b7
 800815c:	0800817b 	.word	0x0800817b
 8008160:	08008171 	.word	0x08008171
 8008164:	080081b7 	.word	0x080081b7
 8008168:	0800818f 	.word	0x0800818f
 800816c:	08008185 	.word	0x08008185
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9dc 	bl	8008530 <USBD_GetDescriptor>
          break;
 8008178:	e022      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fb3f 	bl	8008800 <USBD_SetAddress>
          break;
 8008182:	e01d      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb7e 	bl	8008888 <USBD_SetConfig>
          break;
 800818c:	e018      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc07 	bl	80089a4 <USBD_GetConfig>
          break;
 8008196:	e013      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc37 	bl	8008a0e <USBD_GetStatus>
          break;
 80081a0:	e00e      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fc65 	bl	8008a74 <USBD_SetFeature>
          break;
 80081aa:	e009      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc74 	bl	8008a9c <USBD_ClrFeature>
          break;
 80081b4:	e004      	b.n	80081c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fcc9 	bl	8008b50 <USBD_CtlError>
          break;
 80081be:	bf00      	nop
      }
      break;
 80081c0:	e004      	b.n	80081cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fcc3 	bl	8008b50 <USBD_CtlError>
      break;
 80081ca:	bf00      	nop
  }

  return ret;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop

080081d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081ee:	2b40      	cmp	r3, #64	@ 0x40
 80081f0:	d005      	beq.n	80081fe <USBD_StdItfReq+0x26>
 80081f2:	2b40      	cmp	r3, #64	@ 0x40
 80081f4:	d82e      	bhi.n	8008254 <USBD_StdItfReq+0x7c>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USBD_StdItfReq+0x26>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d12a      	bne.n	8008254 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008204:	3b01      	subs	r3, #1
 8008206:	2b02      	cmp	r3, #2
 8008208:	d81d      	bhi.n	8008246 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d813      	bhi.n	800823c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	88db      	ldrh	r3, [r3, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d110      	bne.n	8008250 <USBD_StdItfReq+0x78>
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10d      	bne.n	8008250 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd53 	bl	8008ce0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800823a:	e009      	b.n	8008250 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc86 	bl	8008b50 <USBD_CtlError>
          break;
 8008244:	e004      	b.n	8008250 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc81 	bl	8008b50 <USBD_CtlError>
          break;
 800824e:	e000      	b.n	8008252 <USBD_StdItfReq+0x7a>
          break;
 8008250:	bf00      	nop
      }
      break;
 8008252:	e004      	b.n	800825e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fc7a 	bl	8008b50 <USBD_CtlError>
      break;
 800825c:	bf00      	nop
  }

  return USBD_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	889b      	ldrh	r3, [r3, #4]
 800827a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008284:	2b40      	cmp	r3, #64	@ 0x40
 8008286:	d007      	beq.n	8008298 <USBD_StdEPReq+0x30>
 8008288:	2b40      	cmp	r3, #64	@ 0x40
 800828a:	f200 8146 	bhi.w	800851a <USBD_StdEPReq+0x2b2>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <USBD_StdEPReq+0x40>
 8008292:	2b20      	cmp	r3, #32
 8008294:	f040 8141 	bne.w	800851a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
      break;
 80082a6:	e13d      	b.n	8008524 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d10a      	bne.n	80082ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	e12d      	b.n	8008526 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d007      	beq.n	80082e2 <USBD_StdEPReq+0x7a>
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	f300 811b 	bgt.w	800850e <USBD_StdEPReq+0x2a6>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d072      	beq.n	80083c2 <USBD_StdEPReq+0x15a>
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d03a      	beq.n	8008356 <USBD_StdEPReq+0xee>
 80082e0:	e115      	b.n	800850e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d002      	beq.n	80082f2 <USBD_StdEPReq+0x8a>
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d015      	beq.n	800831c <USBD_StdEPReq+0xb4>
 80082f0:	e02b      	b.n	800834a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00c      	beq.n	8008312 <USBD_StdEPReq+0xaa>
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b80      	cmp	r3, #128	@ 0x80
 80082fc:	d009      	beq.n	8008312 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f84a 	bl	800939c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008308:	2180      	movs	r1, #128	@ 0x80
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f846 	bl	800939c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008310:	e020      	b.n	8008354 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fc1b 	bl	8008b50 <USBD_CtlError>
              break;
 800831a:	e01b      	b.n	8008354 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10e      	bne.n	8008342 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <USBD_StdEPReq+0xda>
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b80      	cmp	r3, #128	@ 0x80
 800832e:	d008      	beq.n	8008342 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	88db      	ldrh	r3, [r3, #6]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f82d 	bl	800939c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fccc 	bl	8008ce0 <USBD_CtlSendStatus>

              break;
 8008348:	e004      	b.n	8008354 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fbff 	bl	8008b50 <USBD_CtlError>
              break;
 8008352:	bf00      	nop
          }
          break;
 8008354:	e0e0      	b.n	8008518 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800835c:	2b02      	cmp	r3, #2
 800835e:	d002      	beq.n	8008366 <USBD_StdEPReq+0xfe>
 8008360:	2b03      	cmp	r3, #3
 8008362:	d015      	beq.n	8008390 <USBD_StdEPReq+0x128>
 8008364:	e026      	b.n	80083b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <USBD_StdEPReq+0x11e>
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b80      	cmp	r3, #128	@ 0x80
 8008370:	d009      	beq.n	8008386 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 f810 	bl	800939c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800837c:	2180      	movs	r1, #128	@ 0x80
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 f80c 	bl	800939c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008384:	e01c      	b.n	80083c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fbe1 	bl	8008b50 <USBD_CtlError>
              break;
 800838e:	e017      	b.n	80083c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d112      	bne.n	80083be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f817 	bl	80093da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc97 	bl	8008ce0 <USBD_CtlSendStatus>
              }
              break;
 80083b2:	e004      	b.n	80083be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fbca 	bl	8008b50 <USBD_CtlError>
              break;
 80083bc:	e000      	b.n	80083c0 <USBD_StdEPReq+0x158>
              break;
 80083be:	bf00      	nop
          }
          break;
 80083c0:	e0aa      	b.n	8008518 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d002      	beq.n	80083d2 <USBD_StdEPReq+0x16a>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d032      	beq.n	8008436 <USBD_StdEPReq+0x1ce>
 80083d0:	e097      	b.n	8008502 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <USBD_StdEPReq+0x180>
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b80      	cmp	r3, #128	@ 0x80
 80083dc:	d004      	beq.n	80083e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fbb5 	bl	8008b50 <USBD_CtlError>
                break;
 80083e6:	e091      	b.n	800850c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	da0b      	bge.n	8008408 <USBD_StdEPReq+0x1a0>
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	3310      	adds	r3, #16
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	e00b      	b.n	8008420 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2202      	movs	r2, #2
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fbf8 	bl	8008c24 <USBD_CtlSendData>
              break;
 8008434:	e06a      	b.n	800850c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	da11      	bge.n	8008462 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3318      	adds	r3, #24
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d117      	bne.n	8008488 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb78 	bl	8008b50 <USBD_CtlError>
                  break;
 8008460:	e054      	b.n	800850c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	f003 020f 	and.w	r2, r3, #15
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d104      	bne.n	8008488 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fb65 	bl	8008b50 <USBD_CtlError>
                  break;
 8008486:	e041      	b.n	800850c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800848c:	2b00      	cmp	r3, #0
 800848e:	da0b      	bge.n	80084a8 <USBD_StdEPReq+0x240>
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	3310      	adds	r3, #16
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	4413      	add	r3, r2
 80084a4:	3304      	adds	r3, #4
 80084a6:	e00b      	b.n	80084c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	4413      	add	r3, r2
 80084be:	3304      	adds	r3, #4
 80084c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <USBD_StdEPReq+0x266>
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b80      	cmp	r3, #128	@ 0x80
 80084cc:	d103      	bne.n	80084d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2200      	movs	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e00e      	b.n	80084f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 ff9c 	bl	8009418 <USBD_LL_IsStallEP>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2201      	movs	r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	e002      	b.n	80084f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2202      	movs	r2, #2
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fb92 	bl	8008c24 <USBD_CtlSendData>
              break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb23 	bl	8008b50 <USBD_CtlError>
              break;
 800850a:	bf00      	nop
          }
          break;
 800850c:	e004      	b.n	8008518 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb1d 	bl	8008b50 <USBD_CtlError>
          break;
 8008516:	bf00      	nop
      }
      break;
 8008518:	e004      	b.n	8008524 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fb17 	bl	8008b50 <USBD_CtlError>
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b06      	cmp	r3, #6
 8008552:	f200 8128 	bhi.w	80087a6 <USBD_GetDescriptor+0x276>
 8008556:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <USBD_GetDescriptor+0x2c>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008579 	.word	0x08008579
 8008560:	08008591 	.word	0x08008591
 8008564:	080085d1 	.word	0x080085d1
 8008568:	080087a7 	.word	0x080087a7
 800856c:	080087a7 	.word	0x080087a7
 8008570:	08008747 	.word	0x08008747
 8008574:	08008773 	.word	0x08008773
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
      break;
 800858e:	e112      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7c1b      	ldrb	r3, [r3, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10d      	bne.n	80085b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	f107 0208 	add.w	r2, r7, #8
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	2202      	movs	r2, #2
 80085b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085b2:	e100      	b.n	80087b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	f107 0208 	add.w	r2, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	2202      	movs	r2, #2
 80085cc:	701a      	strb	r2, [r3, #0]
      break;
 80085ce:	e0f2      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	f200 80ac 	bhi.w	8008734 <USBD_GetDescriptor+0x204>
 80085dc:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <USBD_GetDescriptor+0xb4>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	08008631 	.word	0x08008631
 80085ec:	08008665 	.word	0x08008665
 80085f0:	08008699 	.word	0x08008699
 80085f4:	080086cd 	.word	0x080086cd
 80085f8:	08008701 	.word	0x08008701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861e:	e091      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa94 	bl	8008b50 <USBD_CtlError>
            err++;
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	3301      	adds	r3, #1
 800862c:	72fb      	strb	r3, [r7, #11]
          break;
 800862e:	e089      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	7c12      	ldrb	r2, [r2, #16]
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008652:	e077      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa7a 	bl	8008b50 <USBD_CtlError>
            err++;
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	3301      	adds	r3, #1
 8008660:	72fb      	strb	r3, [r7, #11]
          break;
 8008662:	e06f      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7c12      	ldrb	r2, [r2, #16]
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008686:	e05d      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa60 	bl	8008b50 <USBD_CtlError>
            err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
          break;
 8008696:	e055      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7c12      	ldrb	r2, [r2, #16]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
 80086b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ba:	e043      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa46 	bl	8008b50 <USBD_CtlError>
            err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ca:	e03b      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ee:	e029      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa2c 	bl	8008b50 <USBD_CtlError>
            err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
          break;
 80086fe:	e021      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008722:	e00f      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa12 	bl	8008b50 <USBD_CtlError>
            err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
          break;
 8008732:	e007      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa0a 	bl	8008b50 <USBD_CtlError>
          err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008742:	e038      	b.n	80087b6 <USBD_GetDescriptor+0x286>
 8008744:	e037      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	7c1b      	ldrb	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	f107 0208 	add.w	r2, r7, #8
 800875a:	4610      	mov	r0, r2
 800875c:	4798      	blx	r3
 800875e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008760:	e029      	b.n	80087b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9f3 	bl	8008b50 <USBD_CtlError>
        err++;
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	3301      	adds	r3, #1
 800876e:	72fb      	strb	r3, [r7, #11]
      break;
 8008770:	e021      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7c1b      	ldrb	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10d      	bne.n	8008796 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008782:	f107 0208 	add.w	r2, r7, #8
 8008786:	4610      	mov	r0, r2
 8008788:	4798      	blx	r3
 800878a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	2207      	movs	r2, #7
 8008792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008794:	e00f      	b.n	80087b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f9d9 	bl	8008b50 <USBD_CtlError>
        err++;
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	3301      	adds	r3, #1
 80087a2:	72fb      	strb	r3, [r7, #11]
      break;
 80087a4:	e007      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9d1 	bl	8008b50 <USBD_CtlError>
      err++;
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	3301      	adds	r3, #1
 80087b2:	72fb      	strb	r3, [r7, #11]
      break;
 80087b4:	bf00      	nop
  }

  if (err != 0U)
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11c      	bne.n	80087f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087bc:	893b      	ldrh	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d011      	beq.n	80087e6 <USBD_GetDescriptor+0x2b6>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	88db      	ldrh	r3, [r3, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00d      	beq.n	80087e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88da      	ldrh	r2, [r3, #6]
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bf28      	it	cs
 80087d4:	4613      	movcs	r3, r2
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	461a      	mov	r2, r3
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa1f 	bl	8008c24 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	88db      	ldrh	r3, [r3, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa76 	bl	8008ce0 <USBD_CtlSendStatus>
 80087f4:	e000      	b.n	80087f8 <USBD_GetDescriptor+0x2c8>
    return;
 80087f6:	bf00      	nop
    }
  }
}
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	889b      	ldrh	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d130      	bne.n	8008874 <USBD_SetAddress+0x74>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	88db      	ldrh	r3, [r3, #6]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d12c      	bne.n	8008874 <USBD_SetAddress+0x74>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008820:	d828      	bhi.n	8008874 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800882c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008834:	2b03      	cmp	r3, #3
 8008836:	d104      	bne.n	8008842 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f988 	bl	8008b50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	e01d      	b.n	800887e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fe0e 	bl	8009470 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fa43 	bl	8008ce0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008868:	e009      	b.n	800887e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008872:	e004      	b.n	800887e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f96a 	bl	8008b50 <USBD_CtlError>
  }
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	b2da      	uxtb	r2, r3
 8008898:	4b41      	ldr	r3, [pc, #260]	@ (80089a0 <USBD_SetConfig+0x118>)
 800889a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800889c:	4b40      	ldr	r3, [pc, #256]	@ (80089a0 <USBD_SetConfig+0x118>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d904      	bls.n	80088ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f952 	bl	8008b50 <USBD_CtlError>
 80088ac:	e075      	b.n	800899a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d002      	beq.n	80088be <USBD_SetConfig+0x36>
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d023      	beq.n	8008904 <USBD_SetConfig+0x7c>
 80088bc:	e062      	b.n	8008984 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088be:	4b38      	ldr	r3, [pc, #224]	@ (80089a0 <USBD_SetConfig+0x118>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01a      	beq.n	80088fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088c6:	4b36      	ldr	r3, [pc, #216]	@ (80089a0 <USBD_SetConfig+0x118>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2203      	movs	r2, #3
 80088d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088d8:	4b31      	ldr	r3, [pc, #196]	@ (80089a0 <USBD_SetConfig+0x118>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff f9e8 	bl	8007cb4 <USBD_SetClassConfig>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d104      	bne.n	80088f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f92f 	bl	8008b50 <USBD_CtlError>
            return;
 80088f2:	e052      	b.n	800899a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9f3 	bl	8008ce0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088fa:	e04e      	b.n	800899a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f9ef 	bl	8008ce0 <USBD_CtlSendStatus>
        break;
 8008902:	e04a      	b.n	800899a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008904:	4b26      	ldr	r3, [pc, #152]	@ (80089a0 <USBD_SetConfig+0x118>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d112      	bne.n	8008932 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008914:	4b22      	ldr	r3, [pc, #136]	@ (80089a0 <USBD_SetConfig+0x118>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800891e:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <USBD_SetConfig+0x118>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff f9e4 	bl	8007cf2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9d8 	bl	8008ce0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008930:	e033      	b.n	800899a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008932:	4b1b      	ldr	r3, [pc, #108]	@ (80089a0 <USBD_SetConfig+0x118>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d01d      	beq.n	800897c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff f9d2 	bl	8007cf2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800894e:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <USBD_SetConfig+0x118>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008958:	4b11      	ldr	r3, [pc, #68]	@ (80089a0 <USBD_SetConfig+0x118>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff f9a8 	bl	8007cb4 <USBD_SetClassConfig>
 8008964:	4603      	mov	r3, r0
 8008966:	2b02      	cmp	r3, #2
 8008968:	d104      	bne.n	8008974 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f8ef 	bl	8008b50 <USBD_CtlError>
            return;
 8008972:	e012      	b.n	800899a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f9b3 	bl	8008ce0 <USBD_CtlSendStatus>
        break;
 800897a:	e00e      	b.n	800899a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f9af 	bl	8008ce0 <USBD_CtlSendStatus>
        break;
 8008982:	e00a      	b.n	800899a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f8e2 	bl	8008b50 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800898c:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <USBD_SetConfig+0x118>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff f9ad 	bl	8007cf2 <USBD_ClrClassConfig>
        break;
 8008998:	bf00      	nop
    }
  }
}
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	2000036c 	.word	0x2000036c

080089a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	88db      	ldrh	r3, [r3, #6]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d004      	beq.n	80089c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f8c9 	bl	8008b50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089be:	e022      	b.n	8008a06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	dc02      	bgt.n	80089d0 <USBD_GetConfig+0x2c>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dc03      	bgt.n	80089d6 <USBD_GetConfig+0x32>
 80089ce:	e015      	b.n	80089fc <USBD_GetConfig+0x58>
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d00b      	beq.n	80089ec <USBD_GetConfig+0x48>
 80089d4:	e012      	b.n	80089fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3308      	adds	r3, #8
 80089e0:	2201      	movs	r2, #1
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f91d 	bl	8008c24 <USBD_CtlSendData>
        break;
 80089ea:	e00c      	b.n	8008a06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3304      	adds	r3, #4
 80089f0:	2201      	movs	r2, #1
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f915 	bl	8008c24 <USBD_CtlSendData>
        break;
 80089fa:	e004      	b.n	8008a06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f8a6 	bl	8008b50 <USBD_CtlError>
        break;
 8008a04:	bf00      	nop
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d81e      	bhi.n	8008a62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	88db      	ldrh	r3, [r3, #6]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d004      	beq.n	8008a36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f88e 	bl	8008b50 <USBD_CtlError>
        break;
 8008a34:	e01a      	b.n	8008a6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f043 0202 	orr.w	r2, r3, #2
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	330c      	adds	r3, #12
 8008a56:	2202      	movs	r2, #2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8e2 	bl	8008c24 <USBD_CtlSendData>
      break;
 8008a60:	e004      	b.n	8008a6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f873 	bl	8008b50 <USBD_CtlError>
      break;
 8008a6a:	bf00      	nop
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	885b      	ldrh	r3, [r3, #2]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d106      	bne.n	8008a94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f926 	bl	8008ce0 <USBD_CtlSendStatus>
  }
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aac:	3b01      	subs	r3, #1
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d80b      	bhi.n	8008aca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d10c      	bne.n	8008ad4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f90c 	bl	8008ce0 <USBD_CtlSendStatus>
      }
      break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f83f 	bl	8008b50 <USBD_CtlError>
      break;
 8008ad2:	e000      	b.n	8008ad6 <USBD_ClrFeature+0x3a>
      break;
 8008ad4:	bf00      	nop
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	785a      	ldrb	r2, [r3, #1]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3302      	adds	r3, #2
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	3303      	adds	r3, #3
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	3304      	adds	r3, #4
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	3305      	adds	r3, #5
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	3306      	adds	r3, #6
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	3307      	adds	r3, #7
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	80da      	strh	r2, [r3, #6]

}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b5a:	2180      	movs	r1, #128	@ 0x80
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc1d 	bl	800939c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b62:	2100      	movs	r1, #0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fc19 	bl	800939c <USBD_LL_StallEP>
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d032      	beq.n	8008bee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f834 	bl	8008bf6 <USBD_GetLen>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	3301      	adds	r3, #1
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	75fa      	strb	r2, [r7, #23]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	75fa      	strb	r2, [r7, #23]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	2203      	movs	r2, #3
 8008bbc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bbe:	e012      	b.n	8008be6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	60fa      	str	r2, [r7, #12]
 8008bc6:	7dfa      	ldrb	r2, [r7, #23]
 8008bc8:	1c51      	adds	r1, r2, #1
 8008bca:	75f9      	strb	r1, [r7, #23]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	75fa      	strb	r2, [r7, #23]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e8      	bne.n	8008bc0 <USBD_GetString+0x4e>
    }
  }
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c02:	e005      	b.n	8008c10 <USBD_GetLen+0x1a>
  {
    len++;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	3301      	adds	r3, #1
 8008c08:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f5      	bne.n	8008c04 <USBD_GetLen+0xe>
  }

  return len;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr

08008c24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c3a:	88fa      	ldrh	r2, [r7, #6]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c40:	88fa      	ldrh	r2, [r7, #6]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fc2e 	bl	80094ae <USBD_LL_Transmit>

  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fc1c 	bl	80094ae <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c96:	88fa      	ldrh	r2, [r7, #6]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c9e:	88fa      	ldrh	r2, [r7, #6]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	2100      	movs	r1, #0
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fc21 	bl	80094f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fc0f 	bl	80094f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbd9 	bl	80094ae <USBD_LL_Transmit>

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2205      	movs	r2, #5
 8008d12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d16:	2300      	movs	r3, #0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fbe9 	bl	80094f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d30:	2200      	movs	r2, #0
 8008d32:	4912      	ldr	r1, [pc, #72]	@ (8008d7c <MX_USB_DEVICE_Init+0x50>)
 8008d34:	4812      	ldr	r0, [pc, #72]	@ (8008d80 <MX_USB_DEVICE_Init+0x54>)
 8008d36:	f7fe ff63 	bl	8007c00 <USBD_Init>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d40:	f7f7 fe12 	bl	8000968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d44:	490f      	ldr	r1, [pc, #60]	@ (8008d84 <MX_USB_DEVICE_Init+0x58>)
 8008d46:	480e      	ldr	r0, [pc, #56]	@ (8008d80 <MX_USB_DEVICE_Init+0x54>)
 8008d48:	f7fe ff85 	bl	8007c56 <USBD_RegisterClass>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d52:	f7f7 fe09 	bl	8000968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d56:	490c      	ldr	r1, [pc, #48]	@ (8008d88 <MX_USB_DEVICE_Init+0x5c>)
 8008d58:	4809      	ldr	r0, [pc, #36]	@ (8008d80 <MX_USB_DEVICE_Init+0x54>)
 8008d5a:	f7fe fee5 	bl	8007b28 <USBD_CDC_RegisterInterface>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d64:	f7f7 fe00 	bl	8000968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d68:	4805      	ldr	r0, [pc, #20]	@ (8008d80 <MX_USB_DEVICE_Init+0x54>)
 8008d6a:	f7fe ff8d 	bl	8007c88 <USBD_Start>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d74:	f7f7 fdf8 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d78:	bf00      	nop
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	2000012c 	.word	0x2000012c
 8008d80:	20000370 	.word	0x20000370
 8008d84:	20000018 	.word	0x20000018
 8008d88:	2000011c 	.word	0x2000011c

08008d8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d90:	2200      	movs	r2, #0
 8008d92:	4905      	ldr	r1, [pc, #20]	@ (8008da8 <CDC_Init_FS+0x1c>)
 8008d94:	4805      	ldr	r0, [pc, #20]	@ (8008dac <CDC_Init_FS+0x20>)
 8008d96:	f7fe fedd 	bl	8007b54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d9a:	4905      	ldr	r1, [pc, #20]	@ (8008db0 <CDC_Init_FS+0x24>)
 8008d9c:	4803      	ldr	r0, [pc, #12]	@ (8008dac <CDC_Init_FS+0x20>)
 8008d9e:	f7fe fef2 	bl	8007b86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008da2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20000a34 	.word	0x20000a34
 8008dac:	20000370 	.word	0x20000370
 8008db0:	20000634 	.word	0x20000634

08008db4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008db8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr
	...

08008dc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	6039      	str	r1, [r7, #0]
 8008dce:	71fb      	strb	r3, [r7, #7]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2b23      	cmp	r3, #35	@ 0x23
 8008dd8:	d84a      	bhi.n	8008e70 <CDC_Control_FS+0xac>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <CDC_Control_FS+0x1c>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008e71 	.word	0x08008e71
 8008de4:	08008e71 	.word	0x08008e71
 8008de8:	08008e71 	.word	0x08008e71
 8008dec:	08008e71 	.word	0x08008e71
 8008df0:	08008e71 	.word	0x08008e71
 8008df4:	08008e71 	.word	0x08008e71
 8008df8:	08008e71 	.word	0x08008e71
 8008dfc:	08008e71 	.word	0x08008e71
 8008e00:	08008e71 	.word	0x08008e71
 8008e04:	08008e71 	.word	0x08008e71
 8008e08:	08008e71 	.word	0x08008e71
 8008e0c:	08008e71 	.word	0x08008e71
 8008e10:	08008e71 	.word	0x08008e71
 8008e14:	08008e71 	.word	0x08008e71
 8008e18:	08008e71 	.word	0x08008e71
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008e71 	.word	0x08008e71
 8008e24:	08008e71 	.word	0x08008e71
 8008e28:	08008e71 	.word	0x08008e71
 8008e2c:	08008e71 	.word	0x08008e71
 8008e30:	08008e71 	.word	0x08008e71
 8008e34:	08008e71 	.word	0x08008e71
 8008e38:	08008e71 	.word	0x08008e71
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008e71 	.word	0x08008e71
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08008e71 	.word	0x08008e71
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e71 	.word	0x08008e71
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008e71 	.word	0x08008e71
 8008e68:	08008e71 	.word	0x08008e71
 8008e6c:	08008e71 	.word	0x08008e71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e70:	bf00      	nop
  }

  return (USBD_OK);
 8008e72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop

08008e80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4805      	ldr	r0, [pc, #20]	@ (8008ea4 <CDC_Receive_FS+0x24>)
 8008e8e:	f7fe fe7a 	bl	8007b86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e92:	4804      	ldr	r0, [pc, #16]	@ (8008ea4 <CDC_Receive_FS+0x24>)
 8008e94:	f7fe fe8a 	bl	8007bac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000370 	.word	0x20000370

08008ea8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2212      	movs	r2, #18
 8008eb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008eba:	4b03      	ldr	r3, [pc, #12]	@ (8008ec8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000148 	.word	0x20000148

08008ecc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2204      	movs	r2, #4
 8008edc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ede:	4b03      	ldr	r3, [pc, #12]	@ (8008eec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	2000015c 	.word	0x2000015c

08008ef0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d105      	bne.n	8008f0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	4907      	ldr	r1, [pc, #28]	@ (8008f24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f06:	4808      	ldr	r0, [pc, #32]	@ (8008f28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f08:	f7ff fe33 	bl	8008b72 <USBD_GetString>
 8008f0c:	e004      	b.n	8008f18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4904      	ldr	r1, [pc, #16]	@ (8008f24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f12:	4805      	ldr	r0, [pc, #20]	@ (8008f28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f14:	f7ff fe2d 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f18:	4b02      	ldr	r3, [pc, #8]	@ (8008f24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000e34 	.word	0x20000e34
 8008f28:	08009668 	.word	0x08009668

08008f2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	4904      	ldr	r1, [pc, #16]	@ (8008f4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f3c:	4804      	ldr	r0, [pc, #16]	@ (8008f50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f3e:	f7ff fe18 	bl	8008b72 <USBD_GetString>
  return USBD_StrDesc;
 8008f42:	4b02      	ldr	r3, [pc, #8]	@ (8008f4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20000e34 	.word	0x20000e34
 8008f50:	08009680 	.word	0x08009680

08008f54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	221a      	movs	r2, #26
 8008f64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f66:	f000 f843 	bl	8008ff0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f6a:	4b02      	ldr	r3, [pc, #8]	@ (8008f74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000160 	.word	0x20000160

08008f78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	4907      	ldr	r1, [pc, #28]	@ (8008fac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f8e:	4808      	ldr	r0, [pc, #32]	@ (8008fb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f90:	f7ff fdef 	bl	8008b72 <USBD_GetString>
 8008f94:	e004      	b.n	8008fa0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	4904      	ldr	r1, [pc, #16]	@ (8008fac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f9a:	4805      	ldr	r0, [pc, #20]	@ (8008fb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f9c:	f7ff fde9 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa0:	4b02      	ldr	r3, [pc, #8]	@ (8008fac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000e34 	.word	0x20000e34
 8008fb0:	08009694 	.word	0x08009694

08008fb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d105      	bne.n	8008fd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	4907      	ldr	r1, [pc, #28]	@ (8008fe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fca:	4808      	ldr	r0, [pc, #32]	@ (8008fec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fcc:	f7ff fdd1 	bl	8008b72 <USBD_GetString>
 8008fd0:	e004      	b.n	8008fdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4904      	ldr	r1, [pc, #16]	@ (8008fe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fd6:	4805      	ldr	r0, [pc, #20]	@ (8008fec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fd8:	f7ff fdcb 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fdc:	4b02      	ldr	r3, [pc, #8]	@ (8008fe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000e34 	.word	0x20000e34
 8008fec:	080096a0 	.word	0x080096a0

08008ff0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d009      	beq.n	8009018 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009004:	2208      	movs	r2, #8
 8009006:	4906      	ldr	r1, [pc, #24]	@ (8009020 <Get_SerialNum+0x30>)
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 f80d 	bl	8009028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800900e:	2204      	movs	r2, #4
 8009010:	4904      	ldr	r1, [pc, #16]	@ (8009024 <Get_SerialNum+0x34>)
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f808 	bl	8009028 <IntToUnicode>
  }
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20000162 	.word	0x20000162
 8009024:	20000172 	.word	0x20000172

08009028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
 800903e:	e027      	b.n	8009090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	0f1b      	lsrs	r3, r3, #28
 8009044:	2b09      	cmp	r3, #9
 8009046:	d80b      	bhi.n	8009060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	0f1b      	lsrs	r3, r3, #28
 800904c:	b2da      	uxtb	r2, r3
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4619      	mov	r1, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	440b      	add	r3, r1
 8009058:	3230      	adds	r2, #48	@ 0x30
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e00a      	b.n	8009076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	0f1b      	lsrs	r3, r3, #28
 8009064:	b2da      	uxtb	r2, r3
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	4619      	mov	r1, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	440b      	add	r3, r1
 8009070:	3237      	adds	r2, #55	@ 0x37
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	3301      	adds	r3, #1
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	4413      	add	r3, r2
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	3301      	adds	r3, #1
 800908e:	75fb      	strb	r3, [r7, #23]
 8009090:	7dfa      	ldrb	r2, [r7, #23]
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	429a      	cmp	r2, r3
 8009096:	d3d3      	bcc.n	8009040 <IntToUnicode+0x18>
  }
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0d      	ldr	r2, [pc, #52]	@ (80090e8 <HAL_PCD_MspInit+0x44>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d113      	bne.n	80090de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090b6:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <HAL_PCD_MspInit+0x48>)
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4a0c      	ldr	r2, [pc, #48]	@ (80090ec <HAL_PCD_MspInit+0x48>)
 80090bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090c0:	61d3      	str	r3, [r2, #28]
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <HAL_PCD_MspInit+0x48>)
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	2014      	movs	r0, #20
 80090d4:	f7f8 f9b1 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80090d8:	2014      	movs	r0, #20
 80090da:	f7f8 f9ca 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40005c00 	.word	0x40005c00
 80090ec:	40021000 	.word	0x40021000

080090f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7fe fe06 	bl	8007d18 <USBD_LL_SetupStage>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	440b      	add	r3, r1
 8009134:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	4619      	mov	r1, r3
 800913e:	f7fe fe38 	bl	8007db2 <USBD_LL_DataOutStage>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	440b      	add	r3, r1
 800916a:	333c      	adds	r3, #60	@ 0x3c
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	4619      	mov	r1, r3
 8009172:	f7fe fe8f 	bl	8007e94 <USBD_LL_DataInStage>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe ff9f 	bl	80080d0 <USBD_LL_SOF>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091a2:	2301      	movs	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d001      	beq.n	80091b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ae:	f7f7 fbdb 	bl	8000968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80091b8:	7bfa      	ldrb	r2, [r7, #15]
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ff4f 	bl	8008060 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe ff08 	bl	8007fde <USBD_LL_Reset>
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe ff49 	bl	800807e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f4:	4b04      	ldr	r3, [pc, #16]	@ (8009208 <HAL_PCD_SuspendCallback+0x30>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a03      	ldr	r2, [pc, #12]	@ (8009208 <HAL_PCD_SuspendCallback+0x30>)
 80091fa:	f043 0306 	orr.w	r3, r3, #6
 80091fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed00 	.word	0xe000ed00

0800920c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe ff43 	bl	80080a6 <USBD_LL_Resume>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009230:	4a28      	ldr	r2, [pc, #160]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a26      	ldr	r2, [pc, #152]	@ (80092d4 <USBD_LL_Init+0xac>)
 800923c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009240:	4b24      	ldr	r3, [pc, #144]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009242:	4a25      	ldr	r2, [pc, #148]	@ (80092d8 <USBD_LL_Init+0xb0>)
 8009244:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009246:	4b23      	ldr	r3, [pc, #140]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009248:	2208      	movs	r2, #8
 800924a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800924c:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <USBD_LL_Init+0xac>)
 800924e:	2202      	movs	r2, #2
 8009250:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009252:	4b20      	ldr	r3, [pc, #128]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009254:	2200      	movs	r2, #0
 8009256:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009258:	4b1e      	ldr	r3, [pc, #120]	@ (80092d4 <USBD_LL_Init+0xac>)
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800925e:	4b1d      	ldr	r3, [pc, #116]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009260:	2200      	movs	r2, #0
 8009262:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009264:	481b      	ldr	r0, [pc, #108]	@ (80092d4 <USBD_LL_Init+0xac>)
 8009266:	f7f8 faeb 	bl	8001840 <HAL_PCD_Init>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009270:	f7f7 fb7a 	bl	8000968 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800927a:	2318      	movs	r3, #24
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	f7fa f809 	bl	8003296 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800928a:	2358      	movs	r3, #88	@ 0x58
 800928c:	2200      	movs	r2, #0
 800928e:	2180      	movs	r1, #128	@ 0x80
 8009290:	f7fa f801 	bl	8003296 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800929a:	23c0      	movs	r3, #192	@ 0xc0
 800929c:	2200      	movs	r2, #0
 800929e:	2181      	movs	r1, #129	@ 0x81
 80092a0:	f7f9 fff9 	bl	8003296 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80092ae:	2200      	movs	r2, #0
 80092b0:	2101      	movs	r1, #1
 80092b2:	f7f9 fff0 	bl	8003296 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092c0:	2200      	movs	r2, #0
 80092c2:	2182      	movs	r1, #130	@ 0x82
 80092c4:	f7f9 ffe7 	bl	8003296 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20001034 	.word	0x20001034
 80092d8:	40005c00 	.word	0x40005c00

080092dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f8 fba3 	bl	8001a3e <HAL_PCD_Start>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f94e 	bl	80095a0 <USBD_Get_USB_Status>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009308:	7bbb      	ldrb	r3, [r7, #14]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	461a      	mov	r2, r3
 8009320:	4603      	mov	r3, r0
 8009322:	70fb      	strb	r3, [r7, #3]
 8009324:	460b      	mov	r3, r1
 8009326:	70bb      	strb	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800933a:	78bb      	ldrb	r3, [r7, #2]
 800933c:	883a      	ldrh	r2, [r7, #0]
 800933e:	78f9      	ldrb	r1, [r7, #3]
 8009340:	f7f8 fcf8 	bl	8001d34 <HAL_PCD_EP_Open>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f928 	bl	80095a0 <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009354:	7bbb      	ldrb	r3, [r7, #14]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7f8 fd36 	bl	8001dee <HAL_PCD_EP_Close>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f909 	bl	80095a0 <USBD_Get_USB_Status>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009392:	7bbb      	ldrb	r3, [r7, #14]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f8 fdde 	bl	8001f7c <HAL_PCD_EP_SetStall>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f8ea 	bl	80095a0 <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f8 fe1f 	bl	800203c <HAL_PCD_EP_ClrStall>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f8cb 	bl	80095a0 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800942a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800942c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009430:	2b00      	cmp	r3, #0
 8009432:	da0c      	bge.n	800944e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	440b      	add	r3, r1
 8009448:	3302      	adds	r3, #2
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	e00b      	b.n	8009466 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009454:	68f9      	ldr	r1, [r7, #12]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	440b      	add	r3, r1
 8009460:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009464:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr

08009470 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f7f8 fc2b 	bl	8001cea <HAL_PCD_SetAddress>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f880 	bl	80095a0 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b086      	sub	sp, #24
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	461a      	mov	r2, r3
 80094ba:	460b      	mov	r3, r1
 80094bc:	72fb      	strb	r3, [r7, #11]
 80094be:	4613      	mov	r3, r2
 80094c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094d0:	893b      	ldrh	r3, [r7, #8]
 80094d2:	7af9      	ldrb	r1, [r7, #11]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	f7f8 fd1a 	bl	8001f0e <HAL_PCD_EP_Transmit>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 f85d 	bl	80095a0 <USBD_Get_USB_Status>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	607a      	str	r2, [r7, #4]
 80094fe:	461a      	mov	r2, r3
 8009500:	460b      	mov	r3, r1
 8009502:	72fb      	strb	r3, [r7, #11]
 8009504:	4613      	mov	r3, r2
 8009506:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009516:	893b      	ldrh	r3, [r7, #8]
 8009518:	7af9      	ldrb	r1, [r7, #11]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	f7f8 fcaf 	bl	8001e7e <HAL_PCD_EP_Receive>
 8009520:	4603      	mov	r3, r0
 8009522:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f83a 	bl	80095a0 <USBD_Get_USB_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009530:	7dbb      	ldrb	r3, [r7, #22]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800954c:	78fa      	ldrb	r2, [r7, #3]
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7f8 fcc5 	bl	8001ee0 <HAL_PCD_EP_GetRxCount>
 8009556:	4603      	mov	r3, r0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009568:	4b02      	ldr	r3, [pc, #8]	@ (8009574 <USBD_static_malloc+0x14>)
}
 800956a:	4618      	mov	r0, r3
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr
 8009574:	20001324 	.word	0x20001324

08009578 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]

}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr

0800958a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr

080095a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d817      	bhi.n	80095e4 <USBD_Get_USB_Status+0x44>
 80095b4:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <USBD_Get_USB_Status+0x1c>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	080095cd 	.word	0x080095cd
 80095c0:	080095d3 	.word	0x080095d3
 80095c4:	080095d9 	.word	0x080095d9
 80095c8:	080095df 	.word	0x080095df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
    break;
 80095d0:	e00b      	b.n	80095ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095d2:	2302      	movs	r3, #2
 80095d4:	73fb      	strb	r3, [r7, #15]
    break;
 80095d6:	e008      	b.n	80095ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095d8:	2301      	movs	r3, #1
 80095da:	73fb      	strb	r3, [r7, #15]
    break;
 80095dc:	e005      	b.n	80095ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095de:	2302      	movs	r3, #2
 80095e0:	73fb      	strb	r3, [r7, #15]
    break;
 80095e2:	e002      	b.n	80095ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095e4:	2302      	movs	r3, #2
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	bf00      	nop
  }
  return usb_status;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bc80      	pop	{r7}
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop

080095f8 <memset>:
 80095f8:	4603      	mov	r3, r0
 80095fa:	4402      	add	r2, r0
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d100      	bne.n	8009602 <memset+0xa>
 8009600:	4770      	bx	lr
 8009602:	f803 1b01 	strb.w	r1, [r3], #1
 8009606:	e7f9      	b.n	80095fc <memset+0x4>

08009608 <__libc_init_array>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	2600      	movs	r6, #0
 800960c:	4d0c      	ldr	r5, [pc, #48]	@ (8009640 <__libc_init_array+0x38>)
 800960e:	4c0d      	ldr	r4, [pc, #52]	@ (8009644 <__libc_init_array+0x3c>)
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	42a6      	cmp	r6, r4
 8009616:	d109      	bne.n	800962c <__libc_init_array+0x24>
 8009618:	f000 f81a 	bl	8009650 <_init>
 800961c:	2600      	movs	r6, #0
 800961e:	4d0a      	ldr	r5, [pc, #40]	@ (8009648 <__libc_init_array+0x40>)
 8009620:	4c0a      	ldr	r4, [pc, #40]	@ (800964c <__libc_init_array+0x44>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	42a6      	cmp	r6, r4
 8009628:	d105      	bne.n	8009636 <__libc_init_array+0x2e>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009630:	4798      	blx	r3
 8009632:	3601      	adds	r6, #1
 8009634:	e7ee      	b.n	8009614 <__libc_init_array+0xc>
 8009636:	f855 3b04 	ldr.w	r3, [r5], #4
 800963a:	4798      	blx	r3
 800963c:	3601      	adds	r6, #1
 800963e:	e7f2      	b.n	8009626 <__libc_init_array+0x1e>
 8009640:	080096d4 	.word	0x080096d4
 8009644:	080096d4 	.word	0x080096d4
 8009648:	080096d4 	.word	0x080096d4
 800964c:	080096d8 	.word	0x080096d8

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
